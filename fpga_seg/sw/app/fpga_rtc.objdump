
fpga_rtc.elf:     file format elf32-littlenios2
fpga_rtc.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00020020

Program Header:
    LOAD off    0x00001000 vaddr 0x00020000 paddr 0x00020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00020020 paddr 0x00020020 align 2**12
         filesz 0x00003d70 memsz 0x00003d70 flags r-x
    LOAD off    0x00004d90 vaddr 0x00023d90 paddr 0x00024790 align 2**12
         filesz 0x00000a00 memsz 0x00000a00 flags rw-
    LOAD off    0x00006190 vaddr 0x00025190 paddr 0x00025190 align 2**12
         filesz 0x00000000 memsz 0x00000044 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00020000  00020000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00020020  00020020  00005790  2**0
                  CONTENTS
  2 .text         00003d48  00020020  00020020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000028  00023d68  00023d68  00004d68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000a00  00023d90  00024790  00004d90  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000044  00025190  00025190  00006190  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  000251d4  000251d4  00005790  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00005790  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000748  00000000  00000000  000057b8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00012a17  00000000  00000000  00005f00  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00004894  00000000  00000000  00018917  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000053bf  00000000  00000000  0001d1ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000f10  00000000  00000000  0002256c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00001bac  00000000  00000000  0002347c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000489d  00000000  00000000  00025028  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  000298c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000005a8  00000000  00000000  000298f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0002baa2  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0002baa5  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0002bab1  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0002bab2  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000004  00000000  00000000  0002bab3  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000004  00000000  00000000  0002bab7  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000004  00000000  00000000  0002babb  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000006  00000000  00000000  0002babf  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000059  00000000  00000000  0002bac5  2**0
                  CONTENTS, READONLY
 26 .jdi          000045aa  00000000  00000000  0002bb1e  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     00032253  00000000  00000000  000300c8  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00020000 l    d  .entry	00000000 .entry
00020020 l    d  .exceptions	00000000 .exceptions
00020020 l    d  .text	00000000 .text
00023d68 l    d  .rodata	00000000 .rodata
00023d90 l    d  .rwdata	00000000 .rwdata
00025190 l    d  .bss	00000000 .bss
000251d4 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 C:/Users/Lukas/OneDrive/Documents/EPFL/Autumn_16/Embedded_Systems/GIT/fpga_seg/sw/fpga_rtc_bsp//obj/HAL/src/crt0.o
00020068 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 findfp.c
0002020c l     F .text	00000008 __fp_unlock
00020220 l     F .text	0000019c __sinit.part.1
000203bc l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00023d90 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_close.c
00022e68 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00022f88 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00022fb4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
000230b4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
000231a8 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00023294 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00023460 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0002478c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
000236c0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00022c60 g     F .text	00000054 _isatty_r
000233b8 g     F .text	00000060 alt_main
000200a0 g     F .text	000000c0 _puts_r
00022988 g     F .text	00000060 _lseek_r
00024790 g       *ABS*	00000000 __flash_rwdata_start
000251d4 g       *ABS*	00000000 __alt_heap_start
00021f3c g     F .text	0000005c __sseek
0002055c g     F .text	00000010 __sinit
000203c4 g     F .text	00000068 __sfmoreglue
0002343c g     F .text	00000024 __malloc_unlock
00021628 g     F .text	0000015c memmove
00020544 g     F .text	00000018 _cleanup
0002399c g     F .text	00000024 altera_nios2_gen2_irq_init
00020000 g     F .entry	0000001c __reset
00020020 g       *ABS*	00000000 __flash_exceptions_start
00022c04 g     F .text	0000005c _fstat_r
0002519c g     O .bss	00000004 errno
00021eb8 g     F .text	00000008 __seofread
000251a4 g     O .bss	00000004 alt_argv
0002c764 g       *ABS*	00000000 _gp
000245e4 g     O .rwdata	00000180 alt_fd_list
000214e0 g     F .text	00000148 memcpy
00020214 g     F .text	0000000c _cleanup_r
00023d68 g       *ABS*	00000000 __DTOR_END__
00020160 g     F .text	00000014 puts
00020000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00022dac g     F .text	00000064 .hidden __udivsi3
00023104 g     F .text	000000a4 isatty
000239c0 g     F .text	00000090 alt_icache_flush
00025198 g     O .bss	00000004 __malloc_top_pad
000205ac g     F .text	000004bc __sfvwrite_r
00021e10 g     F .text	00000054 _sbrk_r
00022ba4 g     F .text	00000060 _read_r
00024784 g     O .rwdata	00000004 alt_max_fd
000221a8 g     F .text	000000f0 _fclose_r
00022524 g     F .text	00000030 fflush
00025194 g     O .bss	00000004 __malloc_max_sbrked_mem
000232e4 g     F .text	000000d4 lseek
00024764 g     O .rwdata	00000004 _global_impure_ptr
000218ac g     F .text	00000564 _realloc_r
000251d4 g       *ABS*	00000000 __bss_end
0002057c g     F .text	00000018 __fp_lock_all
000245bc g     O .rwdata	00000028 alt_dev_null
00023860 g     F .text	00000048 alt_dcache_flush_all
00024790 g       *ABS*	00000000 __ram_rwdata_end
0002477c g     O .rwdata	00000008 alt_dev_list
00023710 g     F .text	000000f8 write
00023d90 g       *ABS*	00000000 __ram_rodata_end
00023004 g     F .text	000000b0 fstat
00022e10 g     F .text	00000058 .hidden __umodsi3
000251d4 g       *ABS*	00000000 end
00023d68 g       *ABS*	00000000 __CTOR_LIST__
00040000 g       *ABS*	00000000 __alt_stack_pointer
0002056c g     F .text	00000004 __sfp_lock_acquire
000213fc g     F .text	000000e4 memchr
00022678 g     F .text	00000310 _free_r
00023bb4 g     F .text	00000180 __call_exitprocs
0002476c g     O .rwdata	00000004 __malloc_sbrk_base
00020020 g     F .text	0000004c _start
000234b0 g     F .text	000000fc read
00023840 g     F .text	00000020 alt_sys_init
00023a9c g     F .text	00000118 __register_exitproc
00023d90 g       *ABS*	00000000 __ram_rwdata_start
00023d68 g       *ABS*	00000000 __ram_rodata_start
000251ac g     O .bss	00000028 __malloc_current_mallinfo
00022154 g     F .text	00000054 _close_r
000251d4 g       *ABS*	00000000 __alt_stack_base
00022000 g     F .text	00000154 __swsetup_r
0002042c g     F .text	00000118 __sfp
000241b4 g     O .rwdata	00000408 __malloc_av_
00020578 g     F .text	00000004 __sinit_lock_release
00021e64 g     F .text	00000054 __sread
00023418 g     F .text	00000024 __malloc_lock
00023610 g     F .text	000000b0 sbrk
000224c8 g     F .text	0000005c _fflush_r
00025190 g       *ABS*	00000000 __bss_start
00021784 g     F .text	00000128 memset
0002006c g     F .text	00000034 main
000251a8 g     O .bss	00000004 alt_envp
00025190 g     O .bss	00000004 __malloc_max_total_mem
00021f98 g     F .text	00000008 __sclose
00040000 g       *ABS*	00000000 __alt_heap_limit
00022298 g     F .text	00000014 fclose
00020bf0 g     F .text	0000080c _malloc_r
00024788 g     O .rwdata	00000004 alt_errno
00020a68 g     F .text	000000c4 _fwalk
00022cb4 g     F .text	00000084 .hidden __divsi3
00022554 g     F .text	00000124 _malloc_trim_r
00023d68 g       *ABS*	00000000 __CTOR_END__
00023d68 g       *ABS*	00000000 __flash_rodata_start
00023d68 g       *ABS*	00000000 __DTOR_LIST__
00023808 g     F .text	00000038 alt_irq_init
000235ac g     F .text	00000064 alt_release_fd
00023a50 g     F .text	00000014 atexit
00021fa0 g     F .text	00000060 _write_r
00024768 g     O .rwdata	00000004 _impure_ptr
000251a0 g     O .bss	00000004 alt_argc
000222ac g     F .text	0000021c __sflush_r
00023908 g     F .text	00000060 _do_dtors
00020594 g     F .text	00000018 __fp_unlock_all
00024774 g     O .rwdata	00000008 alt_fs_list
00020020 g       *ABS*	00000000 __ram_exceptions_start
00024790 g       *ABS*	00000000 _edata
000251d4 g       *ABS*	00000000 _end
00020020 g       *ABS*	00000000 __ram_exceptions_end
00021ec0 g     F .text	0000007c __swrite
00024770 g     O .rwdata	00000004 __malloc_trim_threshold
00023a64 g     F .text	00000038 exit
00020b2c g     F .text	000000c4 _fwalk_reent
00022d38 g     F .text	00000074 .hidden __modsi3
00040000 g       *ABS*	00000000 __alt_data_end
00020570 g     F .text	00000004 __sfp_lock_release
00023d34 g     F .text	00000034 _exit
000229e8 g     F .text	000001bc __smakebuf_r
00020174 g     F .text	00000098 strlen
00023968 g     F .text	00000034 alt_icache_flush_all
000238a8 g     F .text	00000060 _do_ctors
00022eb8 g     F .text	000000d0 close
00023210 g     F .text	00000084 alt_load
00020574 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00020000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   20000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   20004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   20008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   2000c:	00bffd16 	blt	zero,r2,20004 <__alt_data_end+0xfffe0004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   20010:	004000b4 	movhi	at,2
    ori r1, r1, %lo(_start)
   20014:	08400814 	ori	at,at,32
    jmp r1
   20018:	0800683a 	jmp	at
   2001c:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x20000>

Disassembly of section .text:

00020020 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
   20020:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
   20024:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
   20028:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
   2002c:	00bffd16 	blt	zero,r2,20024 <__alt_data_end+0xfffe0024>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   20030:	06c00134 	movhi	sp,4
    ori sp, sp, %lo(__alt_stack_pointer)
   20034:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   20038:	068000b4 	movhi	gp,2
    ori gp, gp, %lo(_gp)
   2003c:	d6b1d914 	ori	gp,gp,51044
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   20040:	008000b4 	movhi	r2,2
    ori r2, r2, %lo(__bss_start)
   20044:	10946414 	ori	r2,r2,20880

    movhi r3, %hi(__bss_end)
   20048:	00c000b4 	movhi	r3,2
    ori r3, r3, %lo(__bss_end)
   2004c:	18d47514 	ori	r3,r3,20948

    beq r2, r3, 1f
   20050:	10c00326 	beq	r2,r3,20060 <_start+0x40>

0:
    stw zero, (r2)
   20054:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   20058:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   2005c:	10fffd36 	bltu	r2,r3,20054 <__alt_data_end+0xfffe0054>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   20060:	00232100 	call	23210 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   20064:	00233b80 	call	233b8 <alt_main>

00020068 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   20068:	003fff06 	br	20068 <__alt_data_end+0xfffe0068>

0002006c <main>:
 */

#include <stdio.h>

int main()
{
   2006c:	defffe04 	addi	sp,sp,-8
   20070:	dfc00115 	stw	ra,4(sp)
   20074:	df000015 	stw	fp,0(sp)
   20078:	d839883a 	mov	fp,sp
  printf("Hello from Nios II!\n");
   2007c:	010000b4 	movhi	r4,2
   20080:	210f5a04 	addi	r4,r4,15720
   20084:	00201600 	call	20160 <puts>

  return 0;
   20088:	0005883a 	mov	r2,zero
}
   2008c:	e037883a 	mov	sp,fp
   20090:	dfc00117 	ldw	ra,4(sp)
   20094:	df000017 	ldw	fp,0(sp)
   20098:	dec00204 	addi	sp,sp,8
   2009c:	f800283a 	ret

000200a0 <_puts_r>:
   200a0:	defff604 	addi	sp,sp,-40
   200a4:	dc000715 	stw	r16,28(sp)
   200a8:	2021883a 	mov	r16,r4
   200ac:	2809883a 	mov	r4,r5
   200b0:	dc400815 	stw	r17,32(sp)
   200b4:	dfc00915 	stw	ra,36(sp)
   200b8:	2823883a 	mov	r17,r5
   200bc:	00201740 	call	20174 <strlen>
   200c0:	10c00044 	addi	r3,r2,1
   200c4:	d8800115 	stw	r2,4(sp)
   200c8:	008000b4 	movhi	r2,2
   200cc:	108f5f04 	addi	r2,r2,15740
   200d0:	d8800215 	stw	r2,8(sp)
   200d4:	00800044 	movi	r2,1
   200d8:	d8800315 	stw	r2,12(sp)
   200dc:	00800084 	movi	r2,2
   200e0:	dc400015 	stw	r17,0(sp)
   200e4:	d8c00615 	stw	r3,24(sp)
   200e8:	dec00415 	stw	sp,16(sp)
   200ec:	d8800515 	stw	r2,20(sp)
   200f0:	80000226 	beq	r16,zero,200fc <_puts_r+0x5c>
   200f4:	80800e17 	ldw	r2,56(r16)
   200f8:	10001426 	beq	r2,zero,2014c <_puts_r+0xac>
   200fc:	81400217 	ldw	r5,8(r16)
   20100:	2880030b 	ldhu	r2,12(r5)
   20104:	10c8000c 	andi	r3,r2,8192
   20108:	1800061e 	bne	r3,zero,20124 <_puts_r+0x84>
   2010c:	29001917 	ldw	r4,100(r5)
   20110:	00f7ffc4 	movi	r3,-8193
   20114:	10880014 	ori	r2,r2,8192
   20118:	20c6703a 	and	r3,r4,r3
   2011c:	2880030d 	sth	r2,12(r5)
   20120:	28c01915 	stw	r3,100(r5)
   20124:	d9800404 	addi	r6,sp,16
   20128:	8009883a 	mov	r4,r16
   2012c:	00205ac0 	call	205ac <__sfvwrite_r>
   20130:	1000091e 	bne	r2,zero,20158 <_puts_r+0xb8>
   20134:	00800284 	movi	r2,10
   20138:	dfc00917 	ldw	ra,36(sp)
   2013c:	dc400817 	ldw	r17,32(sp)
   20140:	dc000717 	ldw	r16,28(sp)
   20144:	dec00a04 	addi	sp,sp,40
   20148:	f800283a 	ret
   2014c:	8009883a 	mov	r4,r16
   20150:	002055c0 	call	2055c <__sinit>
   20154:	003fe906 	br	200fc <__alt_data_end+0xfffe00fc>
   20158:	00bfffc4 	movi	r2,-1
   2015c:	003ff606 	br	20138 <__alt_data_end+0xfffe0138>

00020160 <puts>:
   20160:	008000b4 	movhi	r2,2
   20164:	1091da04 	addi	r2,r2,18280
   20168:	200b883a 	mov	r5,r4
   2016c:	11000017 	ldw	r4,0(r2)
   20170:	00200a01 	jmpi	200a0 <_puts_r>

00020174 <strlen>:
   20174:	208000cc 	andi	r2,r4,3
   20178:	10002026 	beq	r2,zero,201fc <strlen+0x88>
   2017c:	20800007 	ldb	r2,0(r4)
   20180:	10002026 	beq	r2,zero,20204 <strlen+0x90>
   20184:	2005883a 	mov	r2,r4
   20188:	00000206 	br	20194 <strlen+0x20>
   2018c:	10c00007 	ldb	r3,0(r2)
   20190:	18001826 	beq	r3,zero,201f4 <strlen+0x80>
   20194:	10800044 	addi	r2,r2,1
   20198:	10c000cc 	andi	r3,r2,3
   2019c:	183ffb1e 	bne	r3,zero,2018c <__alt_data_end+0xfffe018c>
   201a0:	10c00017 	ldw	r3,0(r2)
   201a4:	01ffbff4 	movhi	r7,65279
   201a8:	39ffbfc4 	addi	r7,r7,-257
   201ac:	00ca303a 	nor	r5,zero,r3
   201b0:	01a02074 	movhi	r6,32897
   201b4:	19c7883a 	add	r3,r3,r7
   201b8:	31a02004 	addi	r6,r6,-32640
   201bc:	1946703a 	and	r3,r3,r5
   201c0:	1986703a 	and	r3,r3,r6
   201c4:	1800091e 	bne	r3,zero,201ec <strlen+0x78>
   201c8:	10800104 	addi	r2,r2,4
   201cc:	10c00017 	ldw	r3,0(r2)
   201d0:	19cb883a 	add	r5,r3,r7
   201d4:	00c6303a 	nor	r3,zero,r3
   201d8:	28c6703a 	and	r3,r5,r3
   201dc:	1986703a 	and	r3,r3,r6
   201e0:	183ff926 	beq	r3,zero,201c8 <__alt_data_end+0xfffe01c8>
   201e4:	00000106 	br	201ec <strlen+0x78>
   201e8:	10800044 	addi	r2,r2,1
   201ec:	10c00007 	ldb	r3,0(r2)
   201f0:	183ffd1e 	bne	r3,zero,201e8 <__alt_data_end+0xfffe01e8>
   201f4:	1105c83a 	sub	r2,r2,r4
   201f8:	f800283a 	ret
   201fc:	2005883a 	mov	r2,r4
   20200:	003fe706 	br	201a0 <__alt_data_end+0xfffe01a0>
   20204:	0005883a 	mov	r2,zero
   20208:	f800283a 	ret

0002020c <__fp_unlock>:
   2020c:	0005883a 	mov	r2,zero
   20210:	f800283a 	ret

00020214 <_cleanup_r>:
   20214:	014000b4 	movhi	r5,2
   20218:	29486a04 	addi	r5,r5,8616
   2021c:	0020b2c1 	jmpi	20b2c <_fwalk_reent>

00020220 <__sinit.part.1>:
   20220:	defff704 	addi	sp,sp,-36
   20224:	00c000b4 	movhi	r3,2
   20228:	dfc00815 	stw	ra,32(sp)
   2022c:	ddc00715 	stw	r23,28(sp)
   20230:	dd800615 	stw	r22,24(sp)
   20234:	dd400515 	stw	r21,20(sp)
   20238:	dd000415 	stw	r20,16(sp)
   2023c:	dcc00315 	stw	r19,12(sp)
   20240:	dc800215 	stw	r18,8(sp)
   20244:	dc400115 	stw	r17,4(sp)
   20248:	dc000015 	stw	r16,0(sp)
   2024c:	18c08504 	addi	r3,r3,532
   20250:	24000117 	ldw	r16,4(r4)
   20254:	20c00f15 	stw	r3,60(r4)
   20258:	2080bb04 	addi	r2,r4,748
   2025c:	00c000c4 	movi	r3,3
   20260:	20c0b915 	stw	r3,740(r4)
   20264:	2080ba15 	stw	r2,744(r4)
   20268:	2000b815 	stw	zero,736(r4)
   2026c:	05c00204 	movi	r23,8
   20270:	00800104 	movi	r2,4
   20274:	2025883a 	mov	r18,r4
   20278:	b80d883a 	mov	r6,r23
   2027c:	81001704 	addi	r4,r16,92
   20280:	000b883a 	mov	r5,zero
   20284:	80000015 	stw	zero,0(r16)
   20288:	80000115 	stw	zero,4(r16)
   2028c:	80000215 	stw	zero,8(r16)
   20290:	8080030d 	sth	r2,12(r16)
   20294:	80001915 	stw	zero,100(r16)
   20298:	8000038d 	sth	zero,14(r16)
   2029c:	80000415 	stw	zero,16(r16)
   202a0:	80000515 	stw	zero,20(r16)
   202a4:	80000615 	stw	zero,24(r16)
   202a8:	00217840 	call	21784 <memset>
   202ac:	058000b4 	movhi	r22,2
   202b0:	94400217 	ldw	r17,8(r18)
   202b4:	054000b4 	movhi	r21,2
   202b8:	050000b4 	movhi	r20,2
   202bc:	04c000b4 	movhi	r19,2
   202c0:	b5879904 	addi	r22,r22,7780
   202c4:	ad47b004 	addi	r21,r21,7872
   202c8:	a507cf04 	addi	r20,r20,7996
   202cc:	9cc7e604 	addi	r19,r19,8088
   202d0:	85800815 	stw	r22,32(r16)
   202d4:	85400915 	stw	r21,36(r16)
   202d8:	85000a15 	stw	r20,40(r16)
   202dc:	84c00b15 	stw	r19,44(r16)
   202e0:	84000715 	stw	r16,28(r16)
   202e4:	00800284 	movi	r2,10
   202e8:	8880030d 	sth	r2,12(r17)
   202ec:	00800044 	movi	r2,1
   202f0:	b80d883a 	mov	r6,r23
   202f4:	89001704 	addi	r4,r17,92
   202f8:	000b883a 	mov	r5,zero
   202fc:	88000015 	stw	zero,0(r17)
   20300:	88000115 	stw	zero,4(r17)
   20304:	88000215 	stw	zero,8(r17)
   20308:	88001915 	stw	zero,100(r17)
   2030c:	8880038d 	sth	r2,14(r17)
   20310:	88000415 	stw	zero,16(r17)
   20314:	88000515 	stw	zero,20(r17)
   20318:	88000615 	stw	zero,24(r17)
   2031c:	00217840 	call	21784 <memset>
   20320:	94000317 	ldw	r16,12(r18)
   20324:	00800484 	movi	r2,18
   20328:	8c400715 	stw	r17,28(r17)
   2032c:	8d800815 	stw	r22,32(r17)
   20330:	8d400915 	stw	r21,36(r17)
   20334:	8d000a15 	stw	r20,40(r17)
   20338:	8cc00b15 	stw	r19,44(r17)
   2033c:	8080030d 	sth	r2,12(r16)
   20340:	00800084 	movi	r2,2
   20344:	80000015 	stw	zero,0(r16)
   20348:	80000115 	stw	zero,4(r16)
   2034c:	80000215 	stw	zero,8(r16)
   20350:	80001915 	stw	zero,100(r16)
   20354:	8080038d 	sth	r2,14(r16)
   20358:	80000415 	stw	zero,16(r16)
   2035c:	80000515 	stw	zero,20(r16)
   20360:	80000615 	stw	zero,24(r16)
   20364:	b80d883a 	mov	r6,r23
   20368:	000b883a 	mov	r5,zero
   2036c:	81001704 	addi	r4,r16,92
   20370:	00217840 	call	21784 <memset>
   20374:	00800044 	movi	r2,1
   20378:	84000715 	stw	r16,28(r16)
   2037c:	85800815 	stw	r22,32(r16)
   20380:	85400915 	stw	r21,36(r16)
   20384:	85000a15 	stw	r20,40(r16)
   20388:	84c00b15 	stw	r19,44(r16)
   2038c:	90800e15 	stw	r2,56(r18)
   20390:	dfc00817 	ldw	ra,32(sp)
   20394:	ddc00717 	ldw	r23,28(sp)
   20398:	dd800617 	ldw	r22,24(sp)
   2039c:	dd400517 	ldw	r21,20(sp)
   203a0:	dd000417 	ldw	r20,16(sp)
   203a4:	dcc00317 	ldw	r19,12(sp)
   203a8:	dc800217 	ldw	r18,8(sp)
   203ac:	dc400117 	ldw	r17,4(sp)
   203b0:	dc000017 	ldw	r16,0(sp)
   203b4:	dec00904 	addi	sp,sp,36
   203b8:	f800283a 	ret

000203bc <__fp_lock>:
   203bc:	0005883a 	mov	r2,zero
   203c0:	f800283a 	ret

000203c4 <__sfmoreglue>:
   203c4:	defffc04 	addi	sp,sp,-16
   203c8:	dc400115 	stw	r17,4(sp)
   203cc:	2c7fffc4 	addi	r17,r5,-1
   203d0:	8c401a24 	muli	r17,r17,104
   203d4:	dc800215 	stw	r18,8(sp)
   203d8:	2825883a 	mov	r18,r5
   203dc:	89401d04 	addi	r5,r17,116
   203e0:	dc000015 	stw	r16,0(sp)
   203e4:	dfc00315 	stw	ra,12(sp)
   203e8:	0020bf00 	call	20bf0 <_malloc_r>
   203ec:	1021883a 	mov	r16,r2
   203f0:	10000726 	beq	r2,zero,20410 <__sfmoreglue+0x4c>
   203f4:	11000304 	addi	r4,r2,12
   203f8:	10000015 	stw	zero,0(r2)
   203fc:	14800115 	stw	r18,4(r2)
   20400:	11000215 	stw	r4,8(r2)
   20404:	89801a04 	addi	r6,r17,104
   20408:	000b883a 	mov	r5,zero
   2040c:	00217840 	call	21784 <memset>
   20410:	8005883a 	mov	r2,r16
   20414:	dfc00317 	ldw	ra,12(sp)
   20418:	dc800217 	ldw	r18,8(sp)
   2041c:	dc400117 	ldw	r17,4(sp)
   20420:	dc000017 	ldw	r16,0(sp)
   20424:	dec00404 	addi	sp,sp,16
   20428:	f800283a 	ret

0002042c <__sfp>:
   2042c:	defffb04 	addi	sp,sp,-20
   20430:	dc000015 	stw	r16,0(sp)
   20434:	040000b4 	movhi	r16,2
   20438:	8411d904 	addi	r16,r16,18276
   2043c:	dcc00315 	stw	r19,12(sp)
   20440:	2027883a 	mov	r19,r4
   20444:	81000017 	ldw	r4,0(r16)
   20448:	dfc00415 	stw	ra,16(sp)
   2044c:	dc800215 	stw	r18,8(sp)
   20450:	20800e17 	ldw	r2,56(r4)
   20454:	dc400115 	stw	r17,4(sp)
   20458:	1000021e 	bne	r2,zero,20464 <__sfp+0x38>
   2045c:	00202200 	call	20220 <__sinit.part.1>
   20460:	81000017 	ldw	r4,0(r16)
   20464:	2480b804 	addi	r18,r4,736
   20468:	047fffc4 	movi	r17,-1
   2046c:	91000117 	ldw	r4,4(r18)
   20470:	94000217 	ldw	r16,8(r18)
   20474:	213fffc4 	addi	r4,r4,-1
   20478:	20000a16 	blt	r4,zero,204a4 <__sfp+0x78>
   2047c:	8080030f 	ldh	r2,12(r16)
   20480:	10000c26 	beq	r2,zero,204b4 <__sfp+0x88>
   20484:	80c01d04 	addi	r3,r16,116
   20488:	00000206 	br	20494 <__sfp+0x68>
   2048c:	18bfe60f 	ldh	r2,-104(r3)
   20490:	10000826 	beq	r2,zero,204b4 <__sfp+0x88>
   20494:	213fffc4 	addi	r4,r4,-1
   20498:	1c3ffd04 	addi	r16,r3,-12
   2049c:	18c01a04 	addi	r3,r3,104
   204a0:	247ffa1e 	bne	r4,r17,2048c <__alt_data_end+0xfffe048c>
   204a4:	90800017 	ldw	r2,0(r18)
   204a8:	10001d26 	beq	r2,zero,20520 <__sfp+0xf4>
   204ac:	1025883a 	mov	r18,r2
   204b0:	003fee06 	br	2046c <__alt_data_end+0xfffe046c>
   204b4:	00bfffc4 	movi	r2,-1
   204b8:	8080038d 	sth	r2,14(r16)
   204bc:	00800044 	movi	r2,1
   204c0:	8080030d 	sth	r2,12(r16)
   204c4:	80001915 	stw	zero,100(r16)
   204c8:	80000015 	stw	zero,0(r16)
   204cc:	80000215 	stw	zero,8(r16)
   204d0:	80000115 	stw	zero,4(r16)
   204d4:	80000415 	stw	zero,16(r16)
   204d8:	80000515 	stw	zero,20(r16)
   204dc:	80000615 	stw	zero,24(r16)
   204e0:	01800204 	movi	r6,8
   204e4:	000b883a 	mov	r5,zero
   204e8:	81001704 	addi	r4,r16,92
   204ec:	00217840 	call	21784 <memset>
   204f0:	8005883a 	mov	r2,r16
   204f4:	80000c15 	stw	zero,48(r16)
   204f8:	80000d15 	stw	zero,52(r16)
   204fc:	80001115 	stw	zero,68(r16)
   20500:	80001215 	stw	zero,72(r16)
   20504:	dfc00417 	ldw	ra,16(sp)
   20508:	dcc00317 	ldw	r19,12(sp)
   2050c:	dc800217 	ldw	r18,8(sp)
   20510:	dc400117 	ldw	r17,4(sp)
   20514:	dc000017 	ldw	r16,0(sp)
   20518:	dec00504 	addi	sp,sp,20
   2051c:	f800283a 	ret
   20520:	01400104 	movi	r5,4
   20524:	9809883a 	mov	r4,r19
   20528:	00203c40 	call	203c4 <__sfmoreglue>
   2052c:	90800015 	stw	r2,0(r18)
   20530:	103fde1e 	bne	r2,zero,204ac <__alt_data_end+0xfffe04ac>
   20534:	00800304 	movi	r2,12
   20538:	98800015 	stw	r2,0(r19)
   2053c:	0005883a 	mov	r2,zero
   20540:	003ff006 	br	20504 <__alt_data_end+0xfffe0504>

00020544 <_cleanup>:
   20544:	008000b4 	movhi	r2,2
   20548:	1091d904 	addi	r2,r2,18276
   2054c:	11000017 	ldw	r4,0(r2)
   20550:	014000b4 	movhi	r5,2
   20554:	29486a04 	addi	r5,r5,8616
   20558:	0020b2c1 	jmpi	20b2c <_fwalk_reent>

0002055c <__sinit>:
   2055c:	20800e17 	ldw	r2,56(r4)
   20560:	10000126 	beq	r2,zero,20568 <__sinit+0xc>
   20564:	f800283a 	ret
   20568:	00202201 	jmpi	20220 <__sinit.part.1>

0002056c <__sfp_lock_acquire>:
   2056c:	f800283a 	ret

00020570 <__sfp_lock_release>:
   20570:	f800283a 	ret

00020574 <__sinit_lock_acquire>:
   20574:	f800283a 	ret

00020578 <__sinit_lock_release>:
   20578:	f800283a 	ret

0002057c <__fp_lock_all>:
   2057c:	008000b4 	movhi	r2,2
   20580:	1091da04 	addi	r2,r2,18280
   20584:	11000017 	ldw	r4,0(r2)
   20588:	014000b4 	movhi	r5,2
   2058c:	2940ef04 	addi	r5,r5,956
   20590:	0020a681 	jmpi	20a68 <_fwalk>

00020594 <__fp_unlock_all>:
   20594:	008000b4 	movhi	r2,2
   20598:	1091da04 	addi	r2,r2,18280
   2059c:	11000017 	ldw	r4,0(r2)
   205a0:	014000b4 	movhi	r5,2
   205a4:	29408304 	addi	r5,r5,524
   205a8:	0020a681 	jmpi	20a68 <_fwalk>

000205ac <__sfvwrite_r>:
   205ac:	30800217 	ldw	r2,8(r6)
   205b0:	10006726 	beq	r2,zero,20750 <__sfvwrite_r+0x1a4>
   205b4:	28c0030b 	ldhu	r3,12(r5)
   205b8:	defff404 	addi	sp,sp,-48
   205bc:	dd400715 	stw	r21,28(sp)
   205c0:	dd000615 	stw	r20,24(sp)
   205c4:	dc000215 	stw	r16,8(sp)
   205c8:	dfc00b15 	stw	ra,44(sp)
   205cc:	df000a15 	stw	fp,40(sp)
   205d0:	ddc00915 	stw	r23,36(sp)
   205d4:	dd800815 	stw	r22,32(sp)
   205d8:	dcc00515 	stw	r19,20(sp)
   205dc:	dc800415 	stw	r18,16(sp)
   205e0:	dc400315 	stw	r17,12(sp)
   205e4:	1880020c 	andi	r2,r3,8
   205e8:	2821883a 	mov	r16,r5
   205ec:	202b883a 	mov	r21,r4
   205f0:	3029883a 	mov	r20,r6
   205f4:	10002726 	beq	r2,zero,20694 <__sfvwrite_r+0xe8>
   205f8:	28800417 	ldw	r2,16(r5)
   205fc:	10002526 	beq	r2,zero,20694 <__sfvwrite_r+0xe8>
   20600:	1880008c 	andi	r2,r3,2
   20604:	a4400017 	ldw	r17,0(r20)
   20608:	10002a26 	beq	r2,zero,206b4 <__sfvwrite_r+0x108>
   2060c:	05a00034 	movhi	r22,32768
   20610:	0027883a 	mov	r19,zero
   20614:	0025883a 	mov	r18,zero
   20618:	b5bf0004 	addi	r22,r22,-1024
   2061c:	980d883a 	mov	r6,r19
   20620:	a809883a 	mov	r4,r21
   20624:	90004626 	beq	r18,zero,20740 <__sfvwrite_r+0x194>
   20628:	900f883a 	mov	r7,r18
   2062c:	b480022e 	bgeu	r22,r18,20638 <__sfvwrite_r+0x8c>
   20630:	01e00034 	movhi	r7,32768
   20634:	39ff0004 	addi	r7,r7,-1024
   20638:	80800917 	ldw	r2,36(r16)
   2063c:	81400717 	ldw	r5,28(r16)
   20640:	103ee83a 	callr	r2
   20644:	0080570e 	bge	zero,r2,207a4 <__sfvwrite_r+0x1f8>
   20648:	a0c00217 	ldw	r3,8(r20)
   2064c:	98a7883a 	add	r19,r19,r2
   20650:	90a5c83a 	sub	r18,r18,r2
   20654:	1885c83a 	sub	r2,r3,r2
   20658:	a0800215 	stw	r2,8(r20)
   2065c:	103fef1e 	bne	r2,zero,2061c <__alt_data_end+0xfffe061c>
   20660:	0005883a 	mov	r2,zero
   20664:	dfc00b17 	ldw	ra,44(sp)
   20668:	df000a17 	ldw	fp,40(sp)
   2066c:	ddc00917 	ldw	r23,36(sp)
   20670:	dd800817 	ldw	r22,32(sp)
   20674:	dd400717 	ldw	r21,28(sp)
   20678:	dd000617 	ldw	r20,24(sp)
   2067c:	dcc00517 	ldw	r19,20(sp)
   20680:	dc800417 	ldw	r18,16(sp)
   20684:	dc400317 	ldw	r17,12(sp)
   20688:	dc000217 	ldw	r16,8(sp)
   2068c:	dec00c04 	addi	sp,sp,48
   20690:	f800283a 	ret
   20694:	800b883a 	mov	r5,r16
   20698:	a809883a 	mov	r4,r21
   2069c:	00220000 	call	22000 <__swsetup_r>
   206a0:	1000eb1e 	bne	r2,zero,20a50 <__sfvwrite_r+0x4a4>
   206a4:	80c0030b 	ldhu	r3,12(r16)
   206a8:	a4400017 	ldw	r17,0(r20)
   206ac:	1880008c 	andi	r2,r3,2
   206b0:	103fd61e 	bne	r2,zero,2060c <__alt_data_end+0xfffe060c>
   206b4:	1880004c 	andi	r2,r3,1
   206b8:	10003f1e 	bne	r2,zero,207b8 <__sfvwrite_r+0x20c>
   206bc:	0039883a 	mov	fp,zero
   206c0:	0025883a 	mov	r18,zero
   206c4:	90001a26 	beq	r18,zero,20730 <__sfvwrite_r+0x184>
   206c8:	1880800c 	andi	r2,r3,512
   206cc:	84c00217 	ldw	r19,8(r16)
   206d0:	10002126 	beq	r2,zero,20758 <__sfvwrite_r+0x1ac>
   206d4:	982f883a 	mov	r23,r19
   206d8:	94c09336 	bltu	r18,r19,20928 <__sfvwrite_r+0x37c>
   206dc:	1881200c 	andi	r2,r3,1152
   206e0:	10009e1e 	bne	r2,zero,2095c <__sfvwrite_r+0x3b0>
   206e4:	81000017 	ldw	r4,0(r16)
   206e8:	b80d883a 	mov	r6,r23
   206ec:	e00b883a 	mov	r5,fp
   206f0:	00216280 	call	21628 <memmove>
   206f4:	80c00217 	ldw	r3,8(r16)
   206f8:	81000017 	ldw	r4,0(r16)
   206fc:	9005883a 	mov	r2,r18
   20700:	1ce7c83a 	sub	r19,r3,r19
   20704:	25cf883a 	add	r7,r4,r23
   20708:	84c00215 	stw	r19,8(r16)
   2070c:	81c00015 	stw	r7,0(r16)
   20710:	a0c00217 	ldw	r3,8(r20)
   20714:	e0b9883a 	add	fp,fp,r2
   20718:	90a5c83a 	sub	r18,r18,r2
   2071c:	18a7c83a 	sub	r19,r3,r2
   20720:	a4c00215 	stw	r19,8(r20)
   20724:	983fce26 	beq	r19,zero,20660 <__alt_data_end+0xfffe0660>
   20728:	80c0030b 	ldhu	r3,12(r16)
   2072c:	903fe61e 	bne	r18,zero,206c8 <__alt_data_end+0xfffe06c8>
   20730:	8f000017 	ldw	fp,0(r17)
   20734:	8c800117 	ldw	r18,4(r17)
   20738:	8c400204 	addi	r17,r17,8
   2073c:	003fe106 	br	206c4 <__alt_data_end+0xfffe06c4>
   20740:	8cc00017 	ldw	r19,0(r17)
   20744:	8c800117 	ldw	r18,4(r17)
   20748:	8c400204 	addi	r17,r17,8
   2074c:	003fb306 	br	2061c <__alt_data_end+0xfffe061c>
   20750:	0005883a 	mov	r2,zero
   20754:	f800283a 	ret
   20758:	81000017 	ldw	r4,0(r16)
   2075c:	80800417 	ldw	r2,16(r16)
   20760:	11005736 	bltu	r2,r4,208c0 <__sfvwrite_r+0x314>
   20764:	85c00517 	ldw	r23,20(r16)
   20768:	95c05536 	bltu	r18,r23,208c0 <__sfvwrite_r+0x314>
   2076c:	00a00034 	movhi	r2,32768
   20770:	10bfffc4 	addi	r2,r2,-1
   20774:	9009883a 	mov	r4,r18
   20778:	1480012e 	bgeu	r2,r18,20780 <__sfvwrite_r+0x1d4>
   2077c:	1009883a 	mov	r4,r2
   20780:	b80b883a 	mov	r5,r23
   20784:	0022cb40 	call	22cb4 <__divsi3>
   20788:	15cf383a 	mul	r7,r2,r23
   2078c:	81400717 	ldw	r5,28(r16)
   20790:	80800917 	ldw	r2,36(r16)
   20794:	e00d883a 	mov	r6,fp
   20798:	a809883a 	mov	r4,r21
   2079c:	103ee83a 	callr	r2
   207a0:	00bfdb16 	blt	zero,r2,20710 <__alt_data_end+0xfffe0710>
   207a4:	8080030b 	ldhu	r2,12(r16)
   207a8:	10801014 	ori	r2,r2,64
   207ac:	8080030d 	sth	r2,12(r16)
   207b0:	00bfffc4 	movi	r2,-1
   207b4:	003fab06 	br	20664 <__alt_data_end+0xfffe0664>
   207b8:	0027883a 	mov	r19,zero
   207bc:	0011883a 	mov	r8,zero
   207c0:	0039883a 	mov	fp,zero
   207c4:	0025883a 	mov	r18,zero
   207c8:	90001f26 	beq	r18,zero,20848 <__sfvwrite_r+0x29c>
   207cc:	40005a26 	beq	r8,zero,20938 <__sfvwrite_r+0x38c>
   207d0:	982d883a 	mov	r22,r19
   207d4:	94c0012e 	bgeu	r18,r19,207dc <__sfvwrite_r+0x230>
   207d8:	902d883a 	mov	r22,r18
   207dc:	81000017 	ldw	r4,0(r16)
   207e0:	80800417 	ldw	r2,16(r16)
   207e4:	b02f883a 	mov	r23,r22
   207e8:	81c00517 	ldw	r7,20(r16)
   207ec:	1100032e 	bgeu	r2,r4,207fc <__sfvwrite_r+0x250>
   207f0:	80c00217 	ldw	r3,8(r16)
   207f4:	38c7883a 	add	r3,r7,r3
   207f8:	1d801816 	blt	r3,r22,2085c <__sfvwrite_r+0x2b0>
   207fc:	b1c03e16 	blt	r22,r7,208f8 <__sfvwrite_r+0x34c>
   20800:	80800917 	ldw	r2,36(r16)
   20804:	81400717 	ldw	r5,28(r16)
   20808:	e00d883a 	mov	r6,fp
   2080c:	da000115 	stw	r8,4(sp)
   20810:	a809883a 	mov	r4,r21
   20814:	103ee83a 	callr	r2
   20818:	102f883a 	mov	r23,r2
   2081c:	da000117 	ldw	r8,4(sp)
   20820:	00bfe00e 	bge	zero,r2,207a4 <__alt_data_end+0xfffe07a4>
   20824:	9de7c83a 	sub	r19,r19,r23
   20828:	98001f26 	beq	r19,zero,208a8 <__sfvwrite_r+0x2fc>
   2082c:	a0800217 	ldw	r2,8(r20)
   20830:	e5f9883a 	add	fp,fp,r23
   20834:	95e5c83a 	sub	r18,r18,r23
   20838:	15efc83a 	sub	r23,r2,r23
   2083c:	a5c00215 	stw	r23,8(r20)
   20840:	b83f8726 	beq	r23,zero,20660 <__alt_data_end+0xfffe0660>
   20844:	903fe11e 	bne	r18,zero,207cc <__alt_data_end+0xfffe07cc>
   20848:	8f000017 	ldw	fp,0(r17)
   2084c:	8c800117 	ldw	r18,4(r17)
   20850:	0011883a 	mov	r8,zero
   20854:	8c400204 	addi	r17,r17,8
   20858:	003fdb06 	br	207c8 <__alt_data_end+0xfffe07c8>
   2085c:	180d883a 	mov	r6,r3
   20860:	e00b883a 	mov	r5,fp
   20864:	da000115 	stw	r8,4(sp)
   20868:	d8c00015 	stw	r3,0(sp)
   2086c:	00216280 	call	21628 <memmove>
   20870:	d8c00017 	ldw	r3,0(sp)
   20874:	80800017 	ldw	r2,0(r16)
   20878:	800b883a 	mov	r5,r16
   2087c:	a809883a 	mov	r4,r21
   20880:	10c5883a 	add	r2,r2,r3
   20884:	80800015 	stw	r2,0(r16)
   20888:	d8c00015 	stw	r3,0(sp)
   2088c:	00224c80 	call	224c8 <_fflush_r>
   20890:	d8c00017 	ldw	r3,0(sp)
   20894:	da000117 	ldw	r8,4(sp)
   20898:	103fc21e 	bne	r2,zero,207a4 <__alt_data_end+0xfffe07a4>
   2089c:	182f883a 	mov	r23,r3
   208a0:	9de7c83a 	sub	r19,r19,r23
   208a4:	983fe11e 	bne	r19,zero,2082c <__alt_data_end+0xfffe082c>
   208a8:	800b883a 	mov	r5,r16
   208ac:	a809883a 	mov	r4,r21
   208b0:	00224c80 	call	224c8 <_fflush_r>
   208b4:	103fbb1e 	bne	r2,zero,207a4 <__alt_data_end+0xfffe07a4>
   208b8:	0011883a 	mov	r8,zero
   208bc:	003fdb06 	br	2082c <__alt_data_end+0xfffe082c>
   208c0:	94c0012e 	bgeu	r18,r19,208c8 <__sfvwrite_r+0x31c>
   208c4:	9027883a 	mov	r19,r18
   208c8:	980d883a 	mov	r6,r19
   208cc:	e00b883a 	mov	r5,fp
   208d0:	00216280 	call	21628 <memmove>
   208d4:	80800217 	ldw	r2,8(r16)
   208d8:	80c00017 	ldw	r3,0(r16)
   208dc:	14c5c83a 	sub	r2,r2,r19
   208e0:	1cc7883a 	add	r3,r3,r19
   208e4:	80800215 	stw	r2,8(r16)
   208e8:	80c00015 	stw	r3,0(r16)
   208ec:	10004326 	beq	r2,zero,209fc <__sfvwrite_r+0x450>
   208f0:	9805883a 	mov	r2,r19
   208f4:	003f8606 	br	20710 <__alt_data_end+0xfffe0710>
   208f8:	b00d883a 	mov	r6,r22
   208fc:	e00b883a 	mov	r5,fp
   20900:	da000115 	stw	r8,4(sp)
   20904:	00216280 	call	21628 <memmove>
   20908:	80800217 	ldw	r2,8(r16)
   2090c:	80c00017 	ldw	r3,0(r16)
   20910:	da000117 	ldw	r8,4(sp)
   20914:	1585c83a 	sub	r2,r2,r22
   20918:	1dad883a 	add	r22,r3,r22
   2091c:	80800215 	stw	r2,8(r16)
   20920:	85800015 	stw	r22,0(r16)
   20924:	003fbf06 	br	20824 <__alt_data_end+0xfffe0824>
   20928:	81000017 	ldw	r4,0(r16)
   2092c:	9027883a 	mov	r19,r18
   20930:	902f883a 	mov	r23,r18
   20934:	003f6c06 	br	206e8 <__alt_data_end+0xfffe06e8>
   20938:	900d883a 	mov	r6,r18
   2093c:	01400284 	movi	r5,10
   20940:	e009883a 	mov	r4,fp
   20944:	00213fc0 	call	213fc <memchr>
   20948:	10003e26 	beq	r2,zero,20a44 <__sfvwrite_r+0x498>
   2094c:	10800044 	addi	r2,r2,1
   20950:	1727c83a 	sub	r19,r2,fp
   20954:	02000044 	movi	r8,1
   20958:	003f9d06 	br	207d0 <__alt_data_end+0xfffe07d0>
   2095c:	80800517 	ldw	r2,20(r16)
   20960:	81400417 	ldw	r5,16(r16)
   20964:	81c00017 	ldw	r7,0(r16)
   20968:	10a7883a 	add	r19,r2,r2
   2096c:	9885883a 	add	r2,r19,r2
   20970:	1026d7fa 	srli	r19,r2,31
   20974:	396dc83a 	sub	r22,r7,r5
   20978:	b1000044 	addi	r4,r22,1
   2097c:	9885883a 	add	r2,r19,r2
   20980:	1027d07a 	srai	r19,r2,1
   20984:	2485883a 	add	r2,r4,r18
   20988:	980d883a 	mov	r6,r19
   2098c:	9880022e 	bgeu	r19,r2,20998 <__sfvwrite_r+0x3ec>
   20990:	1027883a 	mov	r19,r2
   20994:	100d883a 	mov	r6,r2
   20998:	18c1000c 	andi	r3,r3,1024
   2099c:	18001c26 	beq	r3,zero,20a10 <__sfvwrite_r+0x464>
   209a0:	300b883a 	mov	r5,r6
   209a4:	a809883a 	mov	r4,r21
   209a8:	0020bf00 	call	20bf0 <_malloc_r>
   209ac:	102f883a 	mov	r23,r2
   209b0:	10002926 	beq	r2,zero,20a58 <__sfvwrite_r+0x4ac>
   209b4:	81400417 	ldw	r5,16(r16)
   209b8:	b00d883a 	mov	r6,r22
   209bc:	1009883a 	mov	r4,r2
   209c0:	00214e00 	call	214e0 <memcpy>
   209c4:	8080030b 	ldhu	r2,12(r16)
   209c8:	00fedfc4 	movi	r3,-1153
   209cc:	10c4703a 	and	r2,r2,r3
   209d0:	10802014 	ori	r2,r2,128
   209d4:	8080030d 	sth	r2,12(r16)
   209d8:	bd89883a 	add	r4,r23,r22
   209dc:	9d8fc83a 	sub	r7,r19,r22
   209e0:	85c00415 	stw	r23,16(r16)
   209e4:	84c00515 	stw	r19,20(r16)
   209e8:	81000015 	stw	r4,0(r16)
   209ec:	9027883a 	mov	r19,r18
   209f0:	81c00215 	stw	r7,8(r16)
   209f4:	902f883a 	mov	r23,r18
   209f8:	003f3b06 	br	206e8 <__alt_data_end+0xfffe06e8>
   209fc:	800b883a 	mov	r5,r16
   20a00:	a809883a 	mov	r4,r21
   20a04:	00224c80 	call	224c8 <_fflush_r>
   20a08:	103fb926 	beq	r2,zero,208f0 <__alt_data_end+0xfffe08f0>
   20a0c:	003f6506 	br	207a4 <__alt_data_end+0xfffe07a4>
   20a10:	a809883a 	mov	r4,r21
   20a14:	00218ac0 	call	218ac <_realloc_r>
   20a18:	102f883a 	mov	r23,r2
   20a1c:	103fee1e 	bne	r2,zero,209d8 <__alt_data_end+0xfffe09d8>
   20a20:	81400417 	ldw	r5,16(r16)
   20a24:	a809883a 	mov	r4,r21
   20a28:	00226780 	call	22678 <_free_r>
   20a2c:	8080030b 	ldhu	r2,12(r16)
   20a30:	00ffdfc4 	movi	r3,-129
   20a34:	1884703a 	and	r2,r3,r2
   20a38:	00c00304 	movi	r3,12
   20a3c:	a8c00015 	stw	r3,0(r21)
   20a40:	003f5906 	br	207a8 <__alt_data_end+0xfffe07a8>
   20a44:	94c00044 	addi	r19,r18,1
   20a48:	02000044 	movi	r8,1
   20a4c:	003f6006 	br	207d0 <__alt_data_end+0xfffe07d0>
   20a50:	00bfffc4 	movi	r2,-1
   20a54:	003f0306 	br	20664 <__alt_data_end+0xfffe0664>
   20a58:	00800304 	movi	r2,12
   20a5c:	a8800015 	stw	r2,0(r21)
   20a60:	8080030b 	ldhu	r2,12(r16)
   20a64:	003f5006 	br	207a8 <__alt_data_end+0xfffe07a8>

00020a68 <_fwalk>:
   20a68:	defff704 	addi	sp,sp,-36
   20a6c:	dd000415 	stw	r20,16(sp)
   20a70:	dfc00815 	stw	ra,32(sp)
   20a74:	ddc00715 	stw	r23,28(sp)
   20a78:	dd800615 	stw	r22,24(sp)
   20a7c:	dd400515 	stw	r21,20(sp)
   20a80:	dcc00315 	stw	r19,12(sp)
   20a84:	dc800215 	stw	r18,8(sp)
   20a88:	dc400115 	stw	r17,4(sp)
   20a8c:	dc000015 	stw	r16,0(sp)
   20a90:	2500b804 	addi	r20,r4,736
   20a94:	a0002326 	beq	r20,zero,20b24 <_fwalk+0xbc>
   20a98:	282b883a 	mov	r21,r5
   20a9c:	002f883a 	mov	r23,zero
   20aa0:	05800044 	movi	r22,1
   20aa4:	04ffffc4 	movi	r19,-1
   20aa8:	a4400117 	ldw	r17,4(r20)
   20aac:	a4800217 	ldw	r18,8(r20)
   20ab0:	8c7fffc4 	addi	r17,r17,-1
   20ab4:	88000d16 	blt	r17,zero,20aec <_fwalk+0x84>
   20ab8:	94000304 	addi	r16,r18,12
   20abc:	94800384 	addi	r18,r18,14
   20ac0:	8080000b 	ldhu	r2,0(r16)
   20ac4:	8c7fffc4 	addi	r17,r17,-1
   20ac8:	813ffd04 	addi	r4,r16,-12
   20acc:	b080042e 	bgeu	r22,r2,20ae0 <_fwalk+0x78>
   20ad0:	9080000f 	ldh	r2,0(r18)
   20ad4:	14c00226 	beq	r2,r19,20ae0 <_fwalk+0x78>
   20ad8:	a83ee83a 	callr	r21
   20adc:	b8aeb03a 	or	r23,r23,r2
   20ae0:	84001a04 	addi	r16,r16,104
   20ae4:	94801a04 	addi	r18,r18,104
   20ae8:	8cfff51e 	bne	r17,r19,20ac0 <__alt_data_end+0xfffe0ac0>
   20aec:	a5000017 	ldw	r20,0(r20)
   20af0:	a03fed1e 	bne	r20,zero,20aa8 <__alt_data_end+0xfffe0aa8>
   20af4:	b805883a 	mov	r2,r23
   20af8:	dfc00817 	ldw	ra,32(sp)
   20afc:	ddc00717 	ldw	r23,28(sp)
   20b00:	dd800617 	ldw	r22,24(sp)
   20b04:	dd400517 	ldw	r21,20(sp)
   20b08:	dd000417 	ldw	r20,16(sp)
   20b0c:	dcc00317 	ldw	r19,12(sp)
   20b10:	dc800217 	ldw	r18,8(sp)
   20b14:	dc400117 	ldw	r17,4(sp)
   20b18:	dc000017 	ldw	r16,0(sp)
   20b1c:	dec00904 	addi	sp,sp,36
   20b20:	f800283a 	ret
   20b24:	002f883a 	mov	r23,zero
   20b28:	003ff206 	br	20af4 <__alt_data_end+0xfffe0af4>

00020b2c <_fwalk_reent>:
   20b2c:	defff704 	addi	sp,sp,-36
   20b30:	dd000415 	stw	r20,16(sp)
   20b34:	dfc00815 	stw	ra,32(sp)
   20b38:	ddc00715 	stw	r23,28(sp)
   20b3c:	dd800615 	stw	r22,24(sp)
   20b40:	dd400515 	stw	r21,20(sp)
   20b44:	dcc00315 	stw	r19,12(sp)
   20b48:	dc800215 	stw	r18,8(sp)
   20b4c:	dc400115 	stw	r17,4(sp)
   20b50:	dc000015 	stw	r16,0(sp)
   20b54:	2500b804 	addi	r20,r4,736
   20b58:	a0002326 	beq	r20,zero,20be8 <_fwalk_reent+0xbc>
   20b5c:	282b883a 	mov	r21,r5
   20b60:	2027883a 	mov	r19,r4
   20b64:	002f883a 	mov	r23,zero
   20b68:	05800044 	movi	r22,1
   20b6c:	04bfffc4 	movi	r18,-1
   20b70:	a4400117 	ldw	r17,4(r20)
   20b74:	a4000217 	ldw	r16,8(r20)
   20b78:	8c7fffc4 	addi	r17,r17,-1
   20b7c:	88000c16 	blt	r17,zero,20bb0 <_fwalk_reent+0x84>
   20b80:	84000304 	addi	r16,r16,12
   20b84:	8080000b 	ldhu	r2,0(r16)
   20b88:	8c7fffc4 	addi	r17,r17,-1
   20b8c:	817ffd04 	addi	r5,r16,-12
   20b90:	b080052e 	bgeu	r22,r2,20ba8 <_fwalk_reent+0x7c>
   20b94:	8080008f 	ldh	r2,2(r16)
   20b98:	9809883a 	mov	r4,r19
   20b9c:	14800226 	beq	r2,r18,20ba8 <_fwalk_reent+0x7c>
   20ba0:	a83ee83a 	callr	r21
   20ba4:	b8aeb03a 	or	r23,r23,r2
   20ba8:	84001a04 	addi	r16,r16,104
   20bac:	8cbff51e 	bne	r17,r18,20b84 <__alt_data_end+0xfffe0b84>
   20bb0:	a5000017 	ldw	r20,0(r20)
   20bb4:	a03fee1e 	bne	r20,zero,20b70 <__alt_data_end+0xfffe0b70>
   20bb8:	b805883a 	mov	r2,r23
   20bbc:	dfc00817 	ldw	ra,32(sp)
   20bc0:	ddc00717 	ldw	r23,28(sp)
   20bc4:	dd800617 	ldw	r22,24(sp)
   20bc8:	dd400517 	ldw	r21,20(sp)
   20bcc:	dd000417 	ldw	r20,16(sp)
   20bd0:	dcc00317 	ldw	r19,12(sp)
   20bd4:	dc800217 	ldw	r18,8(sp)
   20bd8:	dc400117 	ldw	r17,4(sp)
   20bdc:	dc000017 	ldw	r16,0(sp)
   20be0:	dec00904 	addi	sp,sp,36
   20be4:	f800283a 	ret
   20be8:	002f883a 	mov	r23,zero
   20bec:	003ff206 	br	20bb8 <__alt_data_end+0xfffe0bb8>

00020bf0 <_malloc_r>:
   20bf0:	defff504 	addi	sp,sp,-44
   20bf4:	dc800315 	stw	r18,12(sp)
   20bf8:	dfc00a15 	stw	ra,40(sp)
   20bfc:	df000915 	stw	fp,36(sp)
   20c00:	ddc00815 	stw	r23,32(sp)
   20c04:	dd800715 	stw	r22,28(sp)
   20c08:	dd400615 	stw	r21,24(sp)
   20c0c:	dd000515 	stw	r20,20(sp)
   20c10:	dcc00415 	stw	r19,16(sp)
   20c14:	dc400215 	stw	r17,8(sp)
   20c18:	dc000115 	stw	r16,4(sp)
   20c1c:	288002c4 	addi	r2,r5,11
   20c20:	00c00584 	movi	r3,22
   20c24:	2025883a 	mov	r18,r4
   20c28:	18807f2e 	bgeu	r3,r2,20e28 <_malloc_r+0x238>
   20c2c:	047ffe04 	movi	r17,-8
   20c30:	1462703a 	and	r17,r2,r17
   20c34:	8800a316 	blt	r17,zero,20ec4 <_malloc_r+0x2d4>
   20c38:	8940a236 	bltu	r17,r5,20ec4 <_malloc_r+0x2d4>
   20c3c:	00234180 	call	23418 <__malloc_lock>
   20c40:	00807dc4 	movi	r2,503
   20c44:	1441e92e 	bgeu	r2,r17,213ec <_malloc_r+0x7fc>
   20c48:	8804d27a 	srli	r2,r17,9
   20c4c:	1000a126 	beq	r2,zero,20ed4 <_malloc_r+0x2e4>
   20c50:	00c00104 	movi	r3,4
   20c54:	18811e36 	bltu	r3,r2,210d0 <_malloc_r+0x4e0>
   20c58:	8804d1ba 	srli	r2,r17,6
   20c5c:	12000e44 	addi	r8,r2,57
   20c60:	11c00e04 	addi	r7,r2,56
   20c64:	4209883a 	add	r4,r8,r8
   20c68:	04c000b4 	movhi	r19,2
   20c6c:	2109883a 	add	r4,r4,r4
   20c70:	9cd06d04 	addi	r19,r19,16820
   20c74:	2109883a 	add	r4,r4,r4
   20c78:	9909883a 	add	r4,r19,r4
   20c7c:	24000117 	ldw	r16,4(r4)
   20c80:	213ffe04 	addi	r4,r4,-8
   20c84:	24009726 	beq	r4,r16,20ee4 <_malloc_r+0x2f4>
   20c88:	80800117 	ldw	r2,4(r16)
   20c8c:	01bfff04 	movi	r6,-4
   20c90:	014003c4 	movi	r5,15
   20c94:	1184703a 	and	r2,r2,r6
   20c98:	1447c83a 	sub	r3,r2,r17
   20c9c:	28c00716 	blt	r5,r3,20cbc <_malloc_r+0xcc>
   20ca0:	1800920e 	bge	r3,zero,20eec <_malloc_r+0x2fc>
   20ca4:	84000317 	ldw	r16,12(r16)
   20ca8:	24008e26 	beq	r4,r16,20ee4 <_malloc_r+0x2f4>
   20cac:	80800117 	ldw	r2,4(r16)
   20cb0:	1184703a 	and	r2,r2,r6
   20cb4:	1447c83a 	sub	r3,r2,r17
   20cb8:	28fff90e 	bge	r5,r3,20ca0 <__alt_data_end+0xfffe0ca0>
   20cbc:	3809883a 	mov	r4,r7
   20cc0:	018000b4 	movhi	r6,2
   20cc4:	9c000417 	ldw	r16,16(r19)
   20cc8:	31906d04 	addi	r6,r6,16820
   20ccc:	32000204 	addi	r8,r6,8
   20cd0:	82013426 	beq	r16,r8,211a4 <_malloc_r+0x5b4>
   20cd4:	80c00117 	ldw	r3,4(r16)
   20cd8:	00bfff04 	movi	r2,-4
   20cdc:	188e703a 	and	r7,r3,r2
   20ce0:	3c45c83a 	sub	r2,r7,r17
   20ce4:	00c003c4 	movi	r3,15
   20ce8:	18811f16 	blt	r3,r2,21168 <_malloc_r+0x578>
   20cec:	32000515 	stw	r8,20(r6)
   20cf0:	32000415 	stw	r8,16(r6)
   20cf4:	10007f0e 	bge	r2,zero,20ef4 <_malloc_r+0x304>
   20cf8:	00807fc4 	movi	r2,511
   20cfc:	11c0fd36 	bltu	r2,r7,210f4 <_malloc_r+0x504>
   20d00:	3806d0fa 	srli	r3,r7,3
   20d04:	01c00044 	movi	r7,1
   20d08:	30800117 	ldw	r2,4(r6)
   20d0c:	19400044 	addi	r5,r3,1
   20d10:	294b883a 	add	r5,r5,r5
   20d14:	1807d0ba 	srai	r3,r3,2
   20d18:	294b883a 	add	r5,r5,r5
   20d1c:	294b883a 	add	r5,r5,r5
   20d20:	298b883a 	add	r5,r5,r6
   20d24:	38c6983a 	sll	r3,r7,r3
   20d28:	29c00017 	ldw	r7,0(r5)
   20d2c:	2a7ffe04 	addi	r9,r5,-8
   20d30:	1886b03a 	or	r3,r3,r2
   20d34:	82400315 	stw	r9,12(r16)
   20d38:	81c00215 	stw	r7,8(r16)
   20d3c:	30c00115 	stw	r3,4(r6)
   20d40:	2c000015 	stw	r16,0(r5)
   20d44:	3c000315 	stw	r16,12(r7)
   20d48:	2005d0ba 	srai	r2,r4,2
   20d4c:	01400044 	movi	r5,1
   20d50:	288a983a 	sll	r5,r5,r2
   20d54:	19406f36 	bltu	r3,r5,20f14 <_malloc_r+0x324>
   20d58:	28c4703a 	and	r2,r5,r3
   20d5c:	10000a1e 	bne	r2,zero,20d88 <_malloc_r+0x198>
   20d60:	00bfff04 	movi	r2,-4
   20d64:	294b883a 	add	r5,r5,r5
   20d68:	2088703a 	and	r4,r4,r2
   20d6c:	28c4703a 	and	r2,r5,r3
   20d70:	21000104 	addi	r4,r4,4
   20d74:	1000041e 	bne	r2,zero,20d88 <_malloc_r+0x198>
   20d78:	294b883a 	add	r5,r5,r5
   20d7c:	28c4703a 	and	r2,r5,r3
   20d80:	21000104 	addi	r4,r4,4
   20d84:	103ffc26 	beq	r2,zero,20d78 <__alt_data_end+0xfffe0d78>
   20d88:	02bfff04 	movi	r10,-4
   20d8c:	024003c4 	movi	r9,15
   20d90:	21800044 	addi	r6,r4,1
   20d94:	318d883a 	add	r6,r6,r6
   20d98:	318d883a 	add	r6,r6,r6
   20d9c:	318d883a 	add	r6,r6,r6
   20da0:	998d883a 	add	r6,r19,r6
   20da4:	333ffe04 	addi	r12,r6,-8
   20da8:	2017883a 	mov	r11,r4
   20dac:	31800104 	addi	r6,r6,4
   20db0:	34000017 	ldw	r16,0(r6)
   20db4:	31fffd04 	addi	r7,r6,-12
   20db8:	81c0041e 	bne	r16,r7,20dcc <_malloc_r+0x1dc>
   20dbc:	0000fb06 	br	211ac <_malloc_r+0x5bc>
   20dc0:	1801030e 	bge	r3,zero,211d0 <_malloc_r+0x5e0>
   20dc4:	84000317 	ldw	r16,12(r16)
   20dc8:	81c0f826 	beq	r16,r7,211ac <_malloc_r+0x5bc>
   20dcc:	80800117 	ldw	r2,4(r16)
   20dd0:	1284703a 	and	r2,r2,r10
   20dd4:	1447c83a 	sub	r3,r2,r17
   20dd8:	48fff90e 	bge	r9,r3,20dc0 <__alt_data_end+0xfffe0dc0>
   20ddc:	80800317 	ldw	r2,12(r16)
   20de0:	81000217 	ldw	r4,8(r16)
   20de4:	89400054 	ori	r5,r17,1
   20de8:	81400115 	stw	r5,4(r16)
   20dec:	20800315 	stw	r2,12(r4)
   20df0:	11000215 	stw	r4,8(r2)
   20df4:	8463883a 	add	r17,r16,r17
   20df8:	9c400515 	stw	r17,20(r19)
   20dfc:	9c400415 	stw	r17,16(r19)
   20e00:	18800054 	ori	r2,r3,1
   20e04:	88800115 	stw	r2,4(r17)
   20e08:	8a000315 	stw	r8,12(r17)
   20e0c:	8a000215 	stw	r8,8(r17)
   20e10:	88e3883a 	add	r17,r17,r3
   20e14:	88c00015 	stw	r3,0(r17)
   20e18:	9009883a 	mov	r4,r18
   20e1c:	002343c0 	call	2343c <__malloc_unlock>
   20e20:	80800204 	addi	r2,r16,8
   20e24:	00001b06 	br	20e94 <_malloc_r+0x2a4>
   20e28:	04400404 	movi	r17,16
   20e2c:	89402536 	bltu	r17,r5,20ec4 <_malloc_r+0x2d4>
   20e30:	00234180 	call	23418 <__malloc_lock>
   20e34:	00800184 	movi	r2,6
   20e38:	01000084 	movi	r4,2
   20e3c:	04c000b4 	movhi	r19,2
   20e40:	1085883a 	add	r2,r2,r2
   20e44:	9cd06d04 	addi	r19,r19,16820
   20e48:	1085883a 	add	r2,r2,r2
   20e4c:	9885883a 	add	r2,r19,r2
   20e50:	14000117 	ldw	r16,4(r2)
   20e54:	10fffe04 	addi	r3,r2,-8
   20e58:	80c0d926 	beq	r16,r3,211c0 <_malloc_r+0x5d0>
   20e5c:	80c00117 	ldw	r3,4(r16)
   20e60:	81000317 	ldw	r4,12(r16)
   20e64:	00bfff04 	movi	r2,-4
   20e68:	1884703a 	and	r2,r3,r2
   20e6c:	81400217 	ldw	r5,8(r16)
   20e70:	8085883a 	add	r2,r16,r2
   20e74:	10c00117 	ldw	r3,4(r2)
   20e78:	29000315 	stw	r4,12(r5)
   20e7c:	21400215 	stw	r5,8(r4)
   20e80:	18c00054 	ori	r3,r3,1
   20e84:	10c00115 	stw	r3,4(r2)
   20e88:	9009883a 	mov	r4,r18
   20e8c:	002343c0 	call	2343c <__malloc_unlock>
   20e90:	80800204 	addi	r2,r16,8
   20e94:	dfc00a17 	ldw	ra,40(sp)
   20e98:	df000917 	ldw	fp,36(sp)
   20e9c:	ddc00817 	ldw	r23,32(sp)
   20ea0:	dd800717 	ldw	r22,28(sp)
   20ea4:	dd400617 	ldw	r21,24(sp)
   20ea8:	dd000517 	ldw	r20,20(sp)
   20eac:	dcc00417 	ldw	r19,16(sp)
   20eb0:	dc800317 	ldw	r18,12(sp)
   20eb4:	dc400217 	ldw	r17,8(sp)
   20eb8:	dc000117 	ldw	r16,4(sp)
   20ebc:	dec00b04 	addi	sp,sp,44
   20ec0:	f800283a 	ret
   20ec4:	00800304 	movi	r2,12
   20ec8:	90800015 	stw	r2,0(r18)
   20ecc:	0005883a 	mov	r2,zero
   20ed0:	003ff006 	br	20e94 <__alt_data_end+0xfffe0e94>
   20ed4:	01002004 	movi	r4,128
   20ed8:	02001004 	movi	r8,64
   20edc:	01c00fc4 	movi	r7,63
   20ee0:	003f6106 	br	20c68 <__alt_data_end+0xfffe0c68>
   20ee4:	4009883a 	mov	r4,r8
   20ee8:	003f7506 	br	20cc0 <__alt_data_end+0xfffe0cc0>
   20eec:	81000317 	ldw	r4,12(r16)
   20ef0:	003fde06 	br	20e6c <__alt_data_end+0xfffe0e6c>
   20ef4:	81c5883a 	add	r2,r16,r7
   20ef8:	11400117 	ldw	r5,4(r2)
   20efc:	9009883a 	mov	r4,r18
   20f00:	29400054 	ori	r5,r5,1
   20f04:	11400115 	stw	r5,4(r2)
   20f08:	002343c0 	call	2343c <__malloc_unlock>
   20f0c:	80800204 	addi	r2,r16,8
   20f10:	003fe006 	br	20e94 <__alt_data_end+0xfffe0e94>
   20f14:	9c000217 	ldw	r16,8(r19)
   20f18:	00bfff04 	movi	r2,-4
   20f1c:	85800117 	ldw	r22,4(r16)
   20f20:	b0ac703a 	and	r22,r22,r2
   20f24:	b4400336 	bltu	r22,r17,20f34 <_malloc_r+0x344>
   20f28:	b445c83a 	sub	r2,r22,r17
   20f2c:	00c003c4 	movi	r3,15
   20f30:	18805d16 	blt	r3,r2,210a8 <_malloc_r+0x4b8>
   20f34:	05c000b4 	movhi	r23,2
   20f38:	008000b4 	movhi	r2,2
   20f3c:	10946604 	addi	r2,r2,20888
   20f40:	bdd1db04 	addi	r23,r23,18284
   20f44:	15400017 	ldw	r21,0(r2)
   20f48:	b8c00017 	ldw	r3,0(r23)
   20f4c:	00bfffc4 	movi	r2,-1
   20f50:	858d883a 	add	r6,r16,r22
   20f54:	8d6b883a 	add	r21,r17,r21
   20f58:	1880ea26 	beq	r3,r2,21304 <_malloc_r+0x714>
   20f5c:	ad4403c4 	addi	r21,r21,4111
   20f60:	00bc0004 	movi	r2,-4096
   20f64:	a8aa703a 	and	r21,r21,r2
   20f68:	a80b883a 	mov	r5,r21
   20f6c:	9009883a 	mov	r4,r18
   20f70:	d9800015 	stw	r6,0(sp)
   20f74:	0021e100 	call	21e10 <_sbrk_r>
   20f78:	1029883a 	mov	r20,r2
   20f7c:	00bfffc4 	movi	r2,-1
   20f80:	d9800017 	ldw	r6,0(sp)
   20f84:	a080e826 	beq	r20,r2,21328 <_malloc_r+0x738>
   20f88:	a180a636 	bltu	r20,r6,21224 <_malloc_r+0x634>
   20f8c:	070000b4 	movhi	fp,2
   20f90:	e7146b04 	addi	fp,fp,20908
   20f94:	e0800017 	ldw	r2,0(fp)
   20f98:	a887883a 	add	r3,r21,r2
   20f9c:	e0c00015 	stw	r3,0(fp)
   20fa0:	3500e626 	beq	r6,r20,2133c <_malloc_r+0x74c>
   20fa4:	b9000017 	ldw	r4,0(r23)
   20fa8:	00bfffc4 	movi	r2,-1
   20fac:	2080ee26 	beq	r4,r2,21368 <_malloc_r+0x778>
   20fb0:	a185c83a 	sub	r2,r20,r6
   20fb4:	10c5883a 	add	r2,r2,r3
   20fb8:	e0800015 	stw	r2,0(fp)
   20fbc:	a0c001cc 	andi	r3,r20,7
   20fc0:	1800bc26 	beq	r3,zero,212b4 <_malloc_r+0x6c4>
   20fc4:	a0e9c83a 	sub	r20,r20,r3
   20fc8:	00840204 	movi	r2,4104
   20fcc:	a5000204 	addi	r20,r20,8
   20fd0:	10c7c83a 	sub	r3,r2,r3
   20fd4:	a545883a 	add	r2,r20,r21
   20fd8:	1083ffcc 	andi	r2,r2,4095
   20fdc:	18abc83a 	sub	r21,r3,r2
   20fe0:	a80b883a 	mov	r5,r21
   20fe4:	9009883a 	mov	r4,r18
   20fe8:	0021e100 	call	21e10 <_sbrk_r>
   20fec:	00ffffc4 	movi	r3,-1
   20ff0:	10c0e126 	beq	r2,r3,21378 <_malloc_r+0x788>
   20ff4:	1505c83a 	sub	r2,r2,r20
   20ff8:	1545883a 	add	r2,r2,r21
   20ffc:	10800054 	ori	r2,r2,1
   21000:	e0c00017 	ldw	r3,0(fp)
   21004:	9d000215 	stw	r20,8(r19)
   21008:	a0800115 	stw	r2,4(r20)
   2100c:	a8c7883a 	add	r3,r21,r3
   21010:	e0c00015 	stw	r3,0(fp)
   21014:	84c00e26 	beq	r16,r19,21050 <_malloc_r+0x460>
   21018:	018003c4 	movi	r6,15
   2101c:	3580a72e 	bgeu	r6,r22,212bc <_malloc_r+0x6cc>
   21020:	81400117 	ldw	r5,4(r16)
   21024:	013ffe04 	movi	r4,-8
   21028:	b0bffd04 	addi	r2,r22,-12
   2102c:	1104703a 	and	r2,r2,r4
   21030:	2900004c 	andi	r4,r5,1
   21034:	2088b03a 	or	r4,r4,r2
   21038:	81000115 	stw	r4,4(r16)
   2103c:	01400144 	movi	r5,5
   21040:	8089883a 	add	r4,r16,r2
   21044:	21400115 	stw	r5,4(r4)
   21048:	21400215 	stw	r5,8(r4)
   2104c:	3080cd36 	bltu	r6,r2,21384 <_malloc_r+0x794>
   21050:	008000b4 	movhi	r2,2
   21054:	10946504 	addi	r2,r2,20884
   21058:	11000017 	ldw	r4,0(r2)
   2105c:	20c0012e 	bgeu	r4,r3,21064 <_malloc_r+0x474>
   21060:	10c00015 	stw	r3,0(r2)
   21064:	008000b4 	movhi	r2,2
   21068:	10946404 	addi	r2,r2,20880
   2106c:	11000017 	ldw	r4,0(r2)
   21070:	9c000217 	ldw	r16,8(r19)
   21074:	20c0012e 	bgeu	r4,r3,2107c <_malloc_r+0x48c>
   21078:	10c00015 	stw	r3,0(r2)
   2107c:	80c00117 	ldw	r3,4(r16)
   21080:	00bfff04 	movi	r2,-4
   21084:	1886703a 	and	r3,r3,r2
   21088:	1c45c83a 	sub	r2,r3,r17
   2108c:	1c400236 	bltu	r3,r17,21098 <_malloc_r+0x4a8>
   21090:	00c003c4 	movi	r3,15
   21094:	18800416 	blt	r3,r2,210a8 <_malloc_r+0x4b8>
   21098:	9009883a 	mov	r4,r18
   2109c:	002343c0 	call	2343c <__malloc_unlock>
   210a0:	0005883a 	mov	r2,zero
   210a4:	003f7b06 	br	20e94 <__alt_data_end+0xfffe0e94>
   210a8:	88c00054 	ori	r3,r17,1
   210ac:	80c00115 	stw	r3,4(r16)
   210b0:	8463883a 	add	r17,r16,r17
   210b4:	10800054 	ori	r2,r2,1
   210b8:	9c400215 	stw	r17,8(r19)
   210bc:	88800115 	stw	r2,4(r17)
   210c0:	9009883a 	mov	r4,r18
   210c4:	002343c0 	call	2343c <__malloc_unlock>
   210c8:	80800204 	addi	r2,r16,8
   210cc:	003f7106 	br	20e94 <__alt_data_end+0xfffe0e94>
   210d0:	00c00504 	movi	r3,20
   210d4:	18804a2e 	bgeu	r3,r2,21200 <_malloc_r+0x610>
   210d8:	00c01504 	movi	r3,84
   210dc:	18806e36 	bltu	r3,r2,21298 <_malloc_r+0x6a8>
   210e0:	8804d33a 	srli	r2,r17,12
   210e4:	12001bc4 	addi	r8,r2,111
   210e8:	11c01b84 	addi	r7,r2,110
   210ec:	4209883a 	add	r4,r8,r8
   210f0:	003edd06 	br	20c68 <__alt_data_end+0xfffe0c68>
   210f4:	3804d27a 	srli	r2,r7,9
   210f8:	00c00104 	movi	r3,4
   210fc:	1880442e 	bgeu	r3,r2,21210 <_malloc_r+0x620>
   21100:	00c00504 	movi	r3,20
   21104:	18808136 	bltu	r3,r2,2130c <_malloc_r+0x71c>
   21108:	11401704 	addi	r5,r2,92
   2110c:	10c016c4 	addi	r3,r2,91
   21110:	294b883a 	add	r5,r5,r5
   21114:	294b883a 	add	r5,r5,r5
   21118:	294b883a 	add	r5,r5,r5
   2111c:	994b883a 	add	r5,r19,r5
   21120:	28800017 	ldw	r2,0(r5)
   21124:	018000b4 	movhi	r6,2
   21128:	297ffe04 	addi	r5,r5,-8
   2112c:	31906d04 	addi	r6,r6,16820
   21130:	28806526 	beq	r5,r2,212c8 <_malloc_r+0x6d8>
   21134:	01bfff04 	movi	r6,-4
   21138:	10c00117 	ldw	r3,4(r2)
   2113c:	1986703a 	and	r3,r3,r6
   21140:	38c0022e 	bgeu	r7,r3,2114c <_malloc_r+0x55c>
   21144:	10800217 	ldw	r2,8(r2)
   21148:	28bffb1e 	bne	r5,r2,21138 <__alt_data_end+0xfffe1138>
   2114c:	11400317 	ldw	r5,12(r2)
   21150:	98c00117 	ldw	r3,4(r19)
   21154:	81400315 	stw	r5,12(r16)
   21158:	80800215 	stw	r2,8(r16)
   2115c:	2c000215 	stw	r16,8(r5)
   21160:	14000315 	stw	r16,12(r2)
   21164:	003ef806 	br	20d48 <__alt_data_end+0xfffe0d48>
   21168:	88c00054 	ori	r3,r17,1
   2116c:	80c00115 	stw	r3,4(r16)
   21170:	8463883a 	add	r17,r16,r17
   21174:	34400515 	stw	r17,20(r6)
   21178:	34400415 	stw	r17,16(r6)
   2117c:	10c00054 	ori	r3,r2,1
   21180:	8a000315 	stw	r8,12(r17)
   21184:	8a000215 	stw	r8,8(r17)
   21188:	88c00115 	stw	r3,4(r17)
   2118c:	88a3883a 	add	r17,r17,r2
   21190:	88800015 	stw	r2,0(r17)
   21194:	9009883a 	mov	r4,r18
   21198:	002343c0 	call	2343c <__malloc_unlock>
   2119c:	80800204 	addi	r2,r16,8
   211a0:	003f3c06 	br	20e94 <__alt_data_end+0xfffe0e94>
   211a4:	30c00117 	ldw	r3,4(r6)
   211a8:	003ee706 	br	20d48 <__alt_data_end+0xfffe0d48>
   211ac:	5ac00044 	addi	r11,r11,1
   211b0:	588000cc 	andi	r2,r11,3
   211b4:	31800204 	addi	r6,r6,8
   211b8:	103efd1e 	bne	r2,zero,20db0 <__alt_data_end+0xfffe0db0>
   211bc:	00002406 	br	21250 <_malloc_r+0x660>
   211c0:	14000317 	ldw	r16,12(r2)
   211c4:	143f251e 	bne	r2,r16,20e5c <__alt_data_end+0xfffe0e5c>
   211c8:	21000084 	addi	r4,r4,2
   211cc:	003ebc06 	br	20cc0 <__alt_data_end+0xfffe0cc0>
   211d0:	8085883a 	add	r2,r16,r2
   211d4:	10c00117 	ldw	r3,4(r2)
   211d8:	81000317 	ldw	r4,12(r16)
   211dc:	81400217 	ldw	r5,8(r16)
   211e0:	18c00054 	ori	r3,r3,1
   211e4:	10c00115 	stw	r3,4(r2)
   211e8:	29000315 	stw	r4,12(r5)
   211ec:	21400215 	stw	r5,8(r4)
   211f0:	9009883a 	mov	r4,r18
   211f4:	002343c0 	call	2343c <__malloc_unlock>
   211f8:	80800204 	addi	r2,r16,8
   211fc:	003f2506 	br	20e94 <__alt_data_end+0xfffe0e94>
   21200:	12001704 	addi	r8,r2,92
   21204:	11c016c4 	addi	r7,r2,91
   21208:	4209883a 	add	r4,r8,r8
   2120c:	003e9606 	br	20c68 <__alt_data_end+0xfffe0c68>
   21210:	3804d1ba 	srli	r2,r7,6
   21214:	11400e44 	addi	r5,r2,57
   21218:	10c00e04 	addi	r3,r2,56
   2121c:	294b883a 	add	r5,r5,r5
   21220:	003fbc06 	br	21114 <__alt_data_end+0xfffe1114>
   21224:	84ff5926 	beq	r16,r19,20f8c <__alt_data_end+0xfffe0f8c>
   21228:	008000b4 	movhi	r2,2
   2122c:	10906d04 	addi	r2,r2,16820
   21230:	14000217 	ldw	r16,8(r2)
   21234:	00bfff04 	movi	r2,-4
   21238:	80c00117 	ldw	r3,4(r16)
   2123c:	1886703a 	and	r3,r3,r2
   21240:	003f9106 	br	21088 <__alt_data_end+0xfffe1088>
   21244:	60800217 	ldw	r2,8(r12)
   21248:	213fffc4 	addi	r4,r4,-1
   2124c:	1300651e 	bne	r2,r12,213e4 <_malloc_r+0x7f4>
   21250:	208000cc 	andi	r2,r4,3
   21254:	633ffe04 	addi	r12,r12,-8
   21258:	103ffa1e 	bne	r2,zero,21244 <__alt_data_end+0xfffe1244>
   2125c:	98800117 	ldw	r2,4(r19)
   21260:	0146303a 	nor	r3,zero,r5
   21264:	1884703a 	and	r2,r3,r2
   21268:	98800115 	stw	r2,4(r19)
   2126c:	294b883a 	add	r5,r5,r5
   21270:	117f2836 	bltu	r2,r5,20f14 <__alt_data_end+0xfffe0f14>
   21274:	283f2726 	beq	r5,zero,20f14 <__alt_data_end+0xfffe0f14>
   21278:	2886703a 	and	r3,r5,r2
   2127c:	5809883a 	mov	r4,r11
   21280:	183ec31e 	bne	r3,zero,20d90 <__alt_data_end+0xfffe0d90>
   21284:	294b883a 	add	r5,r5,r5
   21288:	2886703a 	and	r3,r5,r2
   2128c:	21000104 	addi	r4,r4,4
   21290:	183ffc26 	beq	r3,zero,21284 <__alt_data_end+0xfffe1284>
   21294:	003ebe06 	br	20d90 <__alt_data_end+0xfffe0d90>
   21298:	00c05504 	movi	r3,340
   2129c:	18801236 	bltu	r3,r2,212e8 <_malloc_r+0x6f8>
   212a0:	8804d3fa 	srli	r2,r17,15
   212a4:	12001e04 	addi	r8,r2,120
   212a8:	11c01dc4 	addi	r7,r2,119
   212ac:	4209883a 	add	r4,r8,r8
   212b0:	003e6d06 	br	20c68 <__alt_data_end+0xfffe0c68>
   212b4:	00c40004 	movi	r3,4096
   212b8:	003f4606 	br	20fd4 <__alt_data_end+0xfffe0fd4>
   212bc:	00800044 	movi	r2,1
   212c0:	a0800115 	stw	r2,4(r20)
   212c4:	003f7406 	br	21098 <__alt_data_end+0xfffe1098>
   212c8:	1805d0ba 	srai	r2,r3,2
   212cc:	01c00044 	movi	r7,1
   212d0:	30c00117 	ldw	r3,4(r6)
   212d4:	388e983a 	sll	r7,r7,r2
   212d8:	2805883a 	mov	r2,r5
   212dc:	38c6b03a 	or	r3,r7,r3
   212e0:	30c00115 	stw	r3,4(r6)
   212e4:	003f9b06 	br	21154 <__alt_data_end+0xfffe1154>
   212e8:	00c15504 	movi	r3,1364
   212ec:	18801a36 	bltu	r3,r2,21358 <_malloc_r+0x768>
   212f0:	8804d4ba 	srli	r2,r17,18
   212f4:	12001f44 	addi	r8,r2,125
   212f8:	11c01f04 	addi	r7,r2,124
   212fc:	4209883a 	add	r4,r8,r8
   21300:	003e5906 	br	20c68 <__alt_data_end+0xfffe0c68>
   21304:	ad400404 	addi	r21,r21,16
   21308:	003f1706 	br	20f68 <__alt_data_end+0xfffe0f68>
   2130c:	00c01504 	movi	r3,84
   21310:	18802336 	bltu	r3,r2,213a0 <_malloc_r+0x7b0>
   21314:	3804d33a 	srli	r2,r7,12
   21318:	11401bc4 	addi	r5,r2,111
   2131c:	10c01b84 	addi	r3,r2,110
   21320:	294b883a 	add	r5,r5,r5
   21324:	003f7b06 	br	21114 <__alt_data_end+0xfffe1114>
   21328:	9c000217 	ldw	r16,8(r19)
   2132c:	00bfff04 	movi	r2,-4
   21330:	80c00117 	ldw	r3,4(r16)
   21334:	1886703a 	and	r3,r3,r2
   21338:	003f5306 	br	21088 <__alt_data_end+0xfffe1088>
   2133c:	3083ffcc 	andi	r2,r6,4095
   21340:	103f181e 	bne	r2,zero,20fa4 <__alt_data_end+0xfffe0fa4>
   21344:	99000217 	ldw	r4,8(r19)
   21348:	b545883a 	add	r2,r22,r21
   2134c:	10800054 	ori	r2,r2,1
   21350:	20800115 	stw	r2,4(r4)
   21354:	003f3e06 	br	21050 <__alt_data_end+0xfffe1050>
   21358:	01003f84 	movi	r4,254
   2135c:	02001fc4 	movi	r8,127
   21360:	01c01f84 	movi	r7,126
   21364:	003e4006 	br	20c68 <__alt_data_end+0xfffe0c68>
   21368:	008000b4 	movhi	r2,2
   2136c:	1091db04 	addi	r2,r2,18284
   21370:	15000015 	stw	r20,0(r2)
   21374:	003f1106 	br	20fbc <__alt_data_end+0xfffe0fbc>
   21378:	00800044 	movi	r2,1
   2137c:	002b883a 	mov	r21,zero
   21380:	003f1f06 	br	21000 <__alt_data_end+0xfffe1000>
   21384:	81400204 	addi	r5,r16,8
   21388:	9009883a 	mov	r4,r18
   2138c:	00226780 	call	22678 <_free_r>
   21390:	008000b4 	movhi	r2,2
   21394:	10946b04 	addi	r2,r2,20908
   21398:	10c00017 	ldw	r3,0(r2)
   2139c:	003f2c06 	br	21050 <__alt_data_end+0xfffe1050>
   213a0:	00c05504 	movi	r3,340
   213a4:	18800536 	bltu	r3,r2,213bc <_malloc_r+0x7cc>
   213a8:	3804d3fa 	srli	r2,r7,15
   213ac:	11401e04 	addi	r5,r2,120
   213b0:	10c01dc4 	addi	r3,r2,119
   213b4:	294b883a 	add	r5,r5,r5
   213b8:	003f5606 	br	21114 <__alt_data_end+0xfffe1114>
   213bc:	00c15504 	movi	r3,1364
   213c0:	18800536 	bltu	r3,r2,213d8 <_malloc_r+0x7e8>
   213c4:	3804d4ba 	srli	r2,r7,18
   213c8:	11401f44 	addi	r5,r2,125
   213cc:	10c01f04 	addi	r3,r2,124
   213d0:	294b883a 	add	r5,r5,r5
   213d4:	003f4f06 	br	21114 <__alt_data_end+0xfffe1114>
   213d8:	01403f84 	movi	r5,254
   213dc:	00c01f84 	movi	r3,126
   213e0:	003f4c06 	br	21114 <__alt_data_end+0xfffe1114>
   213e4:	98800117 	ldw	r2,4(r19)
   213e8:	003fa006 	br	2126c <__alt_data_end+0xfffe126c>
   213ec:	8808d0fa 	srli	r4,r17,3
   213f0:	20800044 	addi	r2,r4,1
   213f4:	1085883a 	add	r2,r2,r2
   213f8:	003e9006 	br	20e3c <__alt_data_end+0xfffe0e3c>

000213fc <memchr>:
   213fc:	208000cc 	andi	r2,r4,3
   21400:	280f883a 	mov	r7,r5
   21404:	10003426 	beq	r2,zero,214d8 <memchr+0xdc>
   21408:	30bfffc4 	addi	r2,r6,-1
   2140c:	30001a26 	beq	r6,zero,21478 <memchr+0x7c>
   21410:	20c00003 	ldbu	r3,0(r4)
   21414:	29803fcc 	andi	r6,r5,255
   21418:	30c0051e 	bne	r6,r3,21430 <memchr+0x34>
   2141c:	00001806 	br	21480 <memchr+0x84>
   21420:	10001526 	beq	r2,zero,21478 <memchr+0x7c>
   21424:	20c00003 	ldbu	r3,0(r4)
   21428:	10bfffc4 	addi	r2,r2,-1
   2142c:	30c01426 	beq	r6,r3,21480 <memchr+0x84>
   21430:	21000044 	addi	r4,r4,1
   21434:	20c000cc 	andi	r3,r4,3
   21438:	183ff91e 	bne	r3,zero,21420 <__alt_data_end+0xfffe1420>
   2143c:	020000c4 	movi	r8,3
   21440:	40801136 	bltu	r8,r2,21488 <memchr+0x8c>
   21444:	10000c26 	beq	r2,zero,21478 <memchr+0x7c>
   21448:	20c00003 	ldbu	r3,0(r4)
   2144c:	29403fcc 	andi	r5,r5,255
   21450:	28c00b26 	beq	r5,r3,21480 <memchr+0x84>
   21454:	20c00044 	addi	r3,r4,1
   21458:	39803fcc 	andi	r6,r7,255
   2145c:	2089883a 	add	r4,r4,r2
   21460:	00000306 	br	21470 <memchr+0x74>
   21464:	18c00044 	addi	r3,r3,1
   21468:	197fffc3 	ldbu	r5,-1(r3)
   2146c:	31400526 	beq	r6,r5,21484 <memchr+0x88>
   21470:	1805883a 	mov	r2,r3
   21474:	20fffb1e 	bne	r4,r3,21464 <__alt_data_end+0xfffe1464>
   21478:	0005883a 	mov	r2,zero
   2147c:	f800283a 	ret
   21480:	2005883a 	mov	r2,r4
   21484:	f800283a 	ret
   21488:	28c03fcc 	andi	r3,r5,255
   2148c:	1812923a 	slli	r9,r3,8
   21490:	02ffbff4 	movhi	r11,65279
   21494:	02a02074 	movhi	r10,32897
   21498:	48d2b03a 	or	r9,r9,r3
   2149c:	4806943a 	slli	r3,r9,16
   214a0:	5affbfc4 	addi	r11,r11,-257
   214a4:	52a02004 	addi	r10,r10,-32640
   214a8:	48d2b03a 	or	r9,r9,r3
   214ac:	20c00017 	ldw	r3,0(r4)
   214b0:	48c6f03a 	xor	r3,r9,r3
   214b4:	1acd883a 	add	r6,r3,r11
   214b8:	00c6303a 	nor	r3,zero,r3
   214bc:	30c6703a 	and	r3,r6,r3
   214c0:	1a86703a 	and	r3,r3,r10
   214c4:	183fe01e 	bne	r3,zero,21448 <__alt_data_end+0xfffe1448>
   214c8:	10bfff04 	addi	r2,r2,-4
   214cc:	21000104 	addi	r4,r4,4
   214d0:	40bff636 	bltu	r8,r2,214ac <__alt_data_end+0xfffe14ac>
   214d4:	003fdb06 	br	21444 <__alt_data_end+0xfffe1444>
   214d8:	3005883a 	mov	r2,r6
   214dc:	003fd706 	br	2143c <__alt_data_end+0xfffe143c>

000214e0 <memcpy>:
   214e0:	defffd04 	addi	sp,sp,-12
   214e4:	dfc00215 	stw	ra,8(sp)
   214e8:	dc400115 	stw	r17,4(sp)
   214ec:	dc000015 	stw	r16,0(sp)
   214f0:	00c003c4 	movi	r3,15
   214f4:	2005883a 	mov	r2,r4
   214f8:	1980452e 	bgeu	r3,r6,21610 <memcpy+0x130>
   214fc:	2906b03a 	or	r3,r5,r4
   21500:	18c000cc 	andi	r3,r3,3
   21504:	1800441e 	bne	r3,zero,21618 <memcpy+0x138>
   21508:	347ffc04 	addi	r17,r6,-16
   2150c:	8822d13a 	srli	r17,r17,4
   21510:	28c00104 	addi	r3,r5,4
   21514:	23400104 	addi	r13,r4,4
   21518:	8820913a 	slli	r16,r17,4
   2151c:	2b000204 	addi	r12,r5,8
   21520:	22c00204 	addi	r11,r4,8
   21524:	84000504 	addi	r16,r16,20
   21528:	2a800304 	addi	r10,r5,12
   2152c:	22400304 	addi	r9,r4,12
   21530:	2c21883a 	add	r16,r5,r16
   21534:	2811883a 	mov	r8,r5
   21538:	200f883a 	mov	r7,r4
   2153c:	41000017 	ldw	r4,0(r8)
   21540:	1fc00017 	ldw	ra,0(r3)
   21544:	63c00017 	ldw	r15,0(r12)
   21548:	39000015 	stw	r4,0(r7)
   2154c:	53800017 	ldw	r14,0(r10)
   21550:	6fc00015 	stw	ra,0(r13)
   21554:	5bc00015 	stw	r15,0(r11)
   21558:	4b800015 	stw	r14,0(r9)
   2155c:	18c00404 	addi	r3,r3,16
   21560:	39c00404 	addi	r7,r7,16
   21564:	42000404 	addi	r8,r8,16
   21568:	6b400404 	addi	r13,r13,16
   2156c:	63000404 	addi	r12,r12,16
   21570:	5ac00404 	addi	r11,r11,16
   21574:	52800404 	addi	r10,r10,16
   21578:	4a400404 	addi	r9,r9,16
   2157c:	1c3fef1e 	bne	r3,r16,2153c <__alt_data_end+0xfffe153c>
   21580:	89c00044 	addi	r7,r17,1
   21584:	380e913a 	slli	r7,r7,4
   21588:	310003cc 	andi	r4,r6,15
   2158c:	02c000c4 	movi	r11,3
   21590:	11c7883a 	add	r3,r2,r7
   21594:	29cb883a 	add	r5,r5,r7
   21598:	5900212e 	bgeu	r11,r4,21620 <memcpy+0x140>
   2159c:	1813883a 	mov	r9,r3
   215a0:	2811883a 	mov	r8,r5
   215a4:	200f883a 	mov	r7,r4
   215a8:	42800017 	ldw	r10,0(r8)
   215ac:	4a400104 	addi	r9,r9,4
   215b0:	39ffff04 	addi	r7,r7,-4
   215b4:	4abfff15 	stw	r10,-4(r9)
   215b8:	42000104 	addi	r8,r8,4
   215bc:	59fffa36 	bltu	r11,r7,215a8 <__alt_data_end+0xfffe15a8>
   215c0:	213fff04 	addi	r4,r4,-4
   215c4:	2008d0ba 	srli	r4,r4,2
   215c8:	318000cc 	andi	r6,r6,3
   215cc:	21000044 	addi	r4,r4,1
   215d0:	2109883a 	add	r4,r4,r4
   215d4:	2109883a 	add	r4,r4,r4
   215d8:	1907883a 	add	r3,r3,r4
   215dc:	290b883a 	add	r5,r5,r4
   215e0:	30000626 	beq	r6,zero,215fc <memcpy+0x11c>
   215e4:	198d883a 	add	r6,r3,r6
   215e8:	29c00003 	ldbu	r7,0(r5)
   215ec:	18c00044 	addi	r3,r3,1
   215f0:	29400044 	addi	r5,r5,1
   215f4:	19ffffc5 	stb	r7,-1(r3)
   215f8:	19bffb1e 	bne	r3,r6,215e8 <__alt_data_end+0xfffe15e8>
   215fc:	dfc00217 	ldw	ra,8(sp)
   21600:	dc400117 	ldw	r17,4(sp)
   21604:	dc000017 	ldw	r16,0(sp)
   21608:	dec00304 	addi	sp,sp,12
   2160c:	f800283a 	ret
   21610:	2007883a 	mov	r3,r4
   21614:	003ff206 	br	215e0 <__alt_data_end+0xfffe15e0>
   21618:	2007883a 	mov	r3,r4
   2161c:	003ff106 	br	215e4 <__alt_data_end+0xfffe15e4>
   21620:	200d883a 	mov	r6,r4
   21624:	003fee06 	br	215e0 <__alt_data_end+0xfffe15e0>

00021628 <memmove>:
   21628:	2005883a 	mov	r2,r4
   2162c:	29000b2e 	bgeu	r5,r4,2165c <memmove+0x34>
   21630:	298f883a 	add	r7,r5,r6
   21634:	21c0092e 	bgeu	r4,r7,2165c <memmove+0x34>
   21638:	2187883a 	add	r3,r4,r6
   2163c:	198bc83a 	sub	r5,r3,r6
   21640:	30004826 	beq	r6,zero,21764 <memmove+0x13c>
   21644:	39ffffc4 	addi	r7,r7,-1
   21648:	39000003 	ldbu	r4,0(r7)
   2164c:	18ffffc4 	addi	r3,r3,-1
   21650:	19000005 	stb	r4,0(r3)
   21654:	28fffb1e 	bne	r5,r3,21644 <__alt_data_end+0xfffe1644>
   21658:	f800283a 	ret
   2165c:	00c003c4 	movi	r3,15
   21660:	1980412e 	bgeu	r3,r6,21768 <memmove+0x140>
   21664:	2886b03a 	or	r3,r5,r2
   21668:	18c000cc 	andi	r3,r3,3
   2166c:	1800401e 	bne	r3,zero,21770 <memmove+0x148>
   21670:	33fffc04 	addi	r15,r6,-16
   21674:	781ed13a 	srli	r15,r15,4
   21678:	28c00104 	addi	r3,r5,4
   2167c:	13400104 	addi	r13,r2,4
   21680:	781c913a 	slli	r14,r15,4
   21684:	2b000204 	addi	r12,r5,8
   21688:	12c00204 	addi	r11,r2,8
   2168c:	73800504 	addi	r14,r14,20
   21690:	2a800304 	addi	r10,r5,12
   21694:	12400304 	addi	r9,r2,12
   21698:	2b9d883a 	add	r14,r5,r14
   2169c:	2811883a 	mov	r8,r5
   216a0:	100f883a 	mov	r7,r2
   216a4:	41000017 	ldw	r4,0(r8)
   216a8:	39c00404 	addi	r7,r7,16
   216ac:	18c00404 	addi	r3,r3,16
   216b0:	393ffc15 	stw	r4,-16(r7)
   216b4:	193ffc17 	ldw	r4,-16(r3)
   216b8:	6b400404 	addi	r13,r13,16
   216bc:	5ac00404 	addi	r11,r11,16
   216c0:	693ffc15 	stw	r4,-16(r13)
   216c4:	61000017 	ldw	r4,0(r12)
   216c8:	4a400404 	addi	r9,r9,16
   216cc:	42000404 	addi	r8,r8,16
   216d0:	593ffc15 	stw	r4,-16(r11)
   216d4:	51000017 	ldw	r4,0(r10)
   216d8:	63000404 	addi	r12,r12,16
   216dc:	52800404 	addi	r10,r10,16
   216e0:	493ffc15 	stw	r4,-16(r9)
   216e4:	1bbfef1e 	bne	r3,r14,216a4 <__alt_data_end+0xfffe16a4>
   216e8:	79000044 	addi	r4,r15,1
   216ec:	2008913a 	slli	r4,r4,4
   216f0:	328003cc 	andi	r10,r6,15
   216f4:	02c000c4 	movi	r11,3
   216f8:	1107883a 	add	r3,r2,r4
   216fc:	290b883a 	add	r5,r5,r4
   21700:	5a801e2e 	bgeu	r11,r10,2177c <memmove+0x154>
   21704:	1813883a 	mov	r9,r3
   21708:	2811883a 	mov	r8,r5
   2170c:	500f883a 	mov	r7,r10
   21710:	41000017 	ldw	r4,0(r8)
   21714:	4a400104 	addi	r9,r9,4
   21718:	39ffff04 	addi	r7,r7,-4
   2171c:	493fff15 	stw	r4,-4(r9)
   21720:	42000104 	addi	r8,r8,4
   21724:	59fffa36 	bltu	r11,r7,21710 <__alt_data_end+0xfffe1710>
   21728:	513fff04 	addi	r4,r10,-4
   2172c:	2008d0ba 	srli	r4,r4,2
   21730:	318000cc 	andi	r6,r6,3
   21734:	21000044 	addi	r4,r4,1
   21738:	2109883a 	add	r4,r4,r4
   2173c:	2109883a 	add	r4,r4,r4
   21740:	1907883a 	add	r3,r3,r4
   21744:	290b883a 	add	r5,r5,r4
   21748:	30000b26 	beq	r6,zero,21778 <memmove+0x150>
   2174c:	198d883a 	add	r6,r3,r6
   21750:	29c00003 	ldbu	r7,0(r5)
   21754:	18c00044 	addi	r3,r3,1
   21758:	29400044 	addi	r5,r5,1
   2175c:	19ffffc5 	stb	r7,-1(r3)
   21760:	19bffb1e 	bne	r3,r6,21750 <__alt_data_end+0xfffe1750>
   21764:	f800283a 	ret
   21768:	1007883a 	mov	r3,r2
   2176c:	003ff606 	br	21748 <__alt_data_end+0xfffe1748>
   21770:	1007883a 	mov	r3,r2
   21774:	003ff506 	br	2174c <__alt_data_end+0xfffe174c>
   21778:	f800283a 	ret
   2177c:	500d883a 	mov	r6,r10
   21780:	003ff106 	br	21748 <__alt_data_end+0xfffe1748>

00021784 <memset>:
   21784:	20c000cc 	andi	r3,r4,3
   21788:	2005883a 	mov	r2,r4
   2178c:	18004426 	beq	r3,zero,218a0 <memset+0x11c>
   21790:	31ffffc4 	addi	r7,r6,-1
   21794:	30004026 	beq	r6,zero,21898 <memset+0x114>
   21798:	2813883a 	mov	r9,r5
   2179c:	200d883a 	mov	r6,r4
   217a0:	2007883a 	mov	r3,r4
   217a4:	00000406 	br	217b8 <memset+0x34>
   217a8:	3a3fffc4 	addi	r8,r7,-1
   217ac:	31800044 	addi	r6,r6,1
   217b0:	38003926 	beq	r7,zero,21898 <memset+0x114>
   217b4:	400f883a 	mov	r7,r8
   217b8:	18c00044 	addi	r3,r3,1
   217bc:	32400005 	stb	r9,0(r6)
   217c0:	1a0000cc 	andi	r8,r3,3
   217c4:	403ff81e 	bne	r8,zero,217a8 <__alt_data_end+0xfffe17a8>
   217c8:	010000c4 	movi	r4,3
   217cc:	21c02d2e 	bgeu	r4,r7,21884 <memset+0x100>
   217d0:	29003fcc 	andi	r4,r5,255
   217d4:	200c923a 	slli	r6,r4,8
   217d8:	3108b03a 	or	r4,r6,r4
   217dc:	200c943a 	slli	r6,r4,16
   217e0:	218cb03a 	or	r6,r4,r6
   217e4:	010003c4 	movi	r4,15
   217e8:	21c0182e 	bgeu	r4,r7,2184c <memset+0xc8>
   217ec:	3b3ffc04 	addi	r12,r7,-16
   217f0:	6018d13a 	srli	r12,r12,4
   217f4:	1a000104 	addi	r8,r3,4
   217f8:	1ac00204 	addi	r11,r3,8
   217fc:	6008913a 	slli	r4,r12,4
   21800:	1a800304 	addi	r10,r3,12
   21804:	1813883a 	mov	r9,r3
   21808:	21000504 	addi	r4,r4,20
   2180c:	1909883a 	add	r4,r3,r4
   21810:	49800015 	stw	r6,0(r9)
   21814:	41800015 	stw	r6,0(r8)
   21818:	59800015 	stw	r6,0(r11)
   2181c:	51800015 	stw	r6,0(r10)
   21820:	42000404 	addi	r8,r8,16
   21824:	4a400404 	addi	r9,r9,16
   21828:	5ac00404 	addi	r11,r11,16
   2182c:	52800404 	addi	r10,r10,16
   21830:	413ff71e 	bne	r8,r4,21810 <__alt_data_end+0xfffe1810>
   21834:	63000044 	addi	r12,r12,1
   21838:	6018913a 	slli	r12,r12,4
   2183c:	39c003cc 	andi	r7,r7,15
   21840:	010000c4 	movi	r4,3
   21844:	1b07883a 	add	r3,r3,r12
   21848:	21c00e2e 	bgeu	r4,r7,21884 <memset+0x100>
   2184c:	1813883a 	mov	r9,r3
   21850:	3811883a 	mov	r8,r7
   21854:	010000c4 	movi	r4,3
   21858:	49800015 	stw	r6,0(r9)
   2185c:	423fff04 	addi	r8,r8,-4
   21860:	4a400104 	addi	r9,r9,4
   21864:	223ffc36 	bltu	r4,r8,21858 <__alt_data_end+0xfffe1858>
   21868:	393fff04 	addi	r4,r7,-4
   2186c:	2008d0ba 	srli	r4,r4,2
   21870:	39c000cc 	andi	r7,r7,3
   21874:	21000044 	addi	r4,r4,1
   21878:	2109883a 	add	r4,r4,r4
   2187c:	2109883a 	add	r4,r4,r4
   21880:	1907883a 	add	r3,r3,r4
   21884:	38000526 	beq	r7,zero,2189c <memset+0x118>
   21888:	19cf883a 	add	r7,r3,r7
   2188c:	19400005 	stb	r5,0(r3)
   21890:	18c00044 	addi	r3,r3,1
   21894:	38fffd1e 	bne	r7,r3,2188c <__alt_data_end+0xfffe188c>
   21898:	f800283a 	ret
   2189c:	f800283a 	ret
   218a0:	2007883a 	mov	r3,r4
   218a4:	300f883a 	mov	r7,r6
   218a8:	003fc706 	br	217c8 <__alt_data_end+0xfffe17c8>

000218ac <_realloc_r>:
   218ac:	defff604 	addi	sp,sp,-40
   218b0:	dc400115 	stw	r17,4(sp)
   218b4:	dfc00915 	stw	ra,36(sp)
   218b8:	df000815 	stw	fp,32(sp)
   218bc:	ddc00715 	stw	r23,28(sp)
   218c0:	dd800615 	stw	r22,24(sp)
   218c4:	dd400515 	stw	r21,20(sp)
   218c8:	dd000415 	stw	r20,16(sp)
   218cc:	dcc00315 	stw	r19,12(sp)
   218d0:	dc800215 	stw	r18,8(sp)
   218d4:	dc000015 	stw	r16,0(sp)
   218d8:	3023883a 	mov	r17,r6
   218dc:	2800b626 	beq	r5,zero,21bb8 <_realloc_r+0x30c>
   218e0:	2829883a 	mov	r20,r5
   218e4:	2025883a 	mov	r18,r4
   218e8:	00234180 	call	23418 <__malloc_lock>
   218ec:	a0ffff17 	ldw	r3,-4(r20)
   218f0:	043fff04 	movi	r16,-4
   218f4:	888002c4 	addi	r2,r17,11
   218f8:	01000584 	movi	r4,22
   218fc:	a57ffe04 	addi	r21,r20,-8
   21900:	1c20703a 	and	r16,r3,r16
   21904:	2080332e 	bgeu	r4,r2,219d4 <_realloc_r+0x128>
   21908:	05bffe04 	movi	r22,-8
   2190c:	15ac703a 	and	r22,r2,r22
   21910:	b005883a 	mov	r2,r22
   21914:	b0005716 	blt	r22,zero,21a74 <_realloc_r+0x1c8>
   21918:	b4405636 	bltu	r22,r17,21a74 <_realloc_r+0x1c8>
   2191c:	8080300e 	bge	r16,r2,219e0 <_realloc_r+0x134>
   21920:	070000b4 	movhi	fp,2
   21924:	e7106d04 	addi	fp,fp,16820
   21928:	e2000217 	ldw	r8,8(fp)
   2192c:	ac09883a 	add	r4,r21,r16
   21930:	22006126 	beq	r4,r8,21ab8 <_realloc_r+0x20c>
   21934:	22400117 	ldw	r9,4(r4)
   21938:	01ffff84 	movi	r7,-2
   2193c:	49ce703a 	and	r7,r9,r7
   21940:	21cf883a 	add	r7,r4,r7
   21944:	39800117 	ldw	r6,4(r7)
   21948:	3180004c 	andi	r6,r6,1
   2194c:	30003e26 	beq	r6,zero,21a48 <_realloc_r+0x19c>
   21950:	18c0004c 	andi	r3,r3,1
   21954:	18008126 	beq	r3,zero,21b5c <_realloc_r+0x2b0>
   21958:	880b883a 	mov	r5,r17
   2195c:	9009883a 	mov	r4,r18
   21960:	0020bf00 	call	20bf0 <_malloc_r>
   21964:	1023883a 	mov	r17,r2
   21968:	10011e26 	beq	r2,zero,21de4 <_realloc_r+0x538>
   2196c:	a0ffff17 	ldw	r3,-4(r20)
   21970:	113ffe04 	addi	r4,r2,-8
   21974:	00bfff84 	movi	r2,-2
   21978:	1884703a 	and	r2,r3,r2
   2197c:	a885883a 	add	r2,r21,r2
   21980:	2080ee26 	beq	r4,r2,21d3c <_realloc_r+0x490>
   21984:	81bfff04 	addi	r6,r16,-4
   21988:	00800904 	movi	r2,36
   2198c:	1180b836 	bltu	r2,r6,21c70 <_realloc_r+0x3c4>
   21990:	00c004c4 	movi	r3,19
   21994:	19809536 	bltu	r3,r6,21bec <_realloc_r+0x340>
   21998:	8805883a 	mov	r2,r17
   2199c:	a007883a 	mov	r3,r20
   219a0:	19000017 	ldw	r4,0(r3)
   219a4:	11000015 	stw	r4,0(r2)
   219a8:	19000117 	ldw	r4,4(r3)
   219ac:	11000115 	stw	r4,4(r2)
   219b0:	18c00217 	ldw	r3,8(r3)
   219b4:	10c00215 	stw	r3,8(r2)
   219b8:	a00b883a 	mov	r5,r20
   219bc:	9009883a 	mov	r4,r18
   219c0:	00226780 	call	22678 <_free_r>
   219c4:	9009883a 	mov	r4,r18
   219c8:	002343c0 	call	2343c <__malloc_unlock>
   219cc:	8805883a 	mov	r2,r17
   219d0:	00001106 	br	21a18 <_realloc_r+0x16c>
   219d4:	00800404 	movi	r2,16
   219d8:	102d883a 	mov	r22,r2
   219dc:	003fce06 	br	21918 <__alt_data_end+0xfffe1918>
   219e0:	a023883a 	mov	r17,r20
   219e4:	858fc83a 	sub	r7,r16,r22
   219e8:	008003c4 	movi	r2,15
   219ec:	18c0004c 	andi	r3,r3,1
   219f0:	11c02436 	bltu	r2,r7,21a84 <_realloc_r+0x1d8>
   219f4:	1c06b03a 	or	r3,r3,r16
   219f8:	a8c00115 	stw	r3,4(r21)
   219fc:	ac21883a 	add	r16,r21,r16
   21a00:	80800117 	ldw	r2,4(r16)
   21a04:	10800054 	ori	r2,r2,1
   21a08:	80800115 	stw	r2,4(r16)
   21a0c:	9009883a 	mov	r4,r18
   21a10:	002343c0 	call	2343c <__malloc_unlock>
   21a14:	8805883a 	mov	r2,r17
   21a18:	dfc00917 	ldw	ra,36(sp)
   21a1c:	df000817 	ldw	fp,32(sp)
   21a20:	ddc00717 	ldw	r23,28(sp)
   21a24:	dd800617 	ldw	r22,24(sp)
   21a28:	dd400517 	ldw	r21,20(sp)
   21a2c:	dd000417 	ldw	r20,16(sp)
   21a30:	dcc00317 	ldw	r19,12(sp)
   21a34:	dc800217 	ldw	r18,8(sp)
   21a38:	dc400117 	ldw	r17,4(sp)
   21a3c:	dc000017 	ldw	r16,0(sp)
   21a40:	dec00a04 	addi	sp,sp,40
   21a44:	f800283a 	ret
   21a48:	017fff04 	movi	r5,-4
   21a4c:	494a703a 	and	r5,r9,r5
   21a50:	814d883a 	add	r6,r16,r5
   21a54:	30801e16 	blt	r6,r2,21ad0 <_realloc_r+0x224>
   21a58:	20800317 	ldw	r2,12(r4)
   21a5c:	21000217 	ldw	r4,8(r4)
   21a60:	a023883a 	mov	r17,r20
   21a64:	3021883a 	mov	r16,r6
   21a68:	20800315 	stw	r2,12(r4)
   21a6c:	11000215 	stw	r4,8(r2)
   21a70:	003fdc06 	br	219e4 <__alt_data_end+0xfffe19e4>
   21a74:	00800304 	movi	r2,12
   21a78:	90800015 	stw	r2,0(r18)
   21a7c:	0005883a 	mov	r2,zero
   21a80:	003fe506 	br	21a18 <__alt_data_end+0xfffe1a18>
   21a84:	1d86b03a 	or	r3,r3,r22
   21a88:	a8c00115 	stw	r3,4(r21)
   21a8c:	ad8b883a 	add	r5,r21,r22
   21a90:	38c00054 	ori	r3,r7,1
   21a94:	28c00115 	stw	r3,4(r5)
   21a98:	29cf883a 	add	r7,r5,r7
   21a9c:	38c00117 	ldw	r3,4(r7)
   21aa0:	29400204 	addi	r5,r5,8
   21aa4:	9009883a 	mov	r4,r18
   21aa8:	18800054 	ori	r2,r3,1
   21aac:	38800115 	stw	r2,4(r7)
   21ab0:	00226780 	call	22678 <_free_r>
   21ab4:	003fd506 	br	21a0c <__alt_data_end+0xfffe1a0c>
   21ab8:	21c00117 	ldw	r7,4(r4)
   21abc:	017fff04 	movi	r5,-4
   21ac0:	b1800404 	addi	r6,r22,16
   21ac4:	394a703a 	and	r5,r7,r5
   21ac8:	814f883a 	add	r7,r16,r5
   21acc:	39805b0e 	bge	r7,r6,21c3c <_realloc_r+0x390>
   21ad0:	18c0004c 	andi	r3,r3,1
   21ad4:	183fa01e 	bne	r3,zero,21958 <__alt_data_end+0xfffe1958>
   21ad8:	a4fffe17 	ldw	r19,-8(r20)
   21adc:	00ffff04 	movi	r3,-4
   21ae0:	ace7c83a 	sub	r19,r21,r19
   21ae4:	99800117 	ldw	r6,4(r19)
   21ae8:	30c6703a 	and	r3,r6,r3
   21aec:	20002026 	beq	r4,zero,21b70 <_realloc_r+0x2c4>
   21af0:	80ef883a 	add	r23,r16,r3
   21af4:	b96f883a 	add	r23,r23,r5
   21af8:	22006126 	beq	r4,r8,21c80 <_realloc_r+0x3d4>
   21afc:	b8801c16 	blt	r23,r2,21b70 <_realloc_r+0x2c4>
   21b00:	20800317 	ldw	r2,12(r4)
   21b04:	20c00217 	ldw	r3,8(r4)
   21b08:	81bfff04 	addi	r6,r16,-4
   21b0c:	01000904 	movi	r4,36
   21b10:	18800315 	stw	r2,12(r3)
   21b14:	10c00215 	stw	r3,8(r2)
   21b18:	98c00217 	ldw	r3,8(r19)
   21b1c:	98800317 	ldw	r2,12(r19)
   21b20:	9c400204 	addi	r17,r19,8
   21b24:	18800315 	stw	r2,12(r3)
   21b28:	10c00215 	stw	r3,8(r2)
   21b2c:	21801b36 	bltu	r4,r6,21b9c <_realloc_r+0x2f0>
   21b30:	008004c4 	movi	r2,19
   21b34:	1180362e 	bgeu	r2,r6,21c10 <_realloc_r+0x364>
   21b38:	a0800017 	ldw	r2,0(r20)
   21b3c:	98800215 	stw	r2,8(r19)
   21b40:	a0800117 	ldw	r2,4(r20)
   21b44:	98800315 	stw	r2,12(r19)
   21b48:	008006c4 	movi	r2,27
   21b4c:	11808136 	bltu	r2,r6,21d54 <_realloc_r+0x4a8>
   21b50:	98800404 	addi	r2,r19,16
   21b54:	a5000204 	addi	r20,r20,8
   21b58:	00002e06 	br	21c14 <_realloc_r+0x368>
   21b5c:	a4fffe17 	ldw	r19,-8(r20)
   21b60:	00ffff04 	movi	r3,-4
   21b64:	ace7c83a 	sub	r19,r21,r19
   21b68:	99000117 	ldw	r4,4(r19)
   21b6c:	20c6703a 	and	r3,r4,r3
   21b70:	983f7926 	beq	r19,zero,21958 <__alt_data_end+0xfffe1958>
   21b74:	80ef883a 	add	r23,r16,r3
   21b78:	b8bf7716 	blt	r23,r2,21958 <__alt_data_end+0xfffe1958>
   21b7c:	98800317 	ldw	r2,12(r19)
   21b80:	98c00217 	ldw	r3,8(r19)
   21b84:	81bfff04 	addi	r6,r16,-4
   21b88:	01000904 	movi	r4,36
   21b8c:	18800315 	stw	r2,12(r3)
   21b90:	10c00215 	stw	r3,8(r2)
   21b94:	9c400204 	addi	r17,r19,8
   21b98:	21bfe52e 	bgeu	r4,r6,21b30 <__alt_data_end+0xfffe1b30>
   21b9c:	a00b883a 	mov	r5,r20
   21ba0:	8809883a 	mov	r4,r17
   21ba4:	00216280 	call	21628 <memmove>
   21ba8:	98c00117 	ldw	r3,4(r19)
   21bac:	b821883a 	mov	r16,r23
   21bb0:	982b883a 	mov	r21,r19
   21bb4:	003f8b06 	br	219e4 <__alt_data_end+0xfffe19e4>
   21bb8:	300b883a 	mov	r5,r6
   21bbc:	dfc00917 	ldw	ra,36(sp)
   21bc0:	df000817 	ldw	fp,32(sp)
   21bc4:	ddc00717 	ldw	r23,28(sp)
   21bc8:	dd800617 	ldw	r22,24(sp)
   21bcc:	dd400517 	ldw	r21,20(sp)
   21bd0:	dd000417 	ldw	r20,16(sp)
   21bd4:	dcc00317 	ldw	r19,12(sp)
   21bd8:	dc800217 	ldw	r18,8(sp)
   21bdc:	dc400117 	ldw	r17,4(sp)
   21be0:	dc000017 	ldw	r16,0(sp)
   21be4:	dec00a04 	addi	sp,sp,40
   21be8:	0020bf01 	jmpi	20bf0 <_malloc_r>
   21bec:	a0c00017 	ldw	r3,0(r20)
   21bf0:	88c00015 	stw	r3,0(r17)
   21bf4:	a0c00117 	ldw	r3,4(r20)
   21bf8:	88c00115 	stw	r3,4(r17)
   21bfc:	00c006c4 	movi	r3,27
   21c00:	19804636 	bltu	r3,r6,21d1c <_realloc_r+0x470>
   21c04:	88800204 	addi	r2,r17,8
   21c08:	a0c00204 	addi	r3,r20,8
   21c0c:	003f6406 	br	219a0 <__alt_data_end+0xfffe19a0>
   21c10:	8805883a 	mov	r2,r17
   21c14:	a0c00017 	ldw	r3,0(r20)
   21c18:	b821883a 	mov	r16,r23
   21c1c:	982b883a 	mov	r21,r19
   21c20:	10c00015 	stw	r3,0(r2)
   21c24:	a0c00117 	ldw	r3,4(r20)
   21c28:	10c00115 	stw	r3,4(r2)
   21c2c:	a0c00217 	ldw	r3,8(r20)
   21c30:	10c00215 	stw	r3,8(r2)
   21c34:	98c00117 	ldw	r3,4(r19)
   21c38:	003f6a06 	br	219e4 <__alt_data_end+0xfffe19e4>
   21c3c:	adab883a 	add	r21,r21,r22
   21c40:	3d85c83a 	sub	r2,r7,r22
   21c44:	e5400215 	stw	r21,8(fp)
   21c48:	10800054 	ori	r2,r2,1
   21c4c:	a8800115 	stw	r2,4(r21)
   21c50:	a0bfff17 	ldw	r2,-4(r20)
   21c54:	9009883a 	mov	r4,r18
   21c58:	1080004c 	andi	r2,r2,1
   21c5c:	1584b03a 	or	r2,r2,r22
   21c60:	a0bfff15 	stw	r2,-4(r20)
   21c64:	002343c0 	call	2343c <__malloc_unlock>
   21c68:	a005883a 	mov	r2,r20
   21c6c:	003f6a06 	br	21a18 <__alt_data_end+0xfffe1a18>
   21c70:	a00b883a 	mov	r5,r20
   21c74:	8809883a 	mov	r4,r17
   21c78:	00216280 	call	21628 <memmove>
   21c7c:	003f4e06 	br	219b8 <__alt_data_end+0xfffe19b8>
   21c80:	b1000404 	addi	r4,r22,16
   21c84:	b93fba16 	blt	r23,r4,21b70 <__alt_data_end+0xfffe1b70>
   21c88:	98800317 	ldw	r2,12(r19)
   21c8c:	98c00217 	ldw	r3,8(r19)
   21c90:	81bfff04 	addi	r6,r16,-4
   21c94:	01000904 	movi	r4,36
   21c98:	18800315 	stw	r2,12(r3)
   21c9c:	10c00215 	stw	r3,8(r2)
   21ca0:	9c400204 	addi	r17,r19,8
   21ca4:	21804336 	bltu	r4,r6,21db4 <_realloc_r+0x508>
   21ca8:	008004c4 	movi	r2,19
   21cac:	11803f2e 	bgeu	r2,r6,21dac <_realloc_r+0x500>
   21cb0:	a0800017 	ldw	r2,0(r20)
   21cb4:	98800215 	stw	r2,8(r19)
   21cb8:	a0800117 	ldw	r2,4(r20)
   21cbc:	98800315 	stw	r2,12(r19)
   21cc0:	008006c4 	movi	r2,27
   21cc4:	11803f36 	bltu	r2,r6,21dc4 <_realloc_r+0x518>
   21cc8:	98800404 	addi	r2,r19,16
   21ccc:	a5000204 	addi	r20,r20,8
   21cd0:	a0c00017 	ldw	r3,0(r20)
   21cd4:	10c00015 	stw	r3,0(r2)
   21cd8:	a0c00117 	ldw	r3,4(r20)
   21cdc:	10c00115 	stw	r3,4(r2)
   21ce0:	a0c00217 	ldw	r3,8(r20)
   21ce4:	10c00215 	stw	r3,8(r2)
   21ce8:	9d87883a 	add	r3,r19,r22
   21cec:	bd85c83a 	sub	r2,r23,r22
   21cf0:	e0c00215 	stw	r3,8(fp)
   21cf4:	10800054 	ori	r2,r2,1
   21cf8:	18800115 	stw	r2,4(r3)
   21cfc:	98800117 	ldw	r2,4(r19)
   21d00:	9009883a 	mov	r4,r18
   21d04:	1080004c 	andi	r2,r2,1
   21d08:	1584b03a 	or	r2,r2,r22
   21d0c:	98800115 	stw	r2,4(r19)
   21d10:	002343c0 	call	2343c <__malloc_unlock>
   21d14:	8805883a 	mov	r2,r17
   21d18:	003f3f06 	br	21a18 <__alt_data_end+0xfffe1a18>
   21d1c:	a0c00217 	ldw	r3,8(r20)
   21d20:	88c00215 	stw	r3,8(r17)
   21d24:	a0c00317 	ldw	r3,12(r20)
   21d28:	88c00315 	stw	r3,12(r17)
   21d2c:	30801126 	beq	r6,r2,21d74 <_realloc_r+0x4c8>
   21d30:	88800404 	addi	r2,r17,16
   21d34:	a0c00404 	addi	r3,r20,16
   21d38:	003f1906 	br	219a0 <__alt_data_end+0xfffe19a0>
   21d3c:	893fff17 	ldw	r4,-4(r17)
   21d40:	00bfff04 	movi	r2,-4
   21d44:	a023883a 	mov	r17,r20
   21d48:	2084703a 	and	r2,r4,r2
   21d4c:	80a1883a 	add	r16,r16,r2
   21d50:	003f2406 	br	219e4 <__alt_data_end+0xfffe19e4>
   21d54:	a0800217 	ldw	r2,8(r20)
   21d58:	98800415 	stw	r2,16(r19)
   21d5c:	a0800317 	ldw	r2,12(r20)
   21d60:	98800515 	stw	r2,20(r19)
   21d64:	31000a26 	beq	r6,r4,21d90 <_realloc_r+0x4e4>
   21d68:	98800604 	addi	r2,r19,24
   21d6c:	a5000404 	addi	r20,r20,16
   21d70:	003fa806 	br	21c14 <__alt_data_end+0xfffe1c14>
   21d74:	a1000417 	ldw	r4,16(r20)
   21d78:	88800604 	addi	r2,r17,24
   21d7c:	a0c00604 	addi	r3,r20,24
   21d80:	89000415 	stw	r4,16(r17)
   21d84:	a1000517 	ldw	r4,20(r20)
   21d88:	89000515 	stw	r4,20(r17)
   21d8c:	003f0406 	br	219a0 <__alt_data_end+0xfffe19a0>
   21d90:	a0c00417 	ldw	r3,16(r20)
   21d94:	a5000604 	addi	r20,r20,24
   21d98:	98800804 	addi	r2,r19,32
   21d9c:	98c00615 	stw	r3,24(r19)
   21da0:	a0ffff17 	ldw	r3,-4(r20)
   21da4:	98c00715 	stw	r3,28(r19)
   21da8:	003f9a06 	br	21c14 <__alt_data_end+0xfffe1c14>
   21dac:	8805883a 	mov	r2,r17
   21db0:	003fc706 	br	21cd0 <__alt_data_end+0xfffe1cd0>
   21db4:	a00b883a 	mov	r5,r20
   21db8:	8809883a 	mov	r4,r17
   21dbc:	00216280 	call	21628 <memmove>
   21dc0:	003fc906 	br	21ce8 <__alt_data_end+0xfffe1ce8>
   21dc4:	a0800217 	ldw	r2,8(r20)
   21dc8:	98800415 	stw	r2,16(r19)
   21dcc:	a0800317 	ldw	r2,12(r20)
   21dd0:	98800515 	stw	r2,20(r19)
   21dd4:	31000726 	beq	r6,r4,21df4 <_realloc_r+0x548>
   21dd8:	98800604 	addi	r2,r19,24
   21ddc:	a5000404 	addi	r20,r20,16
   21de0:	003fbb06 	br	21cd0 <__alt_data_end+0xfffe1cd0>
   21de4:	9009883a 	mov	r4,r18
   21de8:	002343c0 	call	2343c <__malloc_unlock>
   21dec:	0005883a 	mov	r2,zero
   21df0:	003f0906 	br	21a18 <__alt_data_end+0xfffe1a18>
   21df4:	a0c00417 	ldw	r3,16(r20)
   21df8:	a5000604 	addi	r20,r20,24
   21dfc:	98800804 	addi	r2,r19,32
   21e00:	98c00615 	stw	r3,24(r19)
   21e04:	a0ffff17 	ldw	r3,-4(r20)
   21e08:	98c00715 	stw	r3,28(r19)
   21e0c:	003fb006 	br	21cd0 <__alt_data_end+0xfffe1cd0>

00021e10 <_sbrk_r>:
   21e10:	defffd04 	addi	sp,sp,-12
   21e14:	dc000015 	stw	r16,0(sp)
   21e18:	040000b4 	movhi	r16,2
   21e1c:	dc400115 	stw	r17,4(sp)
   21e20:	84146704 	addi	r16,r16,20892
   21e24:	2023883a 	mov	r17,r4
   21e28:	2809883a 	mov	r4,r5
   21e2c:	dfc00215 	stw	ra,8(sp)
   21e30:	80000015 	stw	zero,0(r16)
   21e34:	00236100 	call	23610 <sbrk>
   21e38:	00ffffc4 	movi	r3,-1
   21e3c:	10c00526 	beq	r2,r3,21e54 <_sbrk_r+0x44>
   21e40:	dfc00217 	ldw	ra,8(sp)
   21e44:	dc400117 	ldw	r17,4(sp)
   21e48:	dc000017 	ldw	r16,0(sp)
   21e4c:	dec00304 	addi	sp,sp,12
   21e50:	f800283a 	ret
   21e54:	80c00017 	ldw	r3,0(r16)
   21e58:	183ff926 	beq	r3,zero,21e40 <__alt_data_end+0xfffe1e40>
   21e5c:	88c00015 	stw	r3,0(r17)
   21e60:	003ff706 	br	21e40 <__alt_data_end+0xfffe1e40>

00021e64 <__sread>:
   21e64:	defffe04 	addi	sp,sp,-8
   21e68:	dc000015 	stw	r16,0(sp)
   21e6c:	2821883a 	mov	r16,r5
   21e70:	2940038f 	ldh	r5,14(r5)
   21e74:	dfc00115 	stw	ra,4(sp)
   21e78:	0022ba40 	call	22ba4 <_read_r>
   21e7c:	10000716 	blt	r2,zero,21e9c <__sread+0x38>
   21e80:	80c01417 	ldw	r3,80(r16)
   21e84:	1887883a 	add	r3,r3,r2
   21e88:	80c01415 	stw	r3,80(r16)
   21e8c:	dfc00117 	ldw	ra,4(sp)
   21e90:	dc000017 	ldw	r16,0(sp)
   21e94:	dec00204 	addi	sp,sp,8
   21e98:	f800283a 	ret
   21e9c:	80c0030b 	ldhu	r3,12(r16)
   21ea0:	18fbffcc 	andi	r3,r3,61439
   21ea4:	80c0030d 	sth	r3,12(r16)
   21ea8:	dfc00117 	ldw	ra,4(sp)
   21eac:	dc000017 	ldw	r16,0(sp)
   21eb0:	dec00204 	addi	sp,sp,8
   21eb4:	f800283a 	ret

00021eb8 <__seofread>:
   21eb8:	0005883a 	mov	r2,zero
   21ebc:	f800283a 	ret

00021ec0 <__swrite>:
   21ec0:	2880030b 	ldhu	r2,12(r5)
   21ec4:	defffb04 	addi	sp,sp,-20
   21ec8:	dcc00315 	stw	r19,12(sp)
   21ecc:	dc800215 	stw	r18,8(sp)
   21ed0:	dc400115 	stw	r17,4(sp)
   21ed4:	dc000015 	stw	r16,0(sp)
   21ed8:	dfc00415 	stw	ra,16(sp)
   21edc:	10c0400c 	andi	r3,r2,256
   21ee0:	2821883a 	mov	r16,r5
   21ee4:	2023883a 	mov	r17,r4
   21ee8:	3025883a 	mov	r18,r6
   21eec:	3827883a 	mov	r19,r7
   21ef0:	18000526 	beq	r3,zero,21f08 <__swrite+0x48>
   21ef4:	2940038f 	ldh	r5,14(r5)
   21ef8:	01c00084 	movi	r7,2
   21efc:	000d883a 	mov	r6,zero
   21f00:	00229880 	call	22988 <_lseek_r>
   21f04:	8080030b 	ldhu	r2,12(r16)
   21f08:	8140038f 	ldh	r5,14(r16)
   21f0c:	10bbffcc 	andi	r2,r2,61439
   21f10:	980f883a 	mov	r7,r19
   21f14:	900d883a 	mov	r6,r18
   21f18:	8809883a 	mov	r4,r17
   21f1c:	8080030d 	sth	r2,12(r16)
   21f20:	dfc00417 	ldw	ra,16(sp)
   21f24:	dcc00317 	ldw	r19,12(sp)
   21f28:	dc800217 	ldw	r18,8(sp)
   21f2c:	dc400117 	ldw	r17,4(sp)
   21f30:	dc000017 	ldw	r16,0(sp)
   21f34:	dec00504 	addi	sp,sp,20
   21f38:	0021fa01 	jmpi	21fa0 <_write_r>

00021f3c <__sseek>:
   21f3c:	defffe04 	addi	sp,sp,-8
   21f40:	dc000015 	stw	r16,0(sp)
   21f44:	2821883a 	mov	r16,r5
   21f48:	2940038f 	ldh	r5,14(r5)
   21f4c:	dfc00115 	stw	ra,4(sp)
   21f50:	00229880 	call	22988 <_lseek_r>
   21f54:	00ffffc4 	movi	r3,-1
   21f58:	10c00826 	beq	r2,r3,21f7c <__sseek+0x40>
   21f5c:	80c0030b 	ldhu	r3,12(r16)
   21f60:	80801415 	stw	r2,80(r16)
   21f64:	18c40014 	ori	r3,r3,4096
   21f68:	80c0030d 	sth	r3,12(r16)
   21f6c:	dfc00117 	ldw	ra,4(sp)
   21f70:	dc000017 	ldw	r16,0(sp)
   21f74:	dec00204 	addi	sp,sp,8
   21f78:	f800283a 	ret
   21f7c:	80c0030b 	ldhu	r3,12(r16)
   21f80:	18fbffcc 	andi	r3,r3,61439
   21f84:	80c0030d 	sth	r3,12(r16)
   21f88:	dfc00117 	ldw	ra,4(sp)
   21f8c:	dc000017 	ldw	r16,0(sp)
   21f90:	dec00204 	addi	sp,sp,8
   21f94:	f800283a 	ret

00021f98 <__sclose>:
   21f98:	2940038f 	ldh	r5,14(r5)
   21f9c:	00221541 	jmpi	22154 <_close_r>

00021fa0 <_write_r>:
   21fa0:	defffd04 	addi	sp,sp,-12
   21fa4:	2805883a 	mov	r2,r5
   21fa8:	dc000015 	stw	r16,0(sp)
   21fac:	040000b4 	movhi	r16,2
   21fb0:	dc400115 	stw	r17,4(sp)
   21fb4:	300b883a 	mov	r5,r6
   21fb8:	84146704 	addi	r16,r16,20892
   21fbc:	2023883a 	mov	r17,r4
   21fc0:	380d883a 	mov	r6,r7
   21fc4:	1009883a 	mov	r4,r2
   21fc8:	dfc00215 	stw	ra,8(sp)
   21fcc:	80000015 	stw	zero,0(r16)
   21fd0:	00237100 	call	23710 <write>
   21fd4:	00ffffc4 	movi	r3,-1
   21fd8:	10c00526 	beq	r2,r3,21ff0 <_write_r+0x50>
   21fdc:	dfc00217 	ldw	ra,8(sp)
   21fe0:	dc400117 	ldw	r17,4(sp)
   21fe4:	dc000017 	ldw	r16,0(sp)
   21fe8:	dec00304 	addi	sp,sp,12
   21fec:	f800283a 	ret
   21ff0:	80c00017 	ldw	r3,0(r16)
   21ff4:	183ff926 	beq	r3,zero,21fdc <__alt_data_end+0xfffe1fdc>
   21ff8:	88c00015 	stw	r3,0(r17)
   21ffc:	003ff706 	br	21fdc <__alt_data_end+0xfffe1fdc>

00022000 <__swsetup_r>:
   22000:	008000b4 	movhi	r2,2
   22004:	defffd04 	addi	sp,sp,-12
   22008:	1091da04 	addi	r2,r2,18280
   2200c:	dc400115 	stw	r17,4(sp)
   22010:	2023883a 	mov	r17,r4
   22014:	11000017 	ldw	r4,0(r2)
   22018:	dc000015 	stw	r16,0(sp)
   2201c:	dfc00215 	stw	ra,8(sp)
   22020:	2821883a 	mov	r16,r5
   22024:	20000226 	beq	r4,zero,22030 <__swsetup_r+0x30>
   22028:	20800e17 	ldw	r2,56(r4)
   2202c:	10003126 	beq	r2,zero,220f4 <__swsetup_r+0xf4>
   22030:	8080030b 	ldhu	r2,12(r16)
   22034:	10c0020c 	andi	r3,r2,8
   22038:	1009883a 	mov	r4,r2
   2203c:	18000f26 	beq	r3,zero,2207c <__swsetup_r+0x7c>
   22040:	80c00417 	ldw	r3,16(r16)
   22044:	18001526 	beq	r3,zero,2209c <__swsetup_r+0x9c>
   22048:	1100004c 	andi	r4,r2,1
   2204c:	20001c1e 	bne	r4,zero,220c0 <__swsetup_r+0xc0>
   22050:	1080008c 	andi	r2,r2,2
   22054:	1000291e 	bne	r2,zero,220fc <__swsetup_r+0xfc>
   22058:	80800517 	ldw	r2,20(r16)
   2205c:	80800215 	stw	r2,8(r16)
   22060:	18001c26 	beq	r3,zero,220d4 <__swsetup_r+0xd4>
   22064:	0005883a 	mov	r2,zero
   22068:	dfc00217 	ldw	ra,8(sp)
   2206c:	dc400117 	ldw	r17,4(sp)
   22070:	dc000017 	ldw	r16,0(sp)
   22074:	dec00304 	addi	sp,sp,12
   22078:	f800283a 	ret
   2207c:	2080040c 	andi	r2,r4,16
   22080:	10002e26 	beq	r2,zero,2213c <__swsetup_r+0x13c>
   22084:	2080010c 	andi	r2,r4,4
   22088:	10001e1e 	bne	r2,zero,22104 <__swsetup_r+0x104>
   2208c:	80c00417 	ldw	r3,16(r16)
   22090:	20800214 	ori	r2,r4,8
   22094:	8080030d 	sth	r2,12(r16)
   22098:	183feb1e 	bne	r3,zero,22048 <__alt_data_end+0xfffe2048>
   2209c:	1100a00c 	andi	r4,r2,640
   220a0:	01408004 	movi	r5,512
   220a4:	217fe826 	beq	r4,r5,22048 <__alt_data_end+0xfffe2048>
   220a8:	800b883a 	mov	r5,r16
   220ac:	8809883a 	mov	r4,r17
   220b0:	00229e80 	call	229e8 <__smakebuf_r>
   220b4:	8080030b 	ldhu	r2,12(r16)
   220b8:	80c00417 	ldw	r3,16(r16)
   220bc:	003fe206 	br	22048 <__alt_data_end+0xfffe2048>
   220c0:	80800517 	ldw	r2,20(r16)
   220c4:	80000215 	stw	zero,8(r16)
   220c8:	0085c83a 	sub	r2,zero,r2
   220cc:	80800615 	stw	r2,24(r16)
   220d0:	183fe41e 	bne	r3,zero,22064 <__alt_data_end+0xfffe2064>
   220d4:	80c0030b 	ldhu	r3,12(r16)
   220d8:	0005883a 	mov	r2,zero
   220dc:	1900200c 	andi	r4,r3,128
   220e0:	203fe126 	beq	r4,zero,22068 <__alt_data_end+0xfffe2068>
   220e4:	18c01014 	ori	r3,r3,64
   220e8:	80c0030d 	sth	r3,12(r16)
   220ec:	00bfffc4 	movi	r2,-1
   220f0:	003fdd06 	br	22068 <__alt_data_end+0xfffe2068>
   220f4:	002055c0 	call	2055c <__sinit>
   220f8:	003fcd06 	br	22030 <__alt_data_end+0xfffe2030>
   220fc:	0005883a 	mov	r2,zero
   22100:	003fd606 	br	2205c <__alt_data_end+0xfffe205c>
   22104:	81400c17 	ldw	r5,48(r16)
   22108:	28000626 	beq	r5,zero,22124 <__swsetup_r+0x124>
   2210c:	80801004 	addi	r2,r16,64
   22110:	28800326 	beq	r5,r2,22120 <__swsetup_r+0x120>
   22114:	8809883a 	mov	r4,r17
   22118:	00226780 	call	22678 <_free_r>
   2211c:	8100030b 	ldhu	r4,12(r16)
   22120:	80000c15 	stw	zero,48(r16)
   22124:	80c00417 	ldw	r3,16(r16)
   22128:	00bff6c4 	movi	r2,-37
   2212c:	1108703a 	and	r4,r2,r4
   22130:	80000115 	stw	zero,4(r16)
   22134:	80c00015 	stw	r3,0(r16)
   22138:	003fd506 	br	22090 <__alt_data_end+0xfffe2090>
   2213c:	00800244 	movi	r2,9
   22140:	88800015 	stw	r2,0(r17)
   22144:	20801014 	ori	r2,r4,64
   22148:	8080030d 	sth	r2,12(r16)
   2214c:	00bfffc4 	movi	r2,-1
   22150:	003fc506 	br	22068 <__alt_data_end+0xfffe2068>

00022154 <_close_r>:
   22154:	defffd04 	addi	sp,sp,-12
   22158:	dc000015 	stw	r16,0(sp)
   2215c:	040000b4 	movhi	r16,2
   22160:	dc400115 	stw	r17,4(sp)
   22164:	84146704 	addi	r16,r16,20892
   22168:	2023883a 	mov	r17,r4
   2216c:	2809883a 	mov	r4,r5
   22170:	dfc00215 	stw	ra,8(sp)
   22174:	80000015 	stw	zero,0(r16)
   22178:	0022eb80 	call	22eb8 <close>
   2217c:	00ffffc4 	movi	r3,-1
   22180:	10c00526 	beq	r2,r3,22198 <_close_r+0x44>
   22184:	dfc00217 	ldw	ra,8(sp)
   22188:	dc400117 	ldw	r17,4(sp)
   2218c:	dc000017 	ldw	r16,0(sp)
   22190:	dec00304 	addi	sp,sp,12
   22194:	f800283a 	ret
   22198:	80c00017 	ldw	r3,0(r16)
   2219c:	183ff926 	beq	r3,zero,22184 <__alt_data_end+0xfffe2184>
   221a0:	88c00015 	stw	r3,0(r17)
   221a4:	003ff706 	br	22184 <__alt_data_end+0xfffe2184>

000221a8 <_fclose_r>:
   221a8:	28003926 	beq	r5,zero,22290 <_fclose_r+0xe8>
   221ac:	defffc04 	addi	sp,sp,-16
   221b0:	dc400115 	stw	r17,4(sp)
   221b4:	dc000015 	stw	r16,0(sp)
   221b8:	dfc00315 	stw	ra,12(sp)
   221bc:	dc800215 	stw	r18,8(sp)
   221c0:	2023883a 	mov	r17,r4
   221c4:	2821883a 	mov	r16,r5
   221c8:	20000226 	beq	r4,zero,221d4 <_fclose_r+0x2c>
   221cc:	20800e17 	ldw	r2,56(r4)
   221d0:	10002726 	beq	r2,zero,22270 <_fclose_r+0xc8>
   221d4:	8080030f 	ldh	r2,12(r16)
   221d8:	1000071e 	bne	r2,zero,221f8 <_fclose_r+0x50>
   221dc:	0005883a 	mov	r2,zero
   221e0:	dfc00317 	ldw	ra,12(sp)
   221e4:	dc800217 	ldw	r18,8(sp)
   221e8:	dc400117 	ldw	r17,4(sp)
   221ec:	dc000017 	ldw	r16,0(sp)
   221f0:	dec00404 	addi	sp,sp,16
   221f4:	f800283a 	ret
   221f8:	800b883a 	mov	r5,r16
   221fc:	8809883a 	mov	r4,r17
   22200:	00222ac0 	call	222ac <__sflush_r>
   22204:	1025883a 	mov	r18,r2
   22208:	80800b17 	ldw	r2,44(r16)
   2220c:	10000426 	beq	r2,zero,22220 <_fclose_r+0x78>
   22210:	81400717 	ldw	r5,28(r16)
   22214:	8809883a 	mov	r4,r17
   22218:	103ee83a 	callr	r2
   2221c:	10001616 	blt	r2,zero,22278 <_fclose_r+0xd0>
   22220:	8080030b 	ldhu	r2,12(r16)
   22224:	1080200c 	andi	r2,r2,128
   22228:	1000151e 	bne	r2,zero,22280 <_fclose_r+0xd8>
   2222c:	81400c17 	ldw	r5,48(r16)
   22230:	28000526 	beq	r5,zero,22248 <_fclose_r+0xa0>
   22234:	80801004 	addi	r2,r16,64
   22238:	28800226 	beq	r5,r2,22244 <_fclose_r+0x9c>
   2223c:	8809883a 	mov	r4,r17
   22240:	00226780 	call	22678 <_free_r>
   22244:	80000c15 	stw	zero,48(r16)
   22248:	81401117 	ldw	r5,68(r16)
   2224c:	28000326 	beq	r5,zero,2225c <_fclose_r+0xb4>
   22250:	8809883a 	mov	r4,r17
   22254:	00226780 	call	22678 <_free_r>
   22258:	80001115 	stw	zero,68(r16)
   2225c:	002056c0 	call	2056c <__sfp_lock_acquire>
   22260:	8000030d 	sth	zero,12(r16)
   22264:	00205700 	call	20570 <__sfp_lock_release>
   22268:	9005883a 	mov	r2,r18
   2226c:	003fdc06 	br	221e0 <__alt_data_end+0xfffe21e0>
   22270:	002055c0 	call	2055c <__sinit>
   22274:	003fd706 	br	221d4 <__alt_data_end+0xfffe21d4>
   22278:	04bfffc4 	movi	r18,-1
   2227c:	003fe806 	br	22220 <__alt_data_end+0xfffe2220>
   22280:	81400417 	ldw	r5,16(r16)
   22284:	8809883a 	mov	r4,r17
   22288:	00226780 	call	22678 <_free_r>
   2228c:	003fe706 	br	2222c <__alt_data_end+0xfffe222c>
   22290:	0005883a 	mov	r2,zero
   22294:	f800283a 	ret

00022298 <fclose>:
   22298:	008000b4 	movhi	r2,2
   2229c:	1091da04 	addi	r2,r2,18280
   222a0:	200b883a 	mov	r5,r4
   222a4:	11000017 	ldw	r4,0(r2)
   222a8:	00221a81 	jmpi	221a8 <_fclose_r>

000222ac <__sflush_r>:
   222ac:	2880030b 	ldhu	r2,12(r5)
   222b0:	defffb04 	addi	sp,sp,-20
   222b4:	dcc00315 	stw	r19,12(sp)
   222b8:	dc400115 	stw	r17,4(sp)
   222bc:	dfc00415 	stw	ra,16(sp)
   222c0:	dc800215 	stw	r18,8(sp)
   222c4:	dc000015 	stw	r16,0(sp)
   222c8:	10c0020c 	andi	r3,r2,8
   222cc:	2823883a 	mov	r17,r5
   222d0:	2027883a 	mov	r19,r4
   222d4:	1800311e 	bne	r3,zero,2239c <__sflush_r+0xf0>
   222d8:	28c00117 	ldw	r3,4(r5)
   222dc:	10820014 	ori	r2,r2,2048
   222e0:	2880030d 	sth	r2,12(r5)
   222e4:	00c04b0e 	bge	zero,r3,22414 <__sflush_r+0x168>
   222e8:	8a000a17 	ldw	r8,40(r17)
   222ec:	40002326 	beq	r8,zero,2237c <__sflush_r+0xd0>
   222f0:	9c000017 	ldw	r16,0(r19)
   222f4:	10c4000c 	andi	r3,r2,4096
   222f8:	98000015 	stw	zero,0(r19)
   222fc:	18004826 	beq	r3,zero,22420 <__sflush_r+0x174>
   22300:	89801417 	ldw	r6,80(r17)
   22304:	10c0010c 	andi	r3,r2,4
   22308:	18000626 	beq	r3,zero,22324 <__sflush_r+0x78>
   2230c:	88c00117 	ldw	r3,4(r17)
   22310:	88800c17 	ldw	r2,48(r17)
   22314:	30cdc83a 	sub	r6,r6,r3
   22318:	10000226 	beq	r2,zero,22324 <__sflush_r+0x78>
   2231c:	88800f17 	ldw	r2,60(r17)
   22320:	308dc83a 	sub	r6,r6,r2
   22324:	89400717 	ldw	r5,28(r17)
   22328:	000f883a 	mov	r7,zero
   2232c:	9809883a 	mov	r4,r19
   22330:	403ee83a 	callr	r8
   22334:	00ffffc4 	movi	r3,-1
   22338:	10c04426 	beq	r2,r3,2244c <__sflush_r+0x1a0>
   2233c:	88c0030b 	ldhu	r3,12(r17)
   22340:	89000417 	ldw	r4,16(r17)
   22344:	88000115 	stw	zero,4(r17)
   22348:	197dffcc 	andi	r5,r3,63487
   2234c:	8940030d 	sth	r5,12(r17)
   22350:	89000015 	stw	r4,0(r17)
   22354:	18c4000c 	andi	r3,r3,4096
   22358:	18002c1e 	bne	r3,zero,2240c <__sflush_r+0x160>
   2235c:	89400c17 	ldw	r5,48(r17)
   22360:	9c000015 	stw	r16,0(r19)
   22364:	28000526 	beq	r5,zero,2237c <__sflush_r+0xd0>
   22368:	88801004 	addi	r2,r17,64
   2236c:	28800226 	beq	r5,r2,22378 <__sflush_r+0xcc>
   22370:	9809883a 	mov	r4,r19
   22374:	00226780 	call	22678 <_free_r>
   22378:	88000c15 	stw	zero,48(r17)
   2237c:	0005883a 	mov	r2,zero
   22380:	dfc00417 	ldw	ra,16(sp)
   22384:	dcc00317 	ldw	r19,12(sp)
   22388:	dc800217 	ldw	r18,8(sp)
   2238c:	dc400117 	ldw	r17,4(sp)
   22390:	dc000017 	ldw	r16,0(sp)
   22394:	dec00504 	addi	sp,sp,20
   22398:	f800283a 	ret
   2239c:	2c800417 	ldw	r18,16(r5)
   223a0:	903ff626 	beq	r18,zero,2237c <__alt_data_end+0xfffe237c>
   223a4:	2c000017 	ldw	r16,0(r5)
   223a8:	108000cc 	andi	r2,r2,3
   223ac:	2c800015 	stw	r18,0(r5)
   223b0:	84a1c83a 	sub	r16,r16,r18
   223b4:	1000131e 	bne	r2,zero,22404 <__sflush_r+0x158>
   223b8:	28800517 	ldw	r2,20(r5)
   223bc:	88800215 	stw	r2,8(r17)
   223c0:	04000316 	blt	zero,r16,223d0 <__sflush_r+0x124>
   223c4:	003fed06 	br	2237c <__alt_data_end+0xfffe237c>
   223c8:	90a5883a 	add	r18,r18,r2
   223cc:	043feb0e 	bge	zero,r16,2237c <__alt_data_end+0xfffe237c>
   223d0:	88800917 	ldw	r2,36(r17)
   223d4:	89400717 	ldw	r5,28(r17)
   223d8:	800f883a 	mov	r7,r16
   223dc:	900d883a 	mov	r6,r18
   223e0:	9809883a 	mov	r4,r19
   223e4:	103ee83a 	callr	r2
   223e8:	80a1c83a 	sub	r16,r16,r2
   223ec:	00bff616 	blt	zero,r2,223c8 <__alt_data_end+0xfffe23c8>
   223f0:	88c0030b 	ldhu	r3,12(r17)
   223f4:	00bfffc4 	movi	r2,-1
   223f8:	18c01014 	ori	r3,r3,64
   223fc:	88c0030d 	sth	r3,12(r17)
   22400:	003fdf06 	br	22380 <__alt_data_end+0xfffe2380>
   22404:	0005883a 	mov	r2,zero
   22408:	003fec06 	br	223bc <__alt_data_end+0xfffe23bc>
   2240c:	88801415 	stw	r2,80(r17)
   22410:	003fd206 	br	2235c <__alt_data_end+0xfffe235c>
   22414:	28c00f17 	ldw	r3,60(r5)
   22418:	00ffb316 	blt	zero,r3,222e8 <__alt_data_end+0xfffe22e8>
   2241c:	003fd706 	br	2237c <__alt_data_end+0xfffe237c>
   22420:	89400717 	ldw	r5,28(r17)
   22424:	000d883a 	mov	r6,zero
   22428:	01c00044 	movi	r7,1
   2242c:	9809883a 	mov	r4,r19
   22430:	403ee83a 	callr	r8
   22434:	100d883a 	mov	r6,r2
   22438:	00bfffc4 	movi	r2,-1
   2243c:	30801426 	beq	r6,r2,22490 <__sflush_r+0x1e4>
   22440:	8880030b 	ldhu	r2,12(r17)
   22444:	8a000a17 	ldw	r8,40(r17)
   22448:	003fae06 	br	22304 <__alt_data_end+0xfffe2304>
   2244c:	98c00017 	ldw	r3,0(r19)
   22450:	183fba26 	beq	r3,zero,2233c <__alt_data_end+0xfffe233c>
   22454:	01000744 	movi	r4,29
   22458:	19000626 	beq	r3,r4,22474 <__sflush_r+0x1c8>
   2245c:	01000584 	movi	r4,22
   22460:	19000426 	beq	r3,r4,22474 <__sflush_r+0x1c8>
   22464:	88c0030b 	ldhu	r3,12(r17)
   22468:	18c01014 	ori	r3,r3,64
   2246c:	88c0030d 	sth	r3,12(r17)
   22470:	003fc306 	br	22380 <__alt_data_end+0xfffe2380>
   22474:	8880030b 	ldhu	r2,12(r17)
   22478:	88c00417 	ldw	r3,16(r17)
   2247c:	88000115 	stw	zero,4(r17)
   22480:	10bdffcc 	andi	r2,r2,63487
   22484:	8880030d 	sth	r2,12(r17)
   22488:	88c00015 	stw	r3,0(r17)
   2248c:	003fb306 	br	2235c <__alt_data_end+0xfffe235c>
   22490:	98800017 	ldw	r2,0(r19)
   22494:	103fea26 	beq	r2,zero,22440 <__alt_data_end+0xfffe2440>
   22498:	00c00744 	movi	r3,29
   2249c:	10c00226 	beq	r2,r3,224a8 <__sflush_r+0x1fc>
   224a0:	00c00584 	movi	r3,22
   224a4:	10c0031e 	bne	r2,r3,224b4 <__sflush_r+0x208>
   224a8:	9c000015 	stw	r16,0(r19)
   224ac:	0005883a 	mov	r2,zero
   224b0:	003fb306 	br	22380 <__alt_data_end+0xfffe2380>
   224b4:	88c0030b 	ldhu	r3,12(r17)
   224b8:	3005883a 	mov	r2,r6
   224bc:	18c01014 	ori	r3,r3,64
   224c0:	88c0030d 	sth	r3,12(r17)
   224c4:	003fae06 	br	22380 <__alt_data_end+0xfffe2380>

000224c8 <_fflush_r>:
   224c8:	defffd04 	addi	sp,sp,-12
   224cc:	dc000115 	stw	r16,4(sp)
   224d0:	dfc00215 	stw	ra,8(sp)
   224d4:	2021883a 	mov	r16,r4
   224d8:	20000226 	beq	r4,zero,224e4 <_fflush_r+0x1c>
   224dc:	20800e17 	ldw	r2,56(r4)
   224e0:	10000c26 	beq	r2,zero,22514 <_fflush_r+0x4c>
   224e4:	2880030f 	ldh	r2,12(r5)
   224e8:	1000051e 	bne	r2,zero,22500 <_fflush_r+0x38>
   224ec:	0005883a 	mov	r2,zero
   224f0:	dfc00217 	ldw	ra,8(sp)
   224f4:	dc000117 	ldw	r16,4(sp)
   224f8:	dec00304 	addi	sp,sp,12
   224fc:	f800283a 	ret
   22500:	8009883a 	mov	r4,r16
   22504:	dfc00217 	ldw	ra,8(sp)
   22508:	dc000117 	ldw	r16,4(sp)
   2250c:	dec00304 	addi	sp,sp,12
   22510:	00222ac1 	jmpi	222ac <__sflush_r>
   22514:	d9400015 	stw	r5,0(sp)
   22518:	002055c0 	call	2055c <__sinit>
   2251c:	d9400017 	ldw	r5,0(sp)
   22520:	003ff006 	br	224e4 <__alt_data_end+0xfffe24e4>

00022524 <fflush>:
   22524:	20000526 	beq	r4,zero,2253c <fflush+0x18>
   22528:	008000b4 	movhi	r2,2
   2252c:	1091da04 	addi	r2,r2,18280
   22530:	200b883a 	mov	r5,r4
   22534:	11000017 	ldw	r4,0(r2)
   22538:	00224c81 	jmpi	224c8 <_fflush_r>
   2253c:	008000b4 	movhi	r2,2
   22540:	1091d904 	addi	r2,r2,18276
   22544:	11000017 	ldw	r4,0(r2)
   22548:	014000b4 	movhi	r5,2
   2254c:	29493204 	addi	r5,r5,9416
   22550:	0020b2c1 	jmpi	20b2c <_fwalk_reent>

00022554 <_malloc_trim_r>:
   22554:	defffb04 	addi	sp,sp,-20
   22558:	dcc00315 	stw	r19,12(sp)
   2255c:	04c000b4 	movhi	r19,2
   22560:	dc800215 	stw	r18,8(sp)
   22564:	dc400115 	stw	r17,4(sp)
   22568:	dc000015 	stw	r16,0(sp)
   2256c:	dfc00415 	stw	ra,16(sp)
   22570:	2821883a 	mov	r16,r5
   22574:	9cd06d04 	addi	r19,r19,16820
   22578:	2025883a 	mov	r18,r4
   2257c:	00234180 	call	23418 <__malloc_lock>
   22580:	98800217 	ldw	r2,8(r19)
   22584:	14400117 	ldw	r17,4(r2)
   22588:	00bfff04 	movi	r2,-4
   2258c:	88a2703a 	and	r17,r17,r2
   22590:	8c21c83a 	sub	r16,r17,r16
   22594:	8403fbc4 	addi	r16,r16,4079
   22598:	8020d33a 	srli	r16,r16,12
   2259c:	0083ffc4 	movi	r2,4095
   225a0:	843fffc4 	addi	r16,r16,-1
   225a4:	8020933a 	slli	r16,r16,12
   225a8:	1400060e 	bge	r2,r16,225c4 <_malloc_trim_r+0x70>
   225ac:	000b883a 	mov	r5,zero
   225b0:	9009883a 	mov	r4,r18
   225b4:	0021e100 	call	21e10 <_sbrk_r>
   225b8:	98c00217 	ldw	r3,8(r19)
   225bc:	1c47883a 	add	r3,r3,r17
   225c0:	10c00a26 	beq	r2,r3,225ec <_malloc_trim_r+0x98>
   225c4:	9009883a 	mov	r4,r18
   225c8:	002343c0 	call	2343c <__malloc_unlock>
   225cc:	0005883a 	mov	r2,zero
   225d0:	dfc00417 	ldw	ra,16(sp)
   225d4:	dcc00317 	ldw	r19,12(sp)
   225d8:	dc800217 	ldw	r18,8(sp)
   225dc:	dc400117 	ldw	r17,4(sp)
   225e0:	dc000017 	ldw	r16,0(sp)
   225e4:	dec00504 	addi	sp,sp,20
   225e8:	f800283a 	ret
   225ec:	040bc83a 	sub	r5,zero,r16
   225f0:	9009883a 	mov	r4,r18
   225f4:	0021e100 	call	21e10 <_sbrk_r>
   225f8:	00ffffc4 	movi	r3,-1
   225fc:	10c00d26 	beq	r2,r3,22634 <_malloc_trim_r+0xe0>
   22600:	00c000b4 	movhi	r3,2
   22604:	18d46b04 	addi	r3,r3,20908
   22608:	18800017 	ldw	r2,0(r3)
   2260c:	99000217 	ldw	r4,8(r19)
   22610:	8c23c83a 	sub	r17,r17,r16
   22614:	8c400054 	ori	r17,r17,1
   22618:	1421c83a 	sub	r16,r2,r16
   2261c:	24400115 	stw	r17,4(r4)
   22620:	9009883a 	mov	r4,r18
   22624:	1c000015 	stw	r16,0(r3)
   22628:	002343c0 	call	2343c <__malloc_unlock>
   2262c:	00800044 	movi	r2,1
   22630:	003fe706 	br	225d0 <__alt_data_end+0xfffe25d0>
   22634:	000b883a 	mov	r5,zero
   22638:	9009883a 	mov	r4,r18
   2263c:	0021e100 	call	21e10 <_sbrk_r>
   22640:	99000217 	ldw	r4,8(r19)
   22644:	014003c4 	movi	r5,15
   22648:	1107c83a 	sub	r3,r2,r4
   2264c:	28ffdd0e 	bge	r5,r3,225c4 <__alt_data_end+0xfffe25c4>
   22650:	014000b4 	movhi	r5,2
   22654:	2951db04 	addi	r5,r5,18284
   22658:	29400017 	ldw	r5,0(r5)
   2265c:	18c00054 	ori	r3,r3,1
   22660:	20c00115 	stw	r3,4(r4)
   22664:	00c000b4 	movhi	r3,2
   22668:	1145c83a 	sub	r2,r2,r5
   2266c:	18d46b04 	addi	r3,r3,20908
   22670:	18800015 	stw	r2,0(r3)
   22674:	003fd306 	br	225c4 <__alt_data_end+0xfffe25c4>

00022678 <_free_r>:
   22678:	28004126 	beq	r5,zero,22780 <_free_r+0x108>
   2267c:	defffd04 	addi	sp,sp,-12
   22680:	dc400115 	stw	r17,4(sp)
   22684:	dc000015 	stw	r16,0(sp)
   22688:	2023883a 	mov	r17,r4
   2268c:	2821883a 	mov	r16,r5
   22690:	dfc00215 	stw	ra,8(sp)
   22694:	00234180 	call	23418 <__malloc_lock>
   22698:	81ffff17 	ldw	r7,-4(r16)
   2269c:	00bfff84 	movi	r2,-2
   226a0:	010000b4 	movhi	r4,2
   226a4:	81bffe04 	addi	r6,r16,-8
   226a8:	3884703a 	and	r2,r7,r2
   226ac:	21106d04 	addi	r4,r4,16820
   226b0:	308b883a 	add	r5,r6,r2
   226b4:	2a400117 	ldw	r9,4(r5)
   226b8:	22000217 	ldw	r8,8(r4)
   226bc:	00ffff04 	movi	r3,-4
   226c0:	48c6703a 	and	r3,r9,r3
   226c4:	2a005726 	beq	r5,r8,22824 <_free_r+0x1ac>
   226c8:	28c00115 	stw	r3,4(r5)
   226cc:	39c0004c 	andi	r7,r7,1
   226d0:	3800091e 	bne	r7,zero,226f8 <_free_r+0x80>
   226d4:	823ffe17 	ldw	r8,-8(r16)
   226d8:	22400204 	addi	r9,r4,8
   226dc:	320dc83a 	sub	r6,r6,r8
   226e0:	31c00217 	ldw	r7,8(r6)
   226e4:	1205883a 	add	r2,r2,r8
   226e8:	3a406526 	beq	r7,r9,22880 <_free_r+0x208>
   226ec:	32000317 	ldw	r8,12(r6)
   226f0:	3a000315 	stw	r8,12(r7)
   226f4:	41c00215 	stw	r7,8(r8)
   226f8:	28cf883a 	add	r7,r5,r3
   226fc:	39c00117 	ldw	r7,4(r7)
   22700:	39c0004c 	andi	r7,r7,1
   22704:	38003a26 	beq	r7,zero,227f0 <_free_r+0x178>
   22708:	10c00054 	ori	r3,r2,1
   2270c:	30c00115 	stw	r3,4(r6)
   22710:	3087883a 	add	r3,r6,r2
   22714:	18800015 	stw	r2,0(r3)
   22718:	00c07fc4 	movi	r3,511
   2271c:	18801936 	bltu	r3,r2,22784 <_free_r+0x10c>
   22720:	1004d0fa 	srli	r2,r2,3
   22724:	01c00044 	movi	r7,1
   22728:	21400117 	ldw	r5,4(r4)
   2272c:	10c00044 	addi	r3,r2,1
   22730:	18c7883a 	add	r3,r3,r3
   22734:	1005d0ba 	srai	r2,r2,2
   22738:	18c7883a 	add	r3,r3,r3
   2273c:	18c7883a 	add	r3,r3,r3
   22740:	1907883a 	add	r3,r3,r4
   22744:	3884983a 	sll	r2,r7,r2
   22748:	19c00017 	ldw	r7,0(r3)
   2274c:	1a3ffe04 	addi	r8,r3,-8
   22750:	1144b03a 	or	r2,r2,r5
   22754:	32000315 	stw	r8,12(r6)
   22758:	31c00215 	stw	r7,8(r6)
   2275c:	20800115 	stw	r2,4(r4)
   22760:	19800015 	stw	r6,0(r3)
   22764:	39800315 	stw	r6,12(r7)
   22768:	8809883a 	mov	r4,r17
   2276c:	dfc00217 	ldw	ra,8(sp)
   22770:	dc400117 	ldw	r17,4(sp)
   22774:	dc000017 	ldw	r16,0(sp)
   22778:	dec00304 	addi	sp,sp,12
   2277c:	002343c1 	jmpi	2343c <__malloc_unlock>
   22780:	f800283a 	ret
   22784:	100ad27a 	srli	r5,r2,9
   22788:	00c00104 	movi	r3,4
   2278c:	19404a36 	bltu	r3,r5,228b8 <_free_r+0x240>
   22790:	100ad1ba 	srli	r5,r2,6
   22794:	28c00e44 	addi	r3,r5,57
   22798:	18c7883a 	add	r3,r3,r3
   2279c:	29400e04 	addi	r5,r5,56
   227a0:	18c7883a 	add	r3,r3,r3
   227a4:	18c7883a 	add	r3,r3,r3
   227a8:	1909883a 	add	r4,r3,r4
   227ac:	20c00017 	ldw	r3,0(r4)
   227b0:	01c000b4 	movhi	r7,2
   227b4:	213ffe04 	addi	r4,r4,-8
   227b8:	39d06d04 	addi	r7,r7,16820
   227bc:	20c04426 	beq	r4,r3,228d0 <_free_r+0x258>
   227c0:	01ffff04 	movi	r7,-4
   227c4:	19400117 	ldw	r5,4(r3)
   227c8:	29ca703a 	and	r5,r5,r7
   227cc:	1140022e 	bgeu	r2,r5,227d8 <_free_r+0x160>
   227d0:	18c00217 	ldw	r3,8(r3)
   227d4:	20fffb1e 	bne	r4,r3,227c4 <__alt_data_end+0xfffe27c4>
   227d8:	19000317 	ldw	r4,12(r3)
   227dc:	31000315 	stw	r4,12(r6)
   227e0:	30c00215 	stw	r3,8(r6)
   227e4:	21800215 	stw	r6,8(r4)
   227e8:	19800315 	stw	r6,12(r3)
   227ec:	003fde06 	br	22768 <__alt_data_end+0xfffe2768>
   227f0:	29c00217 	ldw	r7,8(r5)
   227f4:	10c5883a 	add	r2,r2,r3
   227f8:	00c000b4 	movhi	r3,2
   227fc:	18d06f04 	addi	r3,r3,16828
   22800:	38c03b26 	beq	r7,r3,228f0 <_free_r+0x278>
   22804:	2a000317 	ldw	r8,12(r5)
   22808:	11400054 	ori	r5,r2,1
   2280c:	3087883a 	add	r3,r6,r2
   22810:	3a000315 	stw	r8,12(r7)
   22814:	41c00215 	stw	r7,8(r8)
   22818:	31400115 	stw	r5,4(r6)
   2281c:	18800015 	stw	r2,0(r3)
   22820:	003fbd06 	br	22718 <__alt_data_end+0xfffe2718>
   22824:	39c0004c 	andi	r7,r7,1
   22828:	10c5883a 	add	r2,r2,r3
   2282c:	3800071e 	bne	r7,zero,2284c <_free_r+0x1d4>
   22830:	81fffe17 	ldw	r7,-8(r16)
   22834:	31cdc83a 	sub	r6,r6,r7
   22838:	30c00317 	ldw	r3,12(r6)
   2283c:	31400217 	ldw	r5,8(r6)
   22840:	11c5883a 	add	r2,r2,r7
   22844:	28c00315 	stw	r3,12(r5)
   22848:	19400215 	stw	r5,8(r3)
   2284c:	10c00054 	ori	r3,r2,1
   22850:	30c00115 	stw	r3,4(r6)
   22854:	00c000b4 	movhi	r3,2
   22858:	18d1dc04 	addi	r3,r3,18288
   2285c:	18c00017 	ldw	r3,0(r3)
   22860:	21800215 	stw	r6,8(r4)
   22864:	10ffc036 	bltu	r2,r3,22768 <__alt_data_end+0xfffe2768>
   22868:	008000b4 	movhi	r2,2
   2286c:	10946604 	addi	r2,r2,20888
   22870:	11400017 	ldw	r5,0(r2)
   22874:	8809883a 	mov	r4,r17
   22878:	00225540 	call	22554 <_malloc_trim_r>
   2287c:	003fba06 	br	22768 <__alt_data_end+0xfffe2768>
   22880:	28c9883a 	add	r4,r5,r3
   22884:	21000117 	ldw	r4,4(r4)
   22888:	2100004c 	andi	r4,r4,1
   2288c:	2000391e 	bne	r4,zero,22974 <_free_r+0x2fc>
   22890:	29c00217 	ldw	r7,8(r5)
   22894:	29000317 	ldw	r4,12(r5)
   22898:	1885883a 	add	r2,r3,r2
   2289c:	10c00054 	ori	r3,r2,1
   228a0:	39000315 	stw	r4,12(r7)
   228a4:	21c00215 	stw	r7,8(r4)
   228a8:	30c00115 	stw	r3,4(r6)
   228ac:	308d883a 	add	r6,r6,r2
   228b0:	30800015 	stw	r2,0(r6)
   228b4:	003fac06 	br	22768 <__alt_data_end+0xfffe2768>
   228b8:	00c00504 	movi	r3,20
   228bc:	19401536 	bltu	r3,r5,22914 <_free_r+0x29c>
   228c0:	28c01704 	addi	r3,r5,92
   228c4:	18c7883a 	add	r3,r3,r3
   228c8:	294016c4 	addi	r5,r5,91
   228cc:	003fb406 	br	227a0 <__alt_data_end+0xfffe27a0>
   228d0:	280bd0ba 	srai	r5,r5,2
   228d4:	00c00044 	movi	r3,1
   228d8:	38800117 	ldw	r2,4(r7)
   228dc:	194a983a 	sll	r5,r3,r5
   228e0:	2007883a 	mov	r3,r4
   228e4:	2884b03a 	or	r2,r5,r2
   228e8:	38800115 	stw	r2,4(r7)
   228ec:	003fbb06 	br	227dc <__alt_data_end+0xfffe27dc>
   228f0:	21800515 	stw	r6,20(r4)
   228f4:	21800415 	stw	r6,16(r4)
   228f8:	10c00054 	ori	r3,r2,1
   228fc:	31c00315 	stw	r7,12(r6)
   22900:	31c00215 	stw	r7,8(r6)
   22904:	30c00115 	stw	r3,4(r6)
   22908:	308d883a 	add	r6,r6,r2
   2290c:	30800015 	stw	r2,0(r6)
   22910:	003f9506 	br	22768 <__alt_data_end+0xfffe2768>
   22914:	00c01504 	movi	r3,84
   22918:	19400536 	bltu	r3,r5,22930 <_free_r+0x2b8>
   2291c:	100ad33a 	srli	r5,r2,12
   22920:	28c01bc4 	addi	r3,r5,111
   22924:	18c7883a 	add	r3,r3,r3
   22928:	29401b84 	addi	r5,r5,110
   2292c:	003f9c06 	br	227a0 <__alt_data_end+0xfffe27a0>
   22930:	00c05504 	movi	r3,340
   22934:	19400536 	bltu	r3,r5,2294c <_free_r+0x2d4>
   22938:	100ad3fa 	srli	r5,r2,15
   2293c:	28c01e04 	addi	r3,r5,120
   22940:	18c7883a 	add	r3,r3,r3
   22944:	29401dc4 	addi	r5,r5,119
   22948:	003f9506 	br	227a0 <__alt_data_end+0xfffe27a0>
   2294c:	00c15504 	movi	r3,1364
   22950:	19400536 	bltu	r3,r5,22968 <_free_r+0x2f0>
   22954:	100ad4ba 	srli	r5,r2,18
   22958:	28c01f44 	addi	r3,r5,125
   2295c:	18c7883a 	add	r3,r3,r3
   22960:	29401f04 	addi	r5,r5,124
   22964:	003f8e06 	br	227a0 <__alt_data_end+0xfffe27a0>
   22968:	00c03f84 	movi	r3,254
   2296c:	01401f84 	movi	r5,126
   22970:	003f8b06 	br	227a0 <__alt_data_end+0xfffe27a0>
   22974:	10c00054 	ori	r3,r2,1
   22978:	30c00115 	stw	r3,4(r6)
   2297c:	308d883a 	add	r6,r6,r2
   22980:	30800015 	stw	r2,0(r6)
   22984:	003f7806 	br	22768 <__alt_data_end+0xfffe2768>

00022988 <_lseek_r>:
   22988:	defffd04 	addi	sp,sp,-12
   2298c:	2805883a 	mov	r2,r5
   22990:	dc000015 	stw	r16,0(sp)
   22994:	040000b4 	movhi	r16,2
   22998:	dc400115 	stw	r17,4(sp)
   2299c:	300b883a 	mov	r5,r6
   229a0:	84146704 	addi	r16,r16,20892
   229a4:	2023883a 	mov	r17,r4
   229a8:	380d883a 	mov	r6,r7
   229ac:	1009883a 	mov	r4,r2
   229b0:	dfc00215 	stw	ra,8(sp)
   229b4:	80000015 	stw	zero,0(r16)
   229b8:	00232e40 	call	232e4 <lseek>
   229bc:	00ffffc4 	movi	r3,-1
   229c0:	10c00526 	beq	r2,r3,229d8 <_lseek_r+0x50>
   229c4:	dfc00217 	ldw	ra,8(sp)
   229c8:	dc400117 	ldw	r17,4(sp)
   229cc:	dc000017 	ldw	r16,0(sp)
   229d0:	dec00304 	addi	sp,sp,12
   229d4:	f800283a 	ret
   229d8:	80c00017 	ldw	r3,0(r16)
   229dc:	183ff926 	beq	r3,zero,229c4 <__alt_data_end+0xfffe29c4>
   229e0:	88c00015 	stw	r3,0(r17)
   229e4:	003ff706 	br	229c4 <__alt_data_end+0xfffe29c4>

000229e8 <__smakebuf_r>:
   229e8:	2880030b 	ldhu	r2,12(r5)
   229ec:	10c0008c 	andi	r3,r2,2
   229f0:	1800411e 	bne	r3,zero,22af8 <__smakebuf_r+0x110>
   229f4:	deffec04 	addi	sp,sp,-80
   229f8:	dc000f15 	stw	r16,60(sp)
   229fc:	2821883a 	mov	r16,r5
   22a00:	2940038f 	ldh	r5,14(r5)
   22a04:	dc401015 	stw	r17,64(sp)
   22a08:	dfc01315 	stw	ra,76(sp)
   22a0c:	dcc01215 	stw	r19,72(sp)
   22a10:	dc801115 	stw	r18,68(sp)
   22a14:	2023883a 	mov	r17,r4
   22a18:	28001c16 	blt	r5,zero,22a8c <__smakebuf_r+0xa4>
   22a1c:	d80d883a 	mov	r6,sp
   22a20:	0022c040 	call	22c04 <_fstat_r>
   22a24:	10001816 	blt	r2,zero,22a88 <__smakebuf_r+0xa0>
   22a28:	d8800117 	ldw	r2,4(sp)
   22a2c:	00e00014 	movui	r3,32768
   22a30:	10bc000c 	andi	r2,r2,61440
   22a34:	14c80020 	cmpeqi	r19,r2,8192
   22a38:	10c03726 	beq	r2,r3,22b18 <__smakebuf_r+0x130>
   22a3c:	80c0030b 	ldhu	r3,12(r16)
   22a40:	18c20014 	ori	r3,r3,2048
   22a44:	80c0030d 	sth	r3,12(r16)
   22a48:	00c80004 	movi	r3,8192
   22a4c:	10c0521e 	bne	r2,r3,22b98 <__smakebuf_r+0x1b0>
   22a50:	8140038f 	ldh	r5,14(r16)
   22a54:	8809883a 	mov	r4,r17
   22a58:	0022c600 	call	22c60 <_isatty_r>
   22a5c:	10004c26 	beq	r2,zero,22b90 <__smakebuf_r+0x1a8>
   22a60:	8080030b 	ldhu	r2,12(r16)
   22a64:	80c010c4 	addi	r3,r16,67
   22a68:	80c00015 	stw	r3,0(r16)
   22a6c:	10800054 	ori	r2,r2,1
   22a70:	8080030d 	sth	r2,12(r16)
   22a74:	00800044 	movi	r2,1
   22a78:	80c00415 	stw	r3,16(r16)
   22a7c:	80800515 	stw	r2,20(r16)
   22a80:	04810004 	movi	r18,1024
   22a84:	00000706 	br	22aa4 <__smakebuf_r+0xbc>
   22a88:	8080030b 	ldhu	r2,12(r16)
   22a8c:	10c0200c 	andi	r3,r2,128
   22a90:	18001f1e 	bne	r3,zero,22b10 <__smakebuf_r+0x128>
   22a94:	04810004 	movi	r18,1024
   22a98:	10820014 	ori	r2,r2,2048
   22a9c:	8080030d 	sth	r2,12(r16)
   22aa0:	0027883a 	mov	r19,zero
   22aa4:	900b883a 	mov	r5,r18
   22aa8:	8809883a 	mov	r4,r17
   22aac:	0020bf00 	call	20bf0 <_malloc_r>
   22ab0:	10002c26 	beq	r2,zero,22b64 <__smakebuf_r+0x17c>
   22ab4:	80c0030b 	ldhu	r3,12(r16)
   22ab8:	010000b4 	movhi	r4,2
   22abc:	21008504 	addi	r4,r4,532
   22ac0:	89000f15 	stw	r4,60(r17)
   22ac4:	18c02014 	ori	r3,r3,128
   22ac8:	80c0030d 	sth	r3,12(r16)
   22acc:	80800015 	stw	r2,0(r16)
   22ad0:	80800415 	stw	r2,16(r16)
   22ad4:	84800515 	stw	r18,20(r16)
   22ad8:	98001a1e 	bne	r19,zero,22b44 <__smakebuf_r+0x15c>
   22adc:	dfc01317 	ldw	ra,76(sp)
   22ae0:	dcc01217 	ldw	r19,72(sp)
   22ae4:	dc801117 	ldw	r18,68(sp)
   22ae8:	dc401017 	ldw	r17,64(sp)
   22aec:	dc000f17 	ldw	r16,60(sp)
   22af0:	dec01404 	addi	sp,sp,80
   22af4:	f800283a 	ret
   22af8:	288010c4 	addi	r2,r5,67
   22afc:	28800015 	stw	r2,0(r5)
   22b00:	28800415 	stw	r2,16(r5)
   22b04:	00800044 	movi	r2,1
   22b08:	28800515 	stw	r2,20(r5)
   22b0c:	f800283a 	ret
   22b10:	04801004 	movi	r18,64
   22b14:	003fe006 	br	22a98 <__alt_data_end+0xfffe2a98>
   22b18:	81000a17 	ldw	r4,40(r16)
   22b1c:	00c000b4 	movhi	r3,2
   22b20:	18c7cf04 	addi	r3,r3,7996
   22b24:	20ffc51e 	bne	r4,r3,22a3c <__alt_data_end+0xfffe2a3c>
   22b28:	8080030b 	ldhu	r2,12(r16)
   22b2c:	04810004 	movi	r18,1024
   22b30:	84801315 	stw	r18,76(r16)
   22b34:	1484b03a 	or	r2,r2,r18
   22b38:	8080030d 	sth	r2,12(r16)
   22b3c:	0027883a 	mov	r19,zero
   22b40:	003fd806 	br	22aa4 <__alt_data_end+0xfffe2aa4>
   22b44:	8140038f 	ldh	r5,14(r16)
   22b48:	8809883a 	mov	r4,r17
   22b4c:	0022c600 	call	22c60 <_isatty_r>
   22b50:	103fe226 	beq	r2,zero,22adc <__alt_data_end+0xfffe2adc>
   22b54:	8080030b 	ldhu	r2,12(r16)
   22b58:	10800054 	ori	r2,r2,1
   22b5c:	8080030d 	sth	r2,12(r16)
   22b60:	003fde06 	br	22adc <__alt_data_end+0xfffe2adc>
   22b64:	8080030b 	ldhu	r2,12(r16)
   22b68:	10c0800c 	andi	r3,r2,512
   22b6c:	183fdb1e 	bne	r3,zero,22adc <__alt_data_end+0xfffe2adc>
   22b70:	10800094 	ori	r2,r2,2
   22b74:	80c010c4 	addi	r3,r16,67
   22b78:	8080030d 	sth	r2,12(r16)
   22b7c:	00800044 	movi	r2,1
   22b80:	80c00015 	stw	r3,0(r16)
   22b84:	80c00415 	stw	r3,16(r16)
   22b88:	80800515 	stw	r2,20(r16)
   22b8c:	003fd306 	br	22adc <__alt_data_end+0xfffe2adc>
   22b90:	04810004 	movi	r18,1024
   22b94:	003fc306 	br	22aa4 <__alt_data_end+0xfffe2aa4>
   22b98:	0027883a 	mov	r19,zero
   22b9c:	04810004 	movi	r18,1024
   22ba0:	003fc006 	br	22aa4 <__alt_data_end+0xfffe2aa4>

00022ba4 <_read_r>:
   22ba4:	defffd04 	addi	sp,sp,-12
   22ba8:	2805883a 	mov	r2,r5
   22bac:	dc000015 	stw	r16,0(sp)
   22bb0:	040000b4 	movhi	r16,2
   22bb4:	dc400115 	stw	r17,4(sp)
   22bb8:	300b883a 	mov	r5,r6
   22bbc:	84146704 	addi	r16,r16,20892
   22bc0:	2023883a 	mov	r17,r4
   22bc4:	380d883a 	mov	r6,r7
   22bc8:	1009883a 	mov	r4,r2
   22bcc:	dfc00215 	stw	ra,8(sp)
   22bd0:	80000015 	stw	zero,0(r16)
   22bd4:	00234b00 	call	234b0 <read>
   22bd8:	00ffffc4 	movi	r3,-1
   22bdc:	10c00526 	beq	r2,r3,22bf4 <_read_r+0x50>
   22be0:	dfc00217 	ldw	ra,8(sp)
   22be4:	dc400117 	ldw	r17,4(sp)
   22be8:	dc000017 	ldw	r16,0(sp)
   22bec:	dec00304 	addi	sp,sp,12
   22bf0:	f800283a 	ret
   22bf4:	80c00017 	ldw	r3,0(r16)
   22bf8:	183ff926 	beq	r3,zero,22be0 <__alt_data_end+0xfffe2be0>
   22bfc:	88c00015 	stw	r3,0(r17)
   22c00:	003ff706 	br	22be0 <__alt_data_end+0xfffe2be0>

00022c04 <_fstat_r>:
   22c04:	defffd04 	addi	sp,sp,-12
   22c08:	2805883a 	mov	r2,r5
   22c0c:	dc000015 	stw	r16,0(sp)
   22c10:	040000b4 	movhi	r16,2
   22c14:	dc400115 	stw	r17,4(sp)
   22c18:	84146704 	addi	r16,r16,20892
   22c1c:	2023883a 	mov	r17,r4
   22c20:	300b883a 	mov	r5,r6
   22c24:	1009883a 	mov	r4,r2
   22c28:	dfc00215 	stw	ra,8(sp)
   22c2c:	80000015 	stw	zero,0(r16)
   22c30:	00230040 	call	23004 <fstat>
   22c34:	00ffffc4 	movi	r3,-1
   22c38:	10c00526 	beq	r2,r3,22c50 <_fstat_r+0x4c>
   22c3c:	dfc00217 	ldw	ra,8(sp)
   22c40:	dc400117 	ldw	r17,4(sp)
   22c44:	dc000017 	ldw	r16,0(sp)
   22c48:	dec00304 	addi	sp,sp,12
   22c4c:	f800283a 	ret
   22c50:	80c00017 	ldw	r3,0(r16)
   22c54:	183ff926 	beq	r3,zero,22c3c <__alt_data_end+0xfffe2c3c>
   22c58:	88c00015 	stw	r3,0(r17)
   22c5c:	003ff706 	br	22c3c <__alt_data_end+0xfffe2c3c>

00022c60 <_isatty_r>:
   22c60:	defffd04 	addi	sp,sp,-12
   22c64:	dc000015 	stw	r16,0(sp)
   22c68:	040000b4 	movhi	r16,2
   22c6c:	dc400115 	stw	r17,4(sp)
   22c70:	84146704 	addi	r16,r16,20892
   22c74:	2023883a 	mov	r17,r4
   22c78:	2809883a 	mov	r4,r5
   22c7c:	dfc00215 	stw	ra,8(sp)
   22c80:	80000015 	stw	zero,0(r16)
   22c84:	00231040 	call	23104 <isatty>
   22c88:	00ffffc4 	movi	r3,-1
   22c8c:	10c00526 	beq	r2,r3,22ca4 <_isatty_r+0x44>
   22c90:	dfc00217 	ldw	ra,8(sp)
   22c94:	dc400117 	ldw	r17,4(sp)
   22c98:	dc000017 	ldw	r16,0(sp)
   22c9c:	dec00304 	addi	sp,sp,12
   22ca0:	f800283a 	ret
   22ca4:	80c00017 	ldw	r3,0(r16)
   22ca8:	183ff926 	beq	r3,zero,22c90 <__alt_data_end+0xfffe2c90>
   22cac:	88c00015 	stw	r3,0(r17)
   22cb0:	003ff706 	br	22c90 <__alt_data_end+0xfffe2c90>

00022cb4 <__divsi3>:
   22cb4:	20001b16 	blt	r4,zero,22d24 <__divsi3+0x70>
   22cb8:	000f883a 	mov	r7,zero
   22cbc:	28001616 	blt	r5,zero,22d18 <__divsi3+0x64>
   22cc0:	200d883a 	mov	r6,r4
   22cc4:	29001a2e 	bgeu	r5,r4,22d30 <__divsi3+0x7c>
   22cc8:	00800804 	movi	r2,32
   22ccc:	00c00044 	movi	r3,1
   22cd0:	00000106 	br	22cd8 <__divsi3+0x24>
   22cd4:	10000d26 	beq	r2,zero,22d0c <__divsi3+0x58>
   22cd8:	294b883a 	add	r5,r5,r5
   22cdc:	10bfffc4 	addi	r2,r2,-1
   22ce0:	18c7883a 	add	r3,r3,r3
   22ce4:	293ffb36 	bltu	r5,r4,22cd4 <__alt_data_end+0xfffe2cd4>
   22ce8:	0005883a 	mov	r2,zero
   22cec:	18000726 	beq	r3,zero,22d0c <__divsi3+0x58>
   22cf0:	0005883a 	mov	r2,zero
   22cf4:	31400236 	bltu	r6,r5,22d00 <__divsi3+0x4c>
   22cf8:	314dc83a 	sub	r6,r6,r5
   22cfc:	10c4b03a 	or	r2,r2,r3
   22d00:	1806d07a 	srli	r3,r3,1
   22d04:	280ad07a 	srli	r5,r5,1
   22d08:	183ffa1e 	bne	r3,zero,22cf4 <__alt_data_end+0xfffe2cf4>
   22d0c:	38000126 	beq	r7,zero,22d14 <__divsi3+0x60>
   22d10:	0085c83a 	sub	r2,zero,r2
   22d14:	f800283a 	ret
   22d18:	014bc83a 	sub	r5,zero,r5
   22d1c:	39c0005c 	xori	r7,r7,1
   22d20:	003fe706 	br	22cc0 <__alt_data_end+0xfffe2cc0>
   22d24:	0109c83a 	sub	r4,zero,r4
   22d28:	01c00044 	movi	r7,1
   22d2c:	003fe306 	br	22cbc <__alt_data_end+0xfffe2cbc>
   22d30:	00c00044 	movi	r3,1
   22d34:	003fee06 	br	22cf0 <__alt_data_end+0xfffe2cf0>

00022d38 <__modsi3>:
   22d38:	20001716 	blt	r4,zero,22d98 <__modsi3+0x60>
   22d3c:	000f883a 	mov	r7,zero
   22d40:	2005883a 	mov	r2,r4
   22d44:	28001216 	blt	r5,zero,22d90 <__modsi3+0x58>
   22d48:	2900162e 	bgeu	r5,r4,22da4 <__modsi3+0x6c>
   22d4c:	01800804 	movi	r6,32
   22d50:	00c00044 	movi	r3,1
   22d54:	00000106 	br	22d5c <__modsi3+0x24>
   22d58:	30000a26 	beq	r6,zero,22d84 <__modsi3+0x4c>
   22d5c:	294b883a 	add	r5,r5,r5
   22d60:	31bfffc4 	addi	r6,r6,-1
   22d64:	18c7883a 	add	r3,r3,r3
   22d68:	293ffb36 	bltu	r5,r4,22d58 <__alt_data_end+0xfffe2d58>
   22d6c:	18000526 	beq	r3,zero,22d84 <__modsi3+0x4c>
   22d70:	1806d07a 	srli	r3,r3,1
   22d74:	11400136 	bltu	r2,r5,22d7c <__modsi3+0x44>
   22d78:	1145c83a 	sub	r2,r2,r5
   22d7c:	280ad07a 	srli	r5,r5,1
   22d80:	183ffb1e 	bne	r3,zero,22d70 <__alt_data_end+0xfffe2d70>
   22d84:	38000126 	beq	r7,zero,22d8c <__modsi3+0x54>
   22d88:	0085c83a 	sub	r2,zero,r2
   22d8c:	f800283a 	ret
   22d90:	014bc83a 	sub	r5,zero,r5
   22d94:	003fec06 	br	22d48 <__alt_data_end+0xfffe2d48>
   22d98:	0109c83a 	sub	r4,zero,r4
   22d9c:	01c00044 	movi	r7,1
   22da0:	003fe706 	br	22d40 <__alt_data_end+0xfffe2d40>
   22da4:	00c00044 	movi	r3,1
   22da8:	003ff106 	br	22d70 <__alt_data_end+0xfffe2d70>

00022dac <__udivsi3>:
   22dac:	200d883a 	mov	r6,r4
   22db0:	2900152e 	bgeu	r5,r4,22e08 <__udivsi3+0x5c>
   22db4:	28001416 	blt	r5,zero,22e08 <__udivsi3+0x5c>
   22db8:	00800804 	movi	r2,32
   22dbc:	00c00044 	movi	r3,1
   22dc0:	00000206 	br	22dcc <__udivsi3+0x20>
   22dc4:	10000e26 	beq	r2,zero,22e00 <__udivsi3+0x54>
   22dc8:	28000516 	blt	r5,zero,22de0 <__udivsi3+0x34>
   22dcc:	294b883a 	add	r5,r5,r5
   22dd0:	10bfffc4 	addi	r2,r2,-1
   22dd4:	18c7883a 	add	r3,r3,r3
   22dd8:	293ffa36 	bltu	r5,r4,22dc4 <__alt_data_end+0xfffe2dc4>
   22ddc:	18000826 	beq	r3,zero,22e00 <__udivsi3+0x54>
   22de0:	0005883a 	mov	r2,zero
   22de4:	31400236 	bltu	r6,r5,22df0 <__udivsi3+0x44>
   22de8:	314dc83a 	sub	r6,r6,r5
   22dec:	10c4b03a 	or	r2,r2,r3
   22df0:	1806d07a 	srli	r3,r3,1
   22df4:	280ad07a 	srli	r5,r5,1
   22df8:	183ffa1e 	bne	r3,zero,22de4 <__alt_data_end+0xfffe2de4>
   22dfc:	f800283a 	ret
   22e00:	0005883a 	mov	r2,zero
   22e04:	f800283a 	ret
   22e08:	00c00044 	movi	r3,1
   22e0c:	003ff406 	br	22de0 <__alt_data_end+0xfffe2de0>

00022e10 <__umodsi3>:
   22e10:	2005883a 	mov	r2,r4
   22e14:	2900122e 	bgeu	r5,r4,22e60 <__umodsi3+0x50>
   22e18:	28001116 	blt	r5,zero,22e60 <__umodsi3+0x50>
   22e1c:	01800804 	movi	r6,32
   22e20:	00c00044 	movi	r3,1
   22e24:	00000206 	br	22e30 <__umodsi3+0x20>
   22e28:	30000c26 	beq	r6,zero,22e5c <__umodsi3+0x4c>
   22e2c:	28000516 	blt	r5,zero,22e44 <__umodsi3+0x34>
   22e30:	294b883a 	add	r5,r5,r5
   22e34:	31bfffc4 	addi	r6,r6,-1
   22e38:	18c7883a 	add	r3,r3,r3
   22e3c:	293ffa36 	bltu	r5,r4,22e28 <__alt_data_end+0xfffe2e28>
   22e40:	18000626 	beq	r3,zero,22e5c <__umodsi3+0x4c>
   22e44:	1806d07a 	srli	r3,r3,1
   22e48:	11400136 	bltu	r2,r5,22e50 <__umodsi3+0x40>
   22e4c:	1145c83a 	sub	r2,r2,r5
   22e50:	280ad07a 	srli	r5,r5,1
   22e54:	183ffb1e 	bne	r3,zero,22e44 <__alt_data_end+0xfffe2e44>
   22e58:	f800283a 	ret
   22e5c:	f800283a 	ret
   22e60:	00c00044 	movi	r3,1
   22e64:	003ff706 	br	22e44 <__alt_data_end+0xfffe2e44>

00022e68 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   22e68:	defffe04 	addi	sp,sp,-8
   22e6c:	dfc00115 	stw	ra,4(sp)
   22e70:	df000015 	stw	fp,0(sp)
   22e74:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   22e78:	008000b4 	movhi	r2,2
   22e7c:	1091e204 	addi	r2,r2,18312
   22e80:	10800017 	ldw	r2,0(r2)
   22e84:	10000526 	beq	r2,zero,22e9c <alt_get_errno+0x34>
   22e88:	008000b4 	movhi	r2,2
   22e8c:	1091e204 	addi	r2,r2,18312
   22e90:	10800017 	ldw	r2,0(r2)
   22e94:	103ee83a 	callr	r2
   22e98:	00000206 	br	22ea4 <alt_get_errno+0x3c>
   22e9c:	008000b4 	movhi	r2,2
   22ea0:	10946704 	addi	r2,r2,20892
}
   22ea4:	e037883a 	mov	sp,fp
   22ea8:	dfc00117 	ldw	ra,4(sp)
   22eac:	df000017 	ldw	fp,0(sp)
   22eb0:	dec00204 	addi	sp,sp,8
   22eb4:	f800283a 	ret

00022eb8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   22eb8:	defffb04 	addi	sp,sp,-20
   22ebc:	dfc00415 	stw	ra,16(sp)
   22ec0:	df000315 	stw	fp,12(sp)
   22ec4:	df000304 	addi	fp,sp,12
   22ec8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   22ecc:	e0bfff17 	ldw	r2,-4(fp)
   22ed0:	10000616 	blt	r2,zero,22eec <close+0x34>
   22ed4:	e0bfff17 	ldw	r2,-4(fp)
   22ed8:	10c00324 	muli	r3,r2,12
   22edc:	008000b4 	movhi	r2,2
   22ee0:	10917904 	addi	r2,r2,17892
   22ee4:	1885883a 	add	r2,r3,r2
   22ee8:	00000106 	br	22ef0 <close+0x38>
   22eec:	0005883a 	mov	r2,zero
   22ef0:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   22ef4:	e0bffd17 	ldw	r2,-12(fp)
   22ef8:	10001926 	beq	r2,zero,22f60 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   22efc:	e0bffd17 	ldw	r2,-12(fp)
   22f00:	10800017 	ldw	r2,0(r2)
   22f04:	10800417 	ldw	r2,16(r2)
   22f08:	10000626 	beq	r2,zero,22f24 <close+0x6c>
   22f0c:	e0bffd17 	ldw	r2,-12(fp)
   22f10:	10800017 	ldw	r2,0(r2)
   22f14:	10800417 	ldw	r2,16(r2)
   22f18:	e13ffd17 	ldw	r4,-12(fp)
   22f1c:	103ee83a 	callr	r2
   22f20:	00000106 	br	22f28 <close+0x70>
   22f24:	0005883a 	mov	r2,zero
   22f28:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   22f2c:	e13fff17 	ldw	r4,-4(fp)
   22f30:	00235ac0 	call	235ac <alt_release_fd>
    if (rval < 0)
   22f34:	e0bffe17 	ldw	r2,-8(fp)
   22f38:	1000070e 	bge	r2,zero,22f58 <close+0xa0>
    {
      ALT_ERRNO = -rval;
   22f3c:	0022e680 	call	22e68 <alt_get_errno>
   22f40:	1007883a 	mov	r3,r2
   22f44:	e0bffe17 	ldw	r2,-8(fp)
   22f48:	0085c83a 	sub	r2,zero,r2
   22f4c:	18800015 	stw	r2,0(r3)
      return -1;
   22f50:	00bfffc4 	movi	r2,-1
   22f54:	00000706 	br	22f74 <close+0xbc>
    }
    return 0;
   22f58:	0005883a 	mov	r2,zero
   22f5c:	00000506 	br	22f74 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   22f60:	0022e680 	call	22e68 <alt_get_errno>
   22f64:	1007883a 	mov	r3,r2
   22f68:	00801444 	movi	r2,81
   22f6c:	18800015 	stw	r2,0(r3)
    return -1;
   22f70:	00bfffc4 	movi	r2,-1
  }
}
   22f74:	e037883a 	mov	sp,fp
   22f78:	dfc00117 	ldw	ra,4(sp)
   22f7c:	df000017 	ldw	fp,0(sp)
   22f80:	dec00204 	addi	sp,sp,8
   22f84:	f800283a 	ret

00022f88 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   22f88:	defffc04 	addi	sp,sp,-16
   22f8c:	df000315 	stw	fp,12(sp)
   22f90:	df000304 	addi	fp,sp,12
   22f94:	e13ffd15 	stw	r4,-12(fp)
   22f98:	e17ffe15 	stw	r5,-8(fp)
   22f9c:	e1bfff15 	stw	r6,-4(fp)
  return len;
   22fa0:	e0bfff17 	ldw	r2,-4(fp)
}
   22fa4:	e037883a 	mov	sp,fp
   22fa8:	df000017 	ldw	fp,0(sp)
   22fac:	dec00104 	addi	sp,sp,4
   22fb0:	f800283a 	ret

00022fb4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   22fb4:	defffe04 	addi	sp,sp,-8
   22fb8:	dfc00115 	stw	ra,4(sp)
   22fbc:	df000015 	stw	fp,0(sp)
   22fc0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   22fc4:	008000b4 	movhi	r2,2
   22fc8:	1091e204 	addi	r2,r2,18312
   22fcc:	10800017 	ldw	r2,0(r2)
   22fd0:	10000526 	beq	r2,zero,22fe8 <alt_get_errno+0x34>
   22fd4:	008000b4 	movhi	r2,2
   22fd8:	1091e204 	addi	r2,r2,18312
   22fdc:	10800017 	ldw	r2,0(r2)
   22fe0:	103ee83a 	callr	r2
   22fe4:	00000206 	br	22ff0 <alt_get_errno+0x3c>
   22fe8:	008000b4 	movhi	r2,2
   22fec:	10946704 	addi	r2,r2,20892
}
   22ff0:	e037883a 	mov	sp,fp
   22ff4:	dfc00117 	ldw	ra,4(sp)
   22ff8:	df000017 	ldw	fp,0(sp)
   22ffc:	dec00204 	addi	sp,sp,8
   23000:	f800283a 	ret

00023004 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   23004:	defffb04 	addi	sp,sp,-20
   23008:	dfc00415 	stw	ra,16(sp)
   2300c:	df000315 	stw	fp,12(sp)
   23010:	df000304 	addi	fp,sp,12
   23014:	e13ffe15 	stw	r4,-8(fp)
   23018:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2301c:	e0bffe17 	ldw	r2,-8(fp)
   23020:	10000616 	blt	r2,zero,2303c <fstat+0x38>
   23024:	e0bffe17 	ldw	r2,-8(fp)
   23028:	10c00324 	muli	r3,r2,12
   2302c:	008000b4 	movhi	r2,2
   23030:	10917904 	addi	r2,r2,17892
   23034:	1885883a 	add	r2,r3,r2
   23038:	00000106 	br	23040 <fstat+0x3c>
   2303c:	0005883a 	mov	r2,zero
   23040:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   23044:	e0bffd17 	ldw	r2,-12(fp)
   23048:	10001026 	beq	r2,zero,2308c <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   2304c:	e0bffd17 	ldw	r2,-12(fp)
   23050:	10800017 	ldw	r2,0(r2)
   23054:	10800817 	ldw	r2,32(r2)
   23058:	10000726 	beq	r2,zero,23078 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
   2305c:	e0bffd17 	ldw	r2,-12(fp)
   23060:	10800017 	ldw	r2,0(r2)
   23064:	10800817 	ldw	r2,32(r2)
   23068:	e17fff17 	ldw	r5,-4(fp)
   2306c:	e13ffd17 	ldw	r4,-12(fp)
   23070:	103ee83a 	callr	r2
   23074:	00000a06 	br	230a0 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   23078:	e0bfff17 	ldw	r2,-4(fp)
   2307c:	00c80004 	movi	r3,8192
   23080:	10c00115 	stw	r3,4(r2)
      return 0;
   23084:	0005883a 	mov	r2,zero
   23088:	00000506 	br	230a0 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   2308c:	0022fb40 	call	22fb4 <alt_get_errno>
   23090:	1007883a 	mov	r3,r2
   23094:	00801444 	movi	r2,81
   23098:	18800015 	stw	r2,0(r3)
    return -1;
   2309c:	00bfffc4 	movi	r2,-1
  }
}
   230a0:	e037883a 	mov	sp,fp
   230a4:	dfc00117 	ldw	ra,4(sp)
   230a8:	df000017 	ldw	fp,0(sp)
   230ac:	dec00204 	addi	sp,sp,8
   230b0:	f800283a 	ret

000230b4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   230b4:	defffe04 	addi	sp,sp,-8
   230b8:	dfc00115 	stw	ra,4(sp)
   230bc:	df000015 	stw	fp,0(sp)
   230c0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   230c4:	008000b4 	movhi	r2,2
   230c8:	1091e204 	addi	r2,r2,18312
   230cc:	10800017 	ldw	r2,0(r2)
   230d0:	10000526 	beq	r2,zero,230e8 <alt_get_errno+0x34>
   230d4:	008000b4 	movhi	r2,2
   230d8:	1091e204 	addi	r2,r2,18312
   230dc:	10800017 	ldw	r2,0(r2)
   230e0:	103ee83a 	callr	r2
   230e4:	00000206 	br	230f0 <alt_get_errno+0x3c>
   230e8:	008000b4 	movhi	r2,2
   230ec:	10946704 	addi	r2,r2,20892
}
   230f0:	e037883a 	mov	sp,fp
   230f4:	dfc00117 	ldw	ra,4(sp)
   230f8:	df000017 	ldw	fp,0(sp)
   230fc:	dec00204 	addi	sp,sp,8
   23100:	f800283a 	ret

00023104 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   23104:	deffed04 	addi	sp,sp,-76
   23108:	dfc01215 	stw	ra,72(sp)
   2310c:	df001115 	stw	fp,68(sp)
   23110:	df001104 	addi	fp,sp,68
   23114:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   23118:	e0bfff17 	ldw	r2,-4(fp)
   2311c:	10000616 	blt	r2,zero,23138 <isatty+0x34>
   23120:	e0bfff17 	ldw	r2,-4(fp)
   23124:	10c00324 	muli	r3,r2,12
   23128:	008000b4 	movhi	r2,2
   2312c:	10917904 	addi	r2,r2,17892
   23130:	1885883a 	add	r2,r3,r2
   23134:	00000106 	br	2313c <isatty+0x38>
   23138:	0005883a 	mov	r2,zero
   2313c:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   23140:	e0bfef17 	ldw	r2,-68(fp)
   23144:	10000e26 	beq	r2,zero,23180 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   23148:	e0bfef17 	ldw	r2,-68(fp)
   2314c:	10800017 	ldw	r2,0(r2)
   23150:	10800817 	ldw	r2,32(r2)
   23154:	1000021e 	bne	r2,zero,23160 <isatty+0x5c>
    {
      return 1;
   23158:	00800044 	movi	r2,1
   2315c:	00000d06 	br	23194 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   23160:	e0bff004 	addi	r2,fp,-64
   23164:	100b883a 	mov	r5,r2
   23168:	e13fff17 	ldw	r4,-4(fp)
   2316c:	00230040 	call	23004 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   23170:	e0bff117 	ldw	r2,-60(fp)
   23174:	10880020 	cmpeqi	r2,r2,8192
   23178:	10803fcc 	andi	r2,r2,255
   2317c:	00000506 	br	23194 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   23180:	00230b40 	call	230b4 <alt_get_errno>
   23184:	1007883a 	mov	r3,r2
   23188:	00801444 	movi	r2,81
   2318c:	18800015 	stw	r2,0(r3)
    return 0;
   23190:	0005883a 	mov	r2,zero
  }
}
   23194:	e037883a 	mov	sp,fp
   23198:	dfc00117 	ldw	ra,4(sp)
   2319c:	df000017 	ldw	fp,0(sp)
   231a0:	dec00204 	addi	sp,sp,8
   231a4:	f800283a 	ret

000231a8 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   231a8:	defffc04 	addi	sp,sp,-16
   231ac:	df000315 	stw	fp,12(sp)
   231b0:	df000304 	addi	fp,sp,12
   231b4:	e13ffd15 	stw	r4,-12(fp)
   231b8:	e17ffe15 	stw	r5,-8(fp)
   231bc:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   231c0:	e0fffe17 	ldw	r3,-8(fp)
   231c4:	e0bffd17 	ldw	r2,-12(fp)
   231c8:	18800c26 	beq	r3,r2,231fc <alt_load_section+0x54>
  {
    while( to != end )
   231cc:	00000806 	br	231f0 <alt_load_section+0x48>
    {
      *to++ = *from++;
   231d0:	e0bffe17 	ldw	r2,-8(fp)
   231d4:	10c00104 	addi	r3,r2,4
   231d8:	e0fffe15 	stw	r3,-8(fp)
   231dc:	e0fffd17 	ldw	r3,-12(fp)
   231e0:	19000104 	addi	r4,r3,4
   231e4:	e13ffd15 	stw	r4,-12(fp)
   231e8:	18c00017 	ldw	r3,0(r3)
   231ec:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   231f0:	e0fffe17 	ldw	r3,-8(fp)
   231f4:	e0bfff17 	ldw	r2,-4(fp)
   231f8:	18bff51e 	bne	r3,r2,231d0 <__alt_data_end+0xfffe31d0>
    {
      *to++ = *from++;
    }
  }
}
   231fc:	0001883a 	nop
   23200:	e037883a 	mov	sp,fp
   23204:	df000017 	ldw	fp,0(sp)
   23208:	dec00104 	addi	sp,sp,4
   2320c:	f800283a 	ret

00023210 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   23210:	defffe04 	addi	sp,sp,-8
   23214:	dfc00115 	stw	ra,4(sp)
   23218:	df000015 	stw	fp,0(sp)
   2321c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   23220:	018000b4 	movhi	r6,2
   23224:	3191e404 	addi	r6,r6,18320
   23228:	014000b4 	movhi	r5,2
   2322c:	294f6404 	addi	r5,r5,15760
   23230:	010000b4 	movhi	r4,2
   23234:	2111e404 	addi	r4,r4,18320
   23238:	00231a80 	call	231a8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   2323c:	018000b4 	movhi	r6,2
   23240:	31800804 	addi	r6,r6,32
   23244:	014000b4 	movhi	r5,2
   23248:	29400804 	addi	r5,r5,32
   2324c:	010000b4 	movhi	r4,2
   23250:	21000804 	addi	r4,r4,32
   23254:	00231a80 	call	231a8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   23258:	018000b4 	movhi	r6,2
   2325c:	318f6404 	addi	r6,r6,15760
   23260:	014000b4 	movhi	r5,2
   23264:	294f5a04 	addi	r5,r5,15720
   23268:	010000b4 	movhi	r4,2
   2326c:	210f5a04 	addi	r4,r4,15720
   23270:	00231a80 	call	231a8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   23274:	00238600 	call	23860 <alt_dcache_flush_all>
  alt_icache_flush_all();
   23278:	00239680 	call	23968 <alt_icache_flush_all>
}
   2327c:	0001883a 	nop
   23280:	e037883a 	mov	sp,fp
   23284:	dfc00117 	ldw	ra,4(sp)
   23288:	df000017 	ldw	fp,0(sp)
   2328c:	dec00204 	addi	sp,sp,8
   23290:	f800283a 	ret

00023294 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   23294:	defffe04 	addi	sp,sp,-8
   23298:	dfc00115 	stw	ra,4(sp)
   2329c:	df000015 	stw	fp,0(sp)
   232a0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   232a4:	008000b4 	movhi	r2,2
   232a8:	1091e204 	addi	r2,r2,18312
   232ac:	10800017 	ldw	r2,0(r2)
   232b0:	10000526 	beq	r2,zero,232c8 <alt_get_errno+0x34>
   232b4:	008000b4 	movhi	r2,2
   232b8:	1091e204 	addi	r2,r2,18312
   232bc:	10800017 	ldw	r2,0(r2)
   232c0:	103ee83a 	callr	r2
   232c4:	00000206 	br	232d0 <alt_get_errno+0x3c>
   232c8:	008000b4 	movhi	r2,2
   232cc:	10946704 	addi	r2,r2,20892
}
   232d0:	e037883a 	mov	sp,fp
   232d4:	dfc00117 	ldw	ra,4(sp)
   232d8:	df000017 	ldw	fp,0(sp)
   232dc:	dec00204 	addi	sp,sp,8
   232e0:	f800283a 	ret

000232e4 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   232e4:	defff904 	addi	sp,sp,-28
   232e8:	dfc00615 	stw	ra,24(sp)
   232ec:	df000515 	stw	fp,20(sp)
   232f0:	df000504 	addi	fp,sp,20
   232f4:	e13ffd15 	stw	r4,-12(fp)
   232f8:	e17ffe15 	stw	r5,-8(fp)
   232fc:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   23300:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   23304:	e0bffd17 	ldw	r2,-12(fp)
   23308:	10000616 	blt	r2,zero,23324 <lseek+0x40>
   2330c:	e0bffd17 	ldw	r2,-12(fp)
   23310:	10c00324 	muli	r3,r2,12
   23314:	008000b4 	movhi	r2,2
   23318:	10917904 	addi	r2,r2,17892
   2331c:	1885883a 	add	r2,r3,r2
   23320:	00000106 	br	23328 <lseek+0x44>
   23324:	0005883a 	mov	r2,zero
   23328:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   2332c:	e0bffc17 	ldw	r2,-16(fp)
   23330:	10001026 	beq	r2,zero,23374 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   23334:	e0bffc17 	ldw	r2,-16(fp)
   23338:	10800017 	ldw	r2,0(r2)
   2333c:	10800717 	ldw	r2,28(r2)
   23340:	10000926 	beq	r2,zero,23368 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   23344:	e0bffc17 	ldw	r2,-16(fp)
   23348:	10800017 	ldw	r2,0(r2)
   2334c:	10800717 	ldw	r2,28(r2)
   23350:	e1bfff17 	ldw	r6,-4(fp)
   23354:	e17ffe17 	ldw	r5,-8(fp)
   23358:	e13ffc17 	ldw	r4,-16(fp)
   2335c:	103ee83a 	callr	r2
   23360:	e0bffb15 	stw	r2,-20(fp)
   23364:	00000506 	br	2337c <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   23368:	00bfde84 	movi	r2,-134
   2336c:	e0bffb15 	stw	r2,-20(fp)
   23370:	00000206 	br	2337c <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
   23374:	00bfebc4 	movi	r2,-81
   23378:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   2337c:	e0bffb17 	ldw	r2,-20(fp)
   23380:	1000070e 	bge	r2,zero,233a0 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
   23384:	00232940 	call	23294 <alt_get_errno>
   23388:	1007883a 	mov	r3,r2
   2338c:	e0bffb17 	ldw	r2,-20(fp)
   23390:	0085c83a 	sub	r2,zero,r2
   23394:	18800015 	stw	r2,0(r3)
    rc = -1;
   23398:	00bfffc4 	movi	r2,-1
   2339c:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   233a0:	e0bffb17 	ldw	r2,-20(fp)
}
   233a4:	e037883a 	mov	sp,fp
   233a8:	dfc00117 	ldw	ra,4(sp)
   233ac:	df000017 	ldw	fp,0(sp)
   233b0:	dec00204 	addi	sp,sp,8
   233b4:	f800283a 	ret

000233b8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   233b8:	defffd04 	addi	sp,sp,-12
   233bc:	dfc00215 	stw	ra,8(sp)
   233c0:	df000115 	stw	fp,4(sp)
   233c4:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   233c8:	0009883a 	mov	r4,zero
   233cc:	00238080 	call	23808 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   233d0:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   233d4:	00238400 	call	23840 <alt_sys_init>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   233d8:	00238a80 	call	238a8 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   233dc:	010000b4 	movhi	r4,2
   233e0:	210e4204 	addi	r4,r4,14600
   233e4:	0023a500 	call	23a50 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   233e8:	d0a28f17 	ldw	r2,-30148(gp)
   233ec:	d0e29017 	ldw	r3,-30144(gp)
   233f0:	d1229117 	ldw	r4,-30140(gp)
   233f4:	200d883a 	mov	r6,r4
   233f8:	180b883a 	mov	r5,r3
   233fc:	1009883a 	mov	r4,r2
   23400:	002006c0 	call	2006c <main>
   23404:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   23408:	01000044 	movi	r4,1
   2340c:	0022eb80 	call	22eb8 <close>
  exit (result);
   23410:	e13fff17 	ldw	r4,-4(fp)
   23414:	0023a640 	call	23a64 <exit>

00023418 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   23418:	defffe04 	addi	sp,sp,-8
   2341c:	df000115 	stw	fp,4(sp)
   23420:	df000104 	addi	fp,sp,4
   23424:	e13fff15 	stw	r4,-4(fp)
}
   23428:	0001883a 	nop
   2342c:	e037883a 	mov	sp,fp
   23430:	df000017 	ldw	fp,0(sp)
   23434:	dec00104 	addi	sp,sp,4
   23438:	f800283a 	ret

0002343c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   2343c:	defffe04 	addi	sp,sp,-8
   23440:	df000115 	stw	fp,4(sp)
   23444:	df000104 	addi	fp,sp,4
   23448:	e13fff15 	stw	r4,-4(fp)
}
   2344c:	0001883a 	nop
   23450:	e037883a 	mov	sp,fp
   23454:	df000017 	ldw	fp,0(sp)
   23458:	dec00104 	addi	sp,sp,4
   2345c:	f800283a 	ret

00023460 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   23460:	defffe04 	addi	sp,sp,-8
   23464:	dfc00115 	stw	ra,4(sp)
   23468:	df000015 	stw	fp,0(sp)
   2346c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   23470:	008000b4 	movhi	r2,2
   23474:	1091e204 	addi	r2,r2,18312
   23478:	10800017 	ldw	r2,0(r2)
   2347c:	10000526 	beq	r2,zero,23494 <alt_get_errno+0x34>
   23480:	008000b4 	movhi	r2,2
   23484:	1091e204 	addi	r2,r2,18312
   23488:	10800017 	ldw	r2,0(r2)
   2348c:	103ee83a 	callr	r2
   23490:	00000206 	br	2349c <alt_get_errno+0x3c>
   23494:	008000b4 	movhi	r2,2
   23498:	10946704 	addi	r2,r2,20892
}
   2349c:	e037883a 	mov	sp,fp
   234a0:	dfc00117 	ldw	ra,4(sp)
   234a4:	df000017 	ldw	fp,0(sp)
   234a8:	dec00204 	addi	sp,sp,8
   234ac:	f800283a 	ret

000234b0 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   234b0:	defff904 	addi	sp,sp,-28
   234b4:	dfc00615 	stw	ra,24(sp)
   234b8:	df000515 	stw	fp,20(sp)
   234bc:	df000504 	addi	fp,sp,20
   234c0:	e13ffd15 	stw	r4,-12(fp)
   234c4:	e17ffe15 	stw	r5,-8(fp)
   234c8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   234cc:	e0bffd17 	ldw	r2,-12(fp)
   234d0:	10000616 	blt	r2,zero,234ec <read+0x3c>
   234d4:	e0bffd17 	ldw	r2,-12(fp)
   234d8:	10c00324 	muli	r3,r2,12
   234dc:	008000b4 	movhi	r2,2
   234e0:	10917904 	addi	r2,r2,17892
   234e4:	1885883a 	add	r2,r3,r2
   234e8:	00000106 	br	234f0 <read+0x40>
   234ec:	0005883a 	mov	r2,zero
   234f0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   234f4:	e0bffb17 	ldw	r2,-20(fp)
   234f8:	10002226 	beq	r2,zero,23584 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   234fc:	e0bffb17 	ldw	r2,-20(fp)
   23500:	10800217 	ldw	r2,8(r2)
   23504:	108000cc 	andi	r2,r2,3
   23508:	10800060 	cmpeqi	r2,r2,1
   2350c:	1000181e 	bne	r2,zero,23570 <read+0xc0>
        (fd->dev->read))
   23510:	e0bffb17 	ldw	r2,-20(fp)
   23514:	10800017 	ldw	r2,0(r2)
   23518:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   2351c:	10001426 	beq	r2,zero,23570 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   23520:	e0bffb17 	ldw	r2,-20(fp)
   23524:	10800017 	ldw	r2,0(r2)
   23528:	10800517 	ldw	r2,20(r2)
   2352c:	e0ffff17 	ldw	r3,-4(fp)
   23530:	180d883a 	mov	r6,r3
   23534:	e17ffe17 	ldw	r5,-8(fp)
   23538:	e13ffb17 	ldw	r4,-20(fp)
   2353c:	103ee83a 	callr	r2
   23540:	e0bffc15 	stw	r2,-16(fp)
   23544:	e0bffc17 	ldw	r2,-16(fp)
   23548:	1000070e 	bge	r2,zero,23568 <read+0xb8>
        {
          ALT_ERRNO = -rval;
   2354c:	00234600 	call	23460 <alt_get_errno>
   23550:	1007883a 	mov	r3,r2
   23554:	e0bffc17 	ldw	r2,-16(fp)
   23558:	0085c83a 	sub	r2,zero,r2
   2355c:	18800015 	stw	r2,0(r3)
          return -1;
   23560:	00bfffc4 	movi	r2,-1
   23564:	00000c06 	br	23598 <read+0xe8>
        }
        return rval;
   23568:	e0bffc17 	ldw	r2,-16(fp)
   2356c:	00000a06 	br	23598 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
   23570:	00234600 	call	23460 <alt_get_errno>
   23574:	1007883a 	mov	r3,r2
   23578:	00800344 	movi	r2,13
   2357c:	18800015 	stw	r2,0(r3)
   23580:	00000406 	br	23594 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   23584:	00234600 	call	23460 <alt_get_errno>
   23588:	1007883a 	mov	r3,r2
   2358c:	00801444 	movi	r2,81
   23590:	18800015 	stw	r2,0(r3)
  }
  return -1;
   23594:	00bfffc4 	movi	r2,-1
}
   23598:	e037883a 	mov	sp,fp
   2359c:	dfc00117 	ldw	ra,4(sp)
   235a0:	df000017 	ldw	fp,0(sp)
   235a4:	dec00204 	addi	sp,sp,8
   235a8:	f800283a 	ret

000235ac <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   235ac:	defffe04 	addi	sp,sp,-8
   235b0:	df000115 	stw	fp,4(sp)
   235b4:	df000104 	addi	fp,sp,4
   235b8:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   235bc:	e0bfff17 	ldw	r2,-4(fp)
   235c0:	108000d0 	cmplti	r2,r2,3
   235c4:	10000d1e 	bne	r2,zero,235fc <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   235c8:	008000b4 	movhi	r2,2
   235cc:	10917904 	addi	r2,r2,17892
   235d0:	e0ffff17 	ldw	r3,-4(fp)
   235d4:	18c00324 	muli	r3,r3,12
   235d8:	10c5883a 	add	r2,r2,r3
   235dc:	10800204 	addi	r2,r2,8
   235e0:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   235e4:	008000b4 	movhi	r2,2
   235e8:	10917904 	addi	r2,r2,17892
   235ec:	e0ffff17 	ldw	r3,-4(fp)
   235f0:	18c00324 	muli	r3,r3,12
   235f4:	10c5883a 	add	r2,r2,r3
   235f8:	10000015 	stw	zero,0(r2)
  }
}
   235fc:	0001883a 	nop
   23600:	e037883a 	mov	sp,fp
   23604:	df000017 	ldw	fp,0(sp)
   23608:	dec00104 	addi	sp,sp,4
   2360c:	f800283a 	ret

00023610 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   23610:	defff904 	addi	sp,sp,-28
   23614:	df000615 	stw	fp,24(sp)
   23618:	df000604 	addi	fp,sp,24
   2361c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   23620:	0005303a 	rdctl	r2,status
   23624:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   23628:	e0fffe17 	ldw	r3,-8(fp)
   2362c:	00bfff84 	movi	r2,-2
   23630:	1884703a 	and	r2,r3,r2
   23634:	1001703a 	wrctl	status,r2
  
  return context;
   23638:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   2363c:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   23640:	d0a00a17 	ldw	r2,-32728(gp)
   23644:	10c000c4 	addi	r3,r2,3
   23648:	00bfff04 	movi	r2,-4
   2364c:	1884703a 	and	r2,r3,r2
   23650:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   23654:	d0e00a17 	ldw	r3,-32728(gp)
   23658:	e0bfff17 	ldw	r2,-4(fp)
   2365c:	1887883a 	add	r3,r3,r2
   23660:	00800134 	movhi	r2,4
   23664:	10800004 	addi	r2,r2,0
   23668:	10c0062e 	bgeu	r2,r3,23684 <sbrk+0x74>
   2366c:	e0bffb17 	ldw	r2,-20(fp)
   23670:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   23674:	e0bffa17 	ldw	r2,-24(fp)
   23678:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   2367c:	00bfffc4 	movi	r2,-1
   23680:	00000b06 	br	236b0 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   23684:	d0a00a17 	ldw	r2,-32728(gp)
   23688:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   2368c:	d0e00a17 	ldw	r3,-32728(gp)
   23690:	e0bfff17 	ldw	r2,-4(fp)
   23694:	1885883a 	add	r2,r3,r2
   23698:	d0a00a15 	stw	r2,-32728(gp)
   2369c:	e0bffb17 	ldw	r2,-20(fp)
   236a0:	e0bffc15 	stw	r2,-16(fp)
   236a4:	e0bffc17 	ldw	r2,-16(fp)
   236a8:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   236ac:	e0bffd17 	ldw	r2,-12(fp)
} 
   236b0:	e037883a 	mov	sp,fp
   236b4:	df000017 	ldw	fp,0(sp)
   236b8:	dec00104 	addi	sp,sp,4
   236bc:	f800283a 	ret

000236c0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   236c0:	defffe04 	addi	sp,sp,-8
   236c4:	dfc00115 	stw	ra,4(sp)
   236c8:	df000015 	stw	fp,0(sp)
   236cc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   236d0:	008000b4 	movhi	r2,2
   236d4:	1091e204 	addi	r2,r2,18312
   236d8:	10800017 	ldw	r2,0(r2)
   236dc:	10000526 	beq	r2,zero,236f4 <alt_get_errno+0x34>
   236e0:	008000b4 	movhi	r2,2
   236e4:	1091e204 	addi	r2,r2,18312
   236e8:	10800017 	ldw	r2,0(r2)
   236ec:	103ee83a 	callr	r2
   236f0:	00000206 	br	236fc <alt_get_errno+0x3c>
   236f4:	008000b4 	movhi	r2,2
   236f8:	10946704 	addi	r2,r2,20892
}
   236fc:	e037883a 	mov	sp,fp
   23700:	dfc00117 	ldw	ra,4(sp)
   23704:	df000017 	ldw	fp,0(sp)
   23708:	dec00204 	addi	sp,sp,8
   2370c:	f800283a 	ret

00023710 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   23710:	defff904 	addi	sp,sp,-28
   23714:	dfc00615 	stw	ra,24(sp)
   23718:	df000515 	stw	fp,20(sp)
   2371c:	df000504 	addi	fp,sp,20
   23720:	e13ffd15 	stw	r4,-12(fp)
   23724:	e17ffe15 	stw	r5,-8(fp)
   23728:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2372c:	e0bffd17 	ldw	r2,-12(fp)
   23730:	10000616 	blt	r2,zero,2374c <write+0x3c>
   23734:	e0bffd17 	ldw	r2,-12(fp)
   23738:	10c00324 	muli	r3,r2,12
   2373c:	008000b4 	movhi	r2,2
   23740:	10917904 	addi	r2,r2,17892
   23744:	1885883a 	add	r2,r3,r2
   23748:	00000106 	br	23750 <write+0x40>
   2374c:	0005883a 	mov	r2,zero
   23750:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   23754:	e0bffb17 	ldw	r2,-20(fp)
   23758:	10002126 	beq	r2,zero,237e0 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   2375c:	e0bffb17 	ldw	r2,-20(fp)
   23760:	10800217 	ldw	r2,8(r2)
   23764:	108000cc 	andi	r2,r2,3
   23768:	10001826 	beq	r2,zero,237cc <write+0xbc>
   2376c:	e0bffb17 	ldw	r2,-20(fp)
   23770:	10800017 	ldw	r2,0(r2)
   23774:	10800617 	ldw	r2,24(r2)
   23778:	10001426 	beq	r2,zero,237cc <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   2377c:	e0bffb17 	ldw	r2,-20(fp)
   23780:	10800017 	ldw	r2,0(r2)
   23784:	10800617 	ldw	r2,24(r2)
   23788:	e0ffff17 	ldw	r3,-4(fp)
   2378c:	180d883a 	mov	r6,r3
   23790:	e17ffe17 	ldw	r5,-8(fp)
   23794:	e13ffb17 	ldw	r4,-20(fp)
   23798:	103ee83a 	callr	r2
   2379c:	e0bffc15 	stw	r2,-16(fp)
   237a0:	e0bffc17 	ldw	r2,-16(fp)
   237a4:	1000070e 	bge	r2,zero,237c4 <write+0xb4>
      {
        ALT_ERRNO = -rval;
   237a8:	00236c00 	call	236c0 <alt_get_errno>
   237ac:	1007883a 	mov	r3,r2
   237b0:	e0bffc17 	ldw	r2,-16(fp)
   237b4:	0085c83a 	sub	r2,zero,r2
   237b8:	18800015 	stw	r2,0(r3)
        return -1;
   237bc:	00bfffc4 	movi	r2,-1
   237c0:	00000c06 	br	237f4 <write+0xe4>
      }
      return rval;
   237c4:	e0bffc17 	ldw	r2,-16(fp)
   237c8:	00000a06 	br	237f4 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
   237cc:	00236c00 	call	236c0 <alt_get_errno>
   237d0:	1007883a 	mov	r3,r2
   237d4:	00800344 	movi	r2,13
   237d8:	18800015 	stw	r2,0(r3)
   237dc:	00000406 	br	237f0 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   237e0:	00236c00 	call	236c0 <alt_get_errno>
   237e4:	1007883a 	mov	r3,r2
   237e8:	00801444 	movi	r2,81
   237ec:	18800015 	stw	r2,0(r3)
  }
  return -1;
   237f0:	00bfffc4 	movi	r2,-1
}
   237f4:	e037883a 	mov	sp,fp
   237f8:	dfc00117 	ldw	ra,4(sp)
   237fc:	df000017 	ldw	fp,0(sp)
   23800:	dec00204 	addi	sp,sp,8
   23804:	f800283a 	ret

00023808 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   23808:	defffd04 	addi	sp,sp,-12
   2380c:	dfc00215 	stw	ra,8(sp)
   23810:	df000115 	stw	fp,4(sp)
   23814:	df000104 	addi	fp,sp,4
   23818:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
   2381c:	002399c0 	call	2399c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   23820:	00800044 	movi	r2,1
   23824:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   23828:	0001883a 	nop
   2382c:	e037883a 	mov	sp,fp
   23830:	dfc00117 	ldw	ra,4(sp)
   23834:	df000017 	ldw	fp,0(sp)
   23838:	dec00204 	addi	sp,sp,8
   2383c:	f800283a 	ret

00023840 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   23840:	deffff04 	addi	sp,sp,-4
   23844:	df000015 	stw	fp,0(sp)
   23848:	d839883a 	mov	fp,sp
}
   2384c:	0001883a 	nop
   23850:	e037883a 	mov	sp,fp
   23854:	df000017 	ldw	fp,0(sp)
   23858:	dec00104 	addi	sp,sp,4
   2385c:	f800283a 	ret

00023860 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   23860:	defffe04 	addi	sp,sp,-8
   23864:	df000115 	stw	fp,4(sp)
   23868:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   2386c:	e03fff15 	stw	zero,-4(fp)
   23870:	00000506 	br	23888 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   23874:	e0bfff17 	ldw	r2,-4(fp)
   23878:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   2387c:	e0bfff17 	ldw	r2,-4(fp)
   23880:	10800804 	addi	r2,r2,32
   23884:	e0bfff15 	stw	r2,-4(fp)
   23888:	e0bfff17 	ldw	r2,-4(fp)
   2388c:	10820030 	cmpltui	r2,r2,2048
   23890:	103ff81e 	bne	r2,zero,23874 <__alt_data_end+0xfffe3874>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   23894:	0001883a 	nop
   23898:	e037883a 	mov	sp,fp
   2389c:	df000017 	ldw	fp,0(sp)
   238a0:	dec00104 	addi	sp,sp,4
   238a4:	f800283a 	ret

000238a8 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   238a8:	defffd04 	addi	sp,sp,-12
   238ac:	dfc00215 	stw	ra,8(sp)
   238b0:	df000115 	stw	fp,4(sp)
   238b4:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   238b8:	008000b4 	movhi	r2,2
   238bc:	108f5904 	addi	r2,r2,15716
   238c0:	e0bfff15 	stw	r2,-4(fp)
   238c4:	00000606 	br	238e0 <_do_ctors+0x38>
        (*ctor) (); 
   238c8:	e0bfff17 	ldw	r2,-4(fp)
   238cc:	10800017 	ldw	r2,0(r2)
   238d0:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   238d4:	e0bfff17 	ldw	r2,-4(fp)
   238d8:	10bfff04 	addi	r2,r2,-4
   238dc:	e0bfff15 	stw	r2,-4(fp)
   238e0:	e0ffff17 	ldw	r3,-4(fp)
   238e4:	008000b4 	movhi	r2,2
   238e8:	108f5a04 	addi	r2,r2,15720
   238ec:	18bff62e 	bgeu	r3,r2,238c8 <__alt_data_end+0xfffe38c8>
        (*ctor) (); 
}
   238f0:	0001883a 	nop
   238f4:	e037883a 	mov	sp,fp
   238f8:	dfc00117 	ldw	ra,4(sp)
   238fc:	df000017 	ldw	fp,0(sp)
   23900:	dec00204 	addi	sp,sp,8
   23904:	f800283a 	ret

00023908 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   23908:	defffd04 	addi	sp,sp,-12
   2390c:	dfc00215 	stw	ra,8(sp)
   23910:	df000115 	stw	fp,4(sp)
   23914:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   23918:	008000b4 	movhi	r2,2
   2391c:	108f5904 	addi	r2,r2,15716
   23920:	e0bfff15 	stw	r2,-4(fp)
   23924:	00000606 	br	23940 <_do_dtors+0x38>
        (*dtor) (); 
   23928:	e0bfff17 	ldw	r2,-4(fp)
   2392c:	10800017 	ldw	r2,0(r2)
   23930:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   23934:	e0bfff17 	ldw	r2,-4(fp)
   23938:	10bfff04 	addi	r2,r2,-4
   2393c:	e0bfff15 	stw	r2,-4(fp)
   23940:	e0ffff17 	ldw	r3,-4(fp)
   23944:	008000b4 	movhi	r2,2
   23948:	108f5a04 	addi	r2,r2,15720
   2394c:	18bff62e 	bgeu	r3,r2,23928 <__alt_data_end+0xfffe3928>
        (*dtor) (); 
}
   23950:	0001883a 	nop
   23954:	e037883a 	mov	sp,fp
   23958:	dfc00117 	ldw	ra,4(sp)
   2395c:	df000017 	ldw	fp,0(sp)
   23960:	dec00204 	addi	sp,sp,8
   23964:	f800283a 	ret

00023968 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   23968:	defffe04 	addi	sp,sp,-8
   2396c:	dfc00115 	stw	ra,4(sp)
   23970:	df000015 	stw	fp,0(sp)
   23974:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   23978:	01440004 	movi	r5,4096
   2397c:	0009883a 	mov	r4,zero
   23980:	00239c00 	call	239c0 <alt_icache_flush>
#endif
}
   23984:	0001883a 	nop
   23988:	e037883a 	mov	sp,fp
   2398c:	dfc00117 	ldw	ra,4(sp)
   23990:	df000017 	ldw	fp,0(sp)
   23994:	dec00204 	addi	sp,sp,8
   23998:	f800283a 	ret

0002399c <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   2399c:	deffff04 	addi	sp,sp,-4
   239a0:	df000015 	stw	fp,0(sp)
   239a4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   239a8:	000170fa 	wrctl	ienable,zero
}
   239ac:	0001883a 	nop
   239b0:	e037883a 	mov	sp,fp
   239b4:	df000017 	ldw	fp,0(sp)
   239b8:	dec00104 	addi	sp,sp,4
   239bc:	f800283a 	ret

000239c0 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   239c0:	defffb04 	addi	sp,sp,-20
   239c4:	df000415 	stw	fp,16(sp)
   239c8:	df000404 	addi	fp,sp,16
   239cc:	e13ffe15 	stw	r4,-8(fp)
   239d0:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   239d4:	e0bfff17 	ldw	r2,-4(fp)
   239d8:	10840070 	cmpltui	r2,r2,4097
   239dc:	1000021e 	bne	r2,zero,239e8 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   239e0:	00840004 	movi	r2,4096
   239e4:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   239e8:	e0fffe17 	ldw	r3,-8(fp)
   239ec:	e0bfff17 	ldw	r2,-4(fp)
   239f0:	1885883a 	add	r2,r3,r2
   239f4:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   239f8:	e0bffe17 	ldw	r2,-8(fp)
   239fc:	e0bffc15 	stw	r2,-16(fp)
   23a00:	00000506 	br	23a18 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   23a04:	e0bffc17 	ldw	r2,-16(fp)
   23a08:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   23a0c:	e0bffc17 	ldw	r2,-16(fp)
   23a10:	10800804 	addi	r2,r2,32
   23a14:	e0bffc15 	stw	r2,-16(fp)
   23a18:	e0fffc17 	ldw	r3,-16(fp)
   23a1c:	e0bffd17 	ldw	r2,-12(fp)
   23a20:	18bff836 	bltu	r3,r2,23a04 <__alt_data_end+0xfffe3a04>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   23a24:	e0bffe17 	ldw	r2,-8(fp)
   23a28:	108007cc 	andi	r2,r2,31
   23a2c:	10000226 	beq	r2,zero,23a38 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   23a30:	e0bffc17 	ldw	r2,-16(fp)
   23a34:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   23a38:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   23a3c:	0001883a 	nop
   23a40:	e037883a 	mov	sp,fp
   23a44:	df000017 	ldw	fp,0(sp)
   23a48:	dec00104 	addi	sp,sp,4
   23a4c:	f800283a 	ret

00023a50 <atexit>:
   23a50:	200b883a 	mov	r5,r4
   23a54:	000f883a 	mov	r7,zero
   23a58:	000d883a 	mov	r6,zero
   23a5c:	0009883a 	mov	r4,zero
   23a60:	0023a9c1 	jmpi	23a9c <__register_exitproc>

00023a64 <exit>:
   23a64:	defffe04 	addi	sp,sp,-8
   23a68:	000b883a 	mov	r5,zero
   23a6c:	dc000015 	stw	r16,0(sp)
   23a70:	dfc00115 	stw	ra,4(sp)
   23a74:	2021883a 	mov	r16,r4
   23a78:	0023bb40 	call	23bb4 <__call_exitprocs>
   23a7c:	008000b4 	movhi	r2,2
   23a80:	1091d904 	addi	r2,r2,18276
   23a84:	11000017 	ldw	r4,0(r2)
   23a88:	20800f17 	ldw	r2,60(r4)
   23a8c:	10000126 	beq	r2,zero,23a94 <exit+0x30>
   23a90:	103ee83a 	callr	r2
   23a94:	8009883a 	mov	r4,r16
   23a98:	0023d340 	call	23d34 <_exit>

00023a9c <__register_exitproc>:
   23a9c:	defffa04 	addi	sp,sp,-24
   23aa0:	dc000315 	stw	r16,12(sp)
   23aa4:	040000b4 	movhi	r16,2
   23aa8:	8411d904 	addi	r16,r16,18276
   23aac:	80c00017 	ldw	r3,0(r16)
   23ab0:	dc400415 	stw	r17,16(sp)
   23ab4:	dfc00515 	stw	ra,20(sp)
   23ab8:	18805217 	ldw	r2,328(r3)
   23abc:	2023883a 	mov	r17,r4
   23ac0:	10003726 	beq	r2,zero,23ba0 <__register_exitproc+0x104>
   23ac4:	10c00117 	ldw	r3,4(r2)
   23ac8:	010007c4 	movi	r4,31
   23acc:	20c00e16 	blt	r4,r3,23b08 <__register_exitproc+0x6c>
   23ad0:	1a000044 	addi	r8,r3,1
   23ad4:	8800221e 	bne	r17,zero,23b60 <__register_exitproc+0xc4>
   23ad8:	18c00084 	addi	r3,r3,2
   23adc:	18c7883a 	add	r3,r3,r3
   23ae0:	18c7883a 	add	r3,r3,r3
   23ae4:	12000115 	stw	r8,4(r2)
   23ae8:	10c7883a 	add	r3,r2,r3
   23aec:	19400015 	stw	r5,0(r3)
   23af0:	0005883a 	mov	r2,zero
   23af4:	dfc00517 	ldw	ra,20(sp)
   23af8:	dc400417 	ldw	r17,16(sp)
   23afc:	dc000317 	ldw	r16,12(sp)
   23b00:	dec00604 	addi	sp,sp,24
   23b04:	f800283a 	ret
   23b08:	00800034 	movhi	r2,0
   23b0c:	10800004 	addi	r2,r2,0
   23b10:	10002626 	beq	r2,zero,23bac <__register_exitproc+0x110>
   23b14:	01006404 	movi	r4,400
   23b18:	d9400015 	stw	r5,0(sp)
   23b1c:	d9800115 	stw	r6,4(sp)
   23b20:	d9c00215 	stw	r7,8(sp)
   23b24:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x20000>
   23b28:	d9400017 	ldw	r5,0(sp)
   23b2c:	d9800117 	ldw	r6,4(sp)
   23b30:	d9c00217 	ldw	r7,8(sp)
   23b34:	10001d26 	beq	r2,zero,23bac <__register_exitproc+0x110>
   23b38:	81000017 	ldw	r4,0(r16)
   23b3c:	10000115 	stw	zero,4(r2)
   23b40:	02000044 	movi	r8,1
   23b44:	22405217 	ldw	r9,328(r4)
   23b48:	0007883a 	mov	r3,zero
   23b4c:	12400015 	stw	r9,0(r2)
   23b50:	20805215 	stw	r2,328(r4)
   23b54:	10006215 	stw	zero,392(r2)
   23b58:	10006315 	stw	zero,396(r2)
   23b5c:	883fde26 	beq	r17,zero,23ad8 <__alt_data_end+0xfffe3ad8>
   23b60:	18c9883a 	add	r4,r3,r3
   23b64:	2109883a 	add	r4,r4,r4
   23b68:	1109883a 	add	r4,r2,r4
   23b6c:	21802215 	stw	r6,136(r4)
   23b70:	01800044 	movi	r6,1
   23b74:	12406217 	ldw	r9,392(r2)
   23b78:	30cc983a 	sll	r6,r6,r3
   23b7c:	4992b03a 	or	r9,r9,r6
   23b80:	12406215 	stw	r9,392(r2)
   23b84:	21c04215 	stw	r7,264(r4)
   23b88:	01000084 	movi	r4,2
   23b8c:	893fd21e 	bne	r17,r4,23ad8 <__alt_data_end+0xfffe3ad8>
   23b90:	11006317 	ldw	r4,396(r2)
   23b94:	218cb03a 	or	r6,r4,r6
   23b98:	11806315 	stw	r6,396(r2)
   23b9c:	003fce06 	br	23ad8 <__alt_data_end+0xfffe3ad8>
   23ba0:	18805304 	addi	r2,r3,332
   23ba4:	18805215 	stw	r2,328(r3)
   23ba8:	003fc606 	br	23ac4 <__alt_data_end+0xfffe3ac4>
   23bac:	00bfffc4 	movi	r2,-1
   23bb0:	003fd006 	br	23af4 <__alt_data_end+0xfffe3af4>

00023bb4 <__call_exitprocs>:
   23bb4:	defff504 	addi	sp,sp,-44
   23bb8:	df000915 	stw	fp,36(sp)
   23bbc:	dd400615 	stw	r21,24(sp)
   23bc0:	dc800315 	stw	r18,12(sp)
   23bc4:	dfc00a15 	stw	ra,40(sp)
   23bc8:	ddc00815 	stw	r23,32(sp)
   23bcc:	dd800715 	stw	r22,28(sp)
   23bd0:	dd000515 	stw	r20,20(sp)
   23bd4:	dcc00415 	stw	r19,16(sp)
   23bd8:	dc400215 	stw	r17,8(sp)
   23bdc:	dc000115 	stw	r16,4(sp)
   23be0:	d9000015 	stw	r4,0(sp)
   23be4:	2839883a 	mov	fp,r5
   23be8:	04800044 	movi	r18,1
   23bec:	057fffc4 	movi	r21,-1
   23bf0:	008000b4 	movhi	r2,2
   23bf4:	1091d904 	addi	r2,r2,18276
   23bf8:	12000017 	ldw	r8,0(r2)
   23bfc:	45005217 	ldw	r20,328(r8)
   23c00:	44c05204 	addi	r19,r8,328
   23c04:	a0001c26 	beq	r20,zero,23c78 <__call_exitprocs+0xc4>
   23c08:	a0800117 	ldw	r2,4(r20)
   23c0c:	15ffffc4 	addi	r23,r2,-1
   23c10:	b8000d16 	blt	r23,zero,23c48 <__call_exitprocs+0x94>
   23c14:	14000044 	addi	r16,r2,1
   23c18:	8421883a 	add	r16,r16,r16
   23c1c:	8421883a 	add	r16,r16,r16
   23c20:	84402004 	addi	r17,r16,128
   23c24:	a463883a 	add	r17,r20,r17
   23c28:	a421883a 	add	r16,r20,r16
   23c2c:	e0001e26 	beq	fp,zero,23ca8 <__call_exitprocs+0xf4>
   23c30:	80804017 	ldw	r2,256(r16)
   23c34:	e0801c26 	beq	fp,r2,23ca8 <__call_exitprocs+0xf4>
   23c38:	bdffffc4 	addi	r23,r23,-1
   23c3c:	843fff04 	addi	r16,r16,-4
   23c40:	8c7fff04 	addi	r17,r17,-4
   23c44:	bd7ff91e 	bne	r23,r21,23c2c <__alt_data_end+0xfffe3c2c>
   23c48:	00800034 	movhi	r2,0
   23c4c:	10800004 	addi	r2,r2,0
   23c50:	10000926 	beq	r2,zero,23c78 <__call_exitprocs+0xc4>
   23c54:	a0800117 	ldw	r2,4(r20)
   23c58:	1000301e 	bne	r2,zero,23d1c <__call_exitprocs+0x168>
   23c5c:	a0800017 	ldw	r2,0(r20)
   23c60:	10003226 	beq	r2,zero,23d2c <__call_exitprocs+0x178>
   23c64:	a009883a 	mov	r4,r20
   23c68:	98800015 	stw	r2,0(r19)
   23c6c:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x20000>
   23c70:	9d000017 	ldw	r20,0(r19)
   23c74:	a03fe41e 	bne	r20,zero,23c08 <__alt_data_end+0xfffe3c08>
   23c78:	dfc00a17 	ldw	ra,40(sp)
   23c7c:	df000917 	ldw	fp,36(sp)
   23c80:	ddc00817 	ldw	r23,32(sp)
   23c84:	dd800717 	ldw	r22,28(sp)
   23c88:	dd400617 	ldw	r21,24(sp)
   23c8c:	dd000517 	ldw	r20,20(sp)
   23c90:	dcc00417 	ldw	r19,16(sp)
   23c94:	dc800317 	ldw	r18,12(sp)
   23c98:	dc400217 	ldw	r17,8(sp)
   23c9c:	dc000117 	ldw	r16,4(sp)
   23ca0:	dec00b04 	addi	sp,sp,44
   23ca4:	f800283a 	ret
   23ca8:	a0800117 	ldw	r2,4(r20)
   23cac:	80c00017 	ldw	r3,0(r16)
   23cb0:	10bfffc4 	addi	r2,r2,-1
   23cb4:	15c01426 	beq	r2,r23,23d08 <__call_exitprocs+0x154>
   23cb8:	80000015 	stw	zero,0(r16)
   23cbc:	183fde26 	beq	r3,zero,23c38 <__alt_data_end+0xfffe3c38>
   23cc0:	95c8983a 	sll	r4,r18,r23
   23cc4:	a0806217 	ldw	r2,392(r20)
   23cc8:	a5800117 	ldw	r22,4(r20)
   23ccc:	2084703a 	and	r2,r4,r2
   23cd0:	10000b26 	beq	r2,zero,23d00 <__call_exitprocs+0x14c>
   23cd4:	a0806317 	ldw	r2,396(r20)
   23cd8:	2088703a 	and	r4,r4,r2
   23cdc:	20000c1e 	bne	r4,zero,23d10 <__call_exitprocs+0x15c>
   23ce0:	89400017 	ldw	r5,0(r17)
   23ce4:	d9000017 	ldw	r4,0(sp)
   23ce8:	183ee83a 	callr	r3
   23cec:	a0800117 	ldw	r2,4(r20)
   23cf0:	15bfbf1e 	bne	r2,r22,23bf0 <__alt_data_end+0xfffe3bf0>
   23cf4:	98800017 	ldw	r2,0(r19)
   23cf8:	153fcf26 	beq	r2,r20,23c38 <__alt_data_end+0xfffe3c38>
   23cfc:	003fbc06 	br	23bf0 <__alt_data_end+0xfffe3bf0>
   23d00:	183ee83a 	callr	r3
   23d04:	003ff906 	br	23cec <__alt_data_end+0xfffe3cec>
   23d08:	a5c00115 	stw	r23,4(r20)
   23d0c:	003feb06 	br	23cbc <__alt_data_end+0xfffe3cbc>
   23d10:	89000017 	ldw	r4,0(r17)
   23d14:	183ee83a 	callr	r3
   23d18:	003ff406 	br	23cec <__alt_data_end+0xfffe3cec>
   23d1c:	a0800017 	ldw	r2,0(r20)
   23d20:	a027883a 	mov	r19,r20
   23d24:	1029883a 	mov	r20,r2
   23d28:	003fb606 	br	23c04 <__alt_data_end+0xfffe3c04>
   23d2c:	0005883a 	mov	r2,zero
   23d30:	003ffb06 	br	23d20 <__alt_data_end+0xfffe3d20>

00023d34 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   23d34:	defffd04 	addi	sp,sp,-12
   23d38:	df000215 	stw	fp,8(sp)
   23d3c:	df000204 	addi	fp,sp,8
   23d40:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   23d44:	0001883a 	nop
   23d48:	e0bfff17 	ldw	r2,-4(fp)
   23d4c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   23d50:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   23d54:	10000226 	beq	r2,zero,23d60 <_exit+0x2c>
    ALT_SIM_FAIL();
   23d58:	002af070 	cmpltui	zero,zero,43969
   23d5c:	00000106 	br	23d64 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   23d60:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   23d64:	003fff06 	br	23d64 <__alt_data_end+0xfffe3d64>
